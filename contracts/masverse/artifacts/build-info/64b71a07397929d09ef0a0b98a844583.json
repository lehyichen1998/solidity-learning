{
	"id": "64b71a07397929d09ef0a0b98a844583",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/masverse/MasToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\r\nimport \"contracts/NewSC/ERC20Capped.sol\";\r\n\r\ncontract MasToken is Ownable, ERC20Pausable, ERC20Capped {\r\n    uint8 private _deci;\r\n\r\n    constructor(\r\n        address initialOwner,\r\n        uint256 maxcap,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 deci,\r\n        uint256 initialSupply\r\n    )\r\n        ERC20(name, symbol)\r\n        Ownable(initialOwner)\r\n        ERC20Capped(maxcap * 10 ** deci)\r\n    {\r\n        _deci = deci;\r\n        _mint(initialOwner, initialSupply);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _deci;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public onlyOwner {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _update(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal override(ERC20Pausable, ERC20Capped) {\r\n        super._update(from, to, value);\r\n    }\r\n\r\n    function getDecimals() public view returns (uint8) {\r\n        return _deci;\r\n    }\r\n\r\n}"
			},
			"contracts/NewSC/ERC20Capped.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Capped.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20Capped is ERC20 {\r\n    uint256 private immutable _cap;\r\n\r\n    /**\r\n     * @dev Total supply cap has been exceeded.\r\n     */\r\n    error ERC20ExceededCap(uint256 increasedSupply, uint256 cap);\r\n\r\n    /**\r\n     * @dev The supplied cap is not a valid cap.\r\n     */\r\n    error ERC20InvalidCap(uint256 cap);\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor(uint256 cap_) {\r\n        _cap = cap_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view virtual returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_update}.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual override {\r\n        super._update(from, to, value);\r\n        uint256 maxSupply = cap();\r\n        if (from == address(0) && maxSupply != 0) {\r\n            \r\n            uint256 supply = totalSupply();\r\n            if (supply > maxSupply) {\r\n                revert ERC20ExceededCap(supply, maxSupply);\r\n            }\r\n        }\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Pausable} from \"../../../utils/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "paris"
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"ERC20Pausable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"paused()": "5c975abb",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":\"ERC20Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a8e54b0924a1acd92806a843998568d6bec01798c550bc440a85cfcd9cfba99\",\"dweb:/ipfs/QmZ26Y3ibYPbCRVB65NAQrGBF1UKDEu2fB8CHHMhYbBqmV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 976,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "5",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 976,
								"contract": "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/NewSC/ERC20Capped.sol": {
				"ERC20Capped": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "increasedSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20ExceededCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20InvalidCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "cap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that adds a cap to the supply of tokens.",
						"errors": {
							"ERC20ExceededCap(uint256,uint256)": [
								{
									"details": "Total supply cap has been exceeded."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidCap(uint256)": [
								{
									"details": "The supplied cap is not a valid cap."
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"cap()": {
								"details": "Returns the cap on the token's total supply."
							},
							"constructor": {
								"details": "Sets the value of the `cap`. This value is immutable, it can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"cap()": "355274ea",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20InvalidCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that adds a cap to the supply of tokens.\",\"errors\":{\"ERC20ExceededCap(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidCap(uint256)\":[{\"details\":\"The supplied cap is not a valid cap.\"}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"constructor\":{\"details\":\"Sets the value of the `cap`. This value is immutable, it can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NewSC/ERC20Capped.sol\":\"ERC20Capped\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/NewSC/ERC20Capped.sol\":{\"keccak256\":\"0xb099574e7f897c5e4168e9c1edac142593c0b6fd1fec58b8e25603366a8e9769\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e2fa56b73fd5c96be375ff6f6cfb82ece7413c75d03079d5418859c626027bf\",\"dweb:/ipfs/QmVCbzbhi7eZks46vDaTiGq6x7TvrfbS2j5Nq5eZSRP841\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "contracts/NewSC/ERC20Capped.sol:ERC20Capped",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "contracts/NewSC/ERC20Capped.sol:ERC20Capped",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "contracts/NewSC/ERC20Capped.sol:ERC20Capped",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "contracts/NewSC/ERC20Capped.sol:ERC20Capped",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "contracts/NewSC/ERC20Capped.sol:ERC20Capped",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/masverse/MasToken.sol": {
				"MasToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "maxcap",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "uint8",
									"name": "deci",
									"type": "uint8"
								},
								{
									"internalType": "uint256",
									"name": "initialSupply",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "increasedSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20ExceededCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20InvalidCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "cap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getDecimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC20ExceededCap(uint256,uint256)": [
								{
									"details": "Total supply cap has been exceeded."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidCap(uint256)": [
								{
									"details": "The supplied cap is not a valid cap."
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"cap()": {
								"details": "Returns the cap on the token's total supply."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/masverse/MasToken.sol\":236:1443  contract MasToken is Ownable, ERC20Pausable, ERC20Capped {... */\n  mstore(0x40, 0xa0)\n    /* \"contracts/masverse/MasToken.sol\":328:699  constructor(... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/masverse/MasToken.sol\":606:616  10 ** deci */\n  tag_5\n    /* \"contracts/masverse/MasToken.sol\":612:616  deci */\n  dup3\n    /* \"contracts/masverse/MasToken.sol\":606:608  10 */\n  0x0a\n    /* \"contracts/masverse/MasToken.sol\":606:616  10 ** deci */\n  tag_6\n  jump\t// in\ntag_5:\n    /* \"contracts/masverse/MasToken.sol\":597:616  maxcap * 10 ** deci */\n  tag_7\n  swap1\n    /* \"contracts/masverse/MasToken.sol\":597:603  maxcap */\n  dup7\n    /* \"contracts/masverse/MasToken.sol\":597:616  maxcap * 10 ** deci */\n  tag_8\n  jump\t// in\ntag_7:\n    /* \"contracts/masverse/MasToken.sol\":531:535  name */\n  dup5\n    /* \"contracts/masverse/MasToken.sol\":537:543  symbol */\n  dup5\n    /* \"contracts/masverse/MasToken.sol\":562:574  initialOwner */\n  dup9\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_14\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":3840:3891   */\n  mstore\n    /* \"#utility.yul\":3813:3831   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\ntag_15:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_14:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_17\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_18\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_17:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  tag_20\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  tag_21\n  jump\t// in\ntag_20:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x05\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_22\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_21\n  jump\t// in\ntag_22:\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1231:1238  _paused */\n  0x06\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1231:1246  _paused = false */\n  dup1\n  sload\n    /* \"contracts/NewSC/ERC20Capped.sol\":800:811  _cap = cap_ */\n  0x80\n  swap4\n  swap1\n  swap4\n  mstore\n  not(0xffff)\n    /* \"contracts/masverse/MasToken.sol\":634:646  _deci = deci */\n  swap1\n  swap3\n  and\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1231:1246  _paused = false */\n  0x0100\n  0xff\n    /* \"contracts/masverse/MasToken.sol\":634:646  _deci = deci */\n  dup7\n  and\n  mul\n  or\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"contracts/masverse/MasToken.sol\":657:691  _mint(initialOwner, initialSupply) */\n  tag_26\n    /* \"contracts/masverse/MasToken.sol\":663:675  initialOwner */\n  dup7\n    /* \"contracts/masverse/MasToken.sol\":677:690  initialSupply */\n  dup3\n    /* \"contracts/masverse/MasToken.sol\":657:662  _mint */\n  tag_27\n    /* \"contracts/masverse/MasToken.sol\":657:691  _mint(initialOwner, initialSupply) */\n  jump\t// in\ntag_26:\n    /* \"contracts/masverse/MasToken.sol\":328:699  constructor(... */\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"contracts/masverse/MasToken.sol\":236:1443  contract MasToken is Ownable, ERC20Pausable, ERC20Capped {... */\n  jump(tag_84)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_18:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\ntag_27:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n  tag_31\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0xec442f05)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":3840:3891   */\n  mstore\n    /* \"#utility.yul\":3813:3831   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n  tag_15\n    /* \"#utility.yul\":3694:3897   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\ntag_31:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n  tag_33\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n  tag_34\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n  jump\t// in\ntag_33:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/masverse/MasToken.sol\":1161:1348  function _update(... */\ntag_34:\n    /* \"contracts/masverse/MasToken.sol\":1310:1340  super._update(from, to, value) */\n  tag_36\n    /* \"contracts/masverse/MasToken.sol\":1324:1328  from */\n  dup4\n    /* \"contracts/masverse/MasToken.sol\":1330:1332  to */\n  dup4\n    /* \"contracts/masverse/MasToken.sol\":1334:1339  value */\n  dup4\n    /* \"contracts/masverse/MasToken.sol\":1310:1323  super._update */\n  tag_37\n    /* \"contracts/masverse/MasToken.sol\":1310:1340  super._update(from, to, value) */\n  jump\t// in\ntag_36:\n    /* \"contracts/masverse/MasToken.sol\":1161:1348  function _update(... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/NewSC/ERC20Capped.sol\":1046:1453  function _update(address from, address to, uint256 value) internal virtual override {... */\ntag_37:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1141:1171  super._update(from, to, value) */\n  tag_39\n    /* \"contracts/NewSC/ERC20Capped.sol\":1155:1159  from */\n  dup4\n    /* \"contracts/NewSC/ERC20Capped.sol\":1161:1163  to */\n  dup4\n    /* \"contracts/NewSC/ERC20Capped.sol\":1165:1170  value */\n  dup4\n    /* \"contracts/NewSC/ERC20Capped.sol\":1141:1154  super._update */\n  tag_40\n    /* \"contracts/NewSC/ERC20Capped.sol\":1141:1171  super._update(from, to, value) */\n  jump\t// in\ntag_39:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1182:1199  uint256 maxSupply */\n  0x00\n    /* \"contracts/NewSC/ERC20Capped.sol\":1202:1207  cap() */\n  tag_41\n    /* \"contracts/NewSC/ERC20Capped.sol\":974:978  _cap */\n  mload(0x80)\n  swap1\n    /* \"contracts/NewSC/ERC20Capped.sol\":903:986  function cap() public view virtual returns (uint256) {... */\n  jump\n    /* \"contracts/NewSC/ERC20Capped.sol\":1202:1207  cap() */\ntag_41:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1182:1207  uint256 maxSupply = cap() */\n  swap1\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/NewSC/ERC20Capped.sol\":1222:1240  from == address(0) */\n  dup5\n  and\n  iszero\n    /* \"contracts/NewSC/ERC20Capped.sol\":1222:1258  from == address(0) && maxSupply != 0 */\n  dup1\n  iszero\n  tag_43\n  jumpi\n  pop\n    /* \"contracts/NewSC/ERC20Capped.sol\":1244:1258  maxSupply != 0 */\n  dup1\n  iszero\n  iszero\n    /* \"contracts/NewSC/ERC20Capped.sol\":1222:1258  from == address(0) && maxSupply != 0 */\ntag_43:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1218:1446  if (from == address(0) && maxSupply != 0) {... */\n  iszero\n  tag_44\n  jumpi\n    /* \"contracts/NewSC/ERC20Capped.sol\":1289:1303  uint256 supply */\n  0x00\n    /* \"contracts/NewSC/ERC20Capped.sol\":1306:1319  totalSupply() */\n  tag_45\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n  sload(0x03)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n  jump\n    /* \"contracts/NewSC/ERC20Capped.sol\":1306:1319  totalSupply() */\ntag_45:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1289:1319  uint256 supply = totalSupply() */\n  swap1\n  pop\n    /* \"contracts/NewSC/ERC20Capped.sol\":1347:1356  maxSupply */\n  dup2\n    /* \"contracts/NewSC/ERC20Capped.sol\":1338:1344  supply */\n  dup2\n    /* \"contracts/NewSC/ERC20Capped.sol\":1338:1356  supply > maxSupply */\n  gt\n    /* \"contracts/NewSC/ERC20Capped.sol\":1334:1435  if (supply > maxSupply) {... */\n  iszero\n  tag_47\n  jumpi\n    /* \"contracts/NewSC/ERC20Capped.sol\":1384:1419  ERC20ExceededCap(supply, maxSupply) */\n  mload(0x40)\n  shl(0xe2, 0x279e7e15)\n  dup2\n  mstore\n  0x04\n  dup2\n  add\n    /* \"#utility.yul\":6656:6681   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":6697:6715   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":6690:6724   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":6629:6647   */\n  0x44\n  add\n    /* \"contracts/NewSC/ERC20Capped.sol\":1384:1419  ERC20ExceededCap(supply, maxSupply) */\n  tag_15\n    /* \"#utility.yul\":6482:6730   */\n  jump\n    /* \"contracts/NewSC/ERC20Capped.sol\":1334:1435  if (supply > maxSupply) {... */\ntag_47:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1260:1446  {... */\n  pop\n    /* \"contracts/NewSC/ERC20Capped.sol\":1218:1446  if (from == address(0) && maxSupply != 0) {... */\ntag_44:\n    /* \"contracts/NewSC/ERC20Capped.sol\":1130:1453  {... */\n  pop\n    /* \"contracts/NewSC/ERC20Capped.sol\":1046:1453  function _update(address from, address to, uint256 value) internal virtual override {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1112:1257  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\ntag_40:\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n  tag_51\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1491  _requireNotPaused */\n  tag_52\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n  jump\t// in\ntag_51:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1250  super._update(from, to, value) */\n  tag_36\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1234:1238  from */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1240:1242  to */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1244:1249  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1233  super._update */\n  tag_55\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1250  super._update(from, to, value) */\n  jump\t// in\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":2002:2130  function _requireNotPaused() internal view virtual {... */\ntag_52:\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1920:1927  _paused */\n  and(0xff, sload(0x06))\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":2063:2124  if (paused()) {... */\n  iszero\n  tag_61\n  jumpi\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":2098:2113  EnforcedPause() */\n  mload(0x40)\n  shl(0xe0, 0xd93c0665)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":2063:2124  if (paused()) {... */\ntag_61:\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":2002:2130  function _requireNotPaused() internal view virtual {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_55:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n  tag_63\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n  0x03\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_64\n  swap2\n  swap1\n  tag_65\n  jump\t// in\ntag_64:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n  tag_66\n  swap1\n  pop\n  jump\ntag_63:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n  swap1\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n  0x01\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n  dup2\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n  iszero\n  tag_67\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  shl(0xe2, 0x391434e3)\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":7085:7117   */\n  dup6\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":7067:7118   */\n  mstore\n    /* \"#utility.yul\":7134:7152   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":7127:7161   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":7177:7195   */\n  0x44\n  dup2\n  add\n    /* \"#utility.yul\":7170:7204   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":7040:7058   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n  tag_15\n    /* \"#utility.yul\":6865:7210   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\ntag_67:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n  dup5\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n  0x01\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n  swap1\n  dup3\n  swap1\n  sub\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\ntag_66:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n  tag_70\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n  dup1\n  sload\n  dup3\n  swap1\n  sub\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n  jump(tag_71)\ntag_70:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n  dup3\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n  0x01\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n  dup1\n  sload\n  dup3\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\ntag_71:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n  mload(0x40)\n  tag_72\n  swap2\n    /* \"#utility.yul\":7361:7386   */\n  dup2\n  mstore\n    /* \"#utility.yul\":7349:7351   */\n  0x20\n    /* \"#utility.yul\":7334:7352   */\n  add\n  swap1\n    /* \"#utility.yul\":7215:7392   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\ntag_72:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_75:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:990   */\ntag_76:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_87\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_87:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_89\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_89\n  tag_75\n  jump\t// in\ntag_89:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_91\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_91\n  tag_75\n  jump\t// in\ntag_91:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":732:735   */\n  dup7\n    /* \"#utility.yul\":725:729   */\n  0x20\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:730   */\n  add\n    /* \"#utility.yul\":701:736   */\n  gt\n    /* \"#utility.yul\":698:753   */\n  iszero\n  tag_92\n  jumpi\n    /* \"#utility.yul\":749:750   */\n  0x00\n    /* \"#utility.yul\":746:747   */\n  dup1\n    /* \"#utility.yul\":739:751   */\n  revert\n    /* \"#utility.yul\":698:753   */\ntag_92:\n    /* \"#utility.yul\":771:772   */\n  0x00\n    /* \"#utility.yul\":762:772   */\n  swap2\n  pop\n    /* \"#utility.yul\":781:914   */\ntag_93:\n    /* \"#utility.yul\":795:797   */\n  dup4\n    /* \"#utility.yul\":792:793   */\n  dup3\n    /* \"#utility.yul\":789:798   */\n  lt\n    /* \"#utility.yul\":781:914   */\n  iszero\n  tag_95\n  jumpi\n    /* \"#utility.yul\":883:897   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":879:902   */\n  dup4\n  add\n    /* \"#utility.yul\":873:903   */\n  mload\n    /* \"#utility.yul\":852:866   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":848:871   */\n  dup5\n  add\n    /* \"#utility.yul\":841:904   */\n  mstore\n    /* \"#utility.yul\":806:816   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":781:914   */\n  jump(tag_93)\ntag_95:\n    /* \"#utility.yul\":958:959   */\n  0x00\n    /* \"#utility.yul\":951:955   */\n  0x20\n    /* \"#utility.yul\":946:948   */\n  dup6\n    /* \"#utility.yul\":938:944   */\n  dup4\n    /* \"#utility.yul\":934:949   */\n  add\n    /* \"#utility.yul\":930:956   */\n  add\n    /* \"#utility.yul\":923:960   */\n  mstore\n    /* \"#utility.yul\":978:984   */\n  dup1\n    /* \"#utility.yul\":969:984   */\n  swap5\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":146:990   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":995:2007   */\ntag_3:\n    /* \"#utility.yul\":1128:1134   */\n  0x00\n    /* \"#utility.yul\":1136:1142   */\n  dup1\n    /* \"#utility.yul\":1144:1150   */\n  0x00\n    /* \"#utility.yul\":1152:1158   */\n  dup1\n    /* \"#utility.yul\":1160:1166   */\n  0x00\n    /* \"#utility.yul\":1168:1174   */\n  dup1\n    /* \"#utility.yul\":1221:1224   */\n  0xc0\n    /* \"#utility.yul\":1209:1218   */\n  dup8\n    /* \"#utility.yul\":1200:1207   */\n  dup10\n    /* \"#utility.yul\":1196:1219   */\n  sub\n    /* \"#utility.yul\":1192:1225   */\n  slt\n    /* \"#utility.yul\":1189:1242   */\n  iszero\n  tag_97\n  jumpi\n    /* \"#utility.yul\":1238:1239   */\n  0x00\n    /* \"#utility.yul\":1235:1236   */\n  dup1\n    /* \"#utility.yul\":1228:1240   */\n  revert\n    /* \"#utility.yul\":1189:1242   */\ntag_97:\n    /* \"#utility.yul\":1264:1280   */\n  dup7\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":1309:1340   */\n  dup2\n  and\n    /* \"#utility.yul\":1299:1341   */\n  dup2\n  eq\n    /* \"#utility.yul\":1289:1359   */\n  tag_98\n  jumpi\n    /* \"#utility.yul\":1355:1356   */\n  0x00\n    /* \"#utility.yul\":1352:1353   */\n  dup1\n    /* \"#utility.yul\":1345:1357   */\n  revert\n    /* \"#utility.yul\":1289:1359   */\ntag_98:\n    /* \"#utility.yul\":1423:1425   */\n  0x20\n    /* \"#utility.yul\":1408:1426   */\n  dup9\n  add\n    /* \"#utility.yul\":1402:1427   */\n  mload\n    /* \"#utility.yul\":1471:1473   */\n  0x40\n    /* \"#utility.yul\":1456:1474   */\n  dup10\n  add\n    /* \"#utility.yul\":1450:1475   */\n  mload\n    /* \"#utility.yul\":1378:1383   */\n  swap2\n  swap8\n  pop\n    /* \"#utility.yul\":1402:1427   */\n  swap6\n  pop\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1524:1538   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1521:1555   */\n  iszero\n  tag_99\n  jumpi\n    /* \"#utility.yul\":1551:1552   */\n  0x00\n    /* \"#utility.yul\":1548:1549   */\n  dup1\n    /* \"#utility.yul\":1541:1553   */\n  revert\n    /* \"#utility.yul\":1521:1555   */\ntag_99:\n    /* \"#utility.yul\":1574:1635   */\n  tag_100\n    /* \"#utility.yul\":1627:1634   */\n  dup11\n    /* \"#utility.yul\":1618:1624   */\n  dup4\n    /* \"#utility.yul\":1607:1616   */\n  dup12\n    /* \"#utility.yul\":1603:1625   */\n  add\n    /* \"#utility.yul\":1574:1635   */\n  tag_76\n  jump\t// in\ntag_100:\n    /* \"#utility.yul\":1564:1635   */\n  swap6\n  pop\n    /* \"#utility.yul\":1681:1683   */\n  0x60\n    /* \"#utility.yul\":1670:1679   */\n  dup10\n    /* \"#utility.yul\":1666:1684   */\n  add\n    /* \"#utility.yul\":1660:1685   */\n  mload\n    /* \"#utility.yul\":1644:1685   */\n  swap2\n  pop\n    /* \"#utility.yul\":1710:1712   */\n  dup1\n    /* \"#utility.yul\":1700:1708   */\n  dup3\n    /* \"#utility.yul\":1697:1713   */\n  gt\n    /* \"#utility.yul\":1694:1730   */\n  iszero\n  tag_101\n  jumpi\n    /* \"#utility.yul\":1726:1727   */\n  0x00\n    /* \"#utility.yul\":1723:1724   */\n  dup1\n    /* \"#utility.yul\":1716:1728   */\n  revert\n    /* \"#utility.yul\":1694:1730   */\ntag_101:\n  pop\n    /* \"#utility.yul\":1749:1812   */\n  tag_102\n    /* \"#utility.yul\":1804:1811   */\n  dup10\n    /* \"#utility.yul\":1793:1801   */\n  dup3\n    /* \"#utility.yul\":1782:1791   */\n  dup11\n    /* \"#utility.yul\":1778:1802   */\n  add\n    /* \"#utility.yul\":1749:1812   */\n  tag_76\n  jump\t// in\ntag_102:\n    /* \"#utility.yul\":1739:1812   */\n  swap4\n  pop\n  pop\n    /* \"#utility.yul\":1857:1860   */\n  0x80\n    /* \"#utility.yul\":1846:1855   */\n  dup8\n    /* \"#utility.yul\":1842:1861   */\n  add\n    /* \"#utility.yul\":1836:1862   */\n  mload\n    /* \"#utility.yul\":1906:1910   */\n  0xff\n    /* \"#utility.yul\":1897:1904   */\n  dup2\n    /* \"#utility.yul\":1893:1911   */\n  and\n    /* \"#utility.yul\":1884:1891   */\n  dup2\n    /* \"#utility.yul\":1881:1912   */\n  eq\n    /* \"#utility.yul\":1871:1930   */\n  tag_103\n  jumpi\n    /* \"#utility.yul\":1926:1927   */\n  0x00\n    /* \"#utility.yul\":1923:1924   */\n  dup1\n    /* \"#utility.yul\":1916:1928   */\n  revert\n    /* \"#utility.yul\":1871:1930   */\ntag_103:\n    /* \"#utility.yul\":1949:1956   */\n  dup1\n    /* \"#utility.yul\":1939:1956   */\n  swap3\n  pop\n  pop\n    /* \"#utility.yul\":1996:1999   */\n  0xa0\n    /* \"#utility.yul\":1985:1994   */\n  dup8\n    /* \"#utility.yul\":1981:2000   */\n  add\n    /* \"#utility.yul\":1975:2001   */\n  mload\n    /* \"#utility.yul\":1965:2001   */\n  swap1\n  pop\n    /* \"#utility.yul\":995:2007   */\n  swap3\n  swap6\n  pop\n  swap3\n  swap6\n  pop\n  swap3\n  swap6\n  jump\t// out\n    /* \"#utility.yul\":2012:2139   */\ntag_77:\n    /* \"#utility.yul\":2073:2083   */\n  0x4e487b71\n    /* \"#utility.yul\":2068:2071   */\n  0xe0\n    /* \"#utility.yul\":2064:2084   */\n  shl\n    /* \"#utility.yul\":2061:2062   */\n  0x00\n    /* \"#utility.yul\":2054:2085   */\n  mstore\n    /* \"#utility.yul\":2104:2108   */\n  0x11\n    /* \"#utility.yul\":2101:2102   */\n  0x04\n    /* \"#utility.yul\":2094:2109   */\n  mstore\n    /* \"#utility.yul\":2128:2132   */\n  0x24\n    /* \"#utility.yul\":2125:2126   */\n  0x00\n    /* \"#utility.yul\":2118:2133   */\n  revert\n    /* \"#utility.yul\":2144:2560   */\ntag_78:\n    /* \"#utility.yul\":2233:2234   */\n  0x01\n    /* \"#utility.yul\":2270:2275   */\n  dup2\n    /* \"#utility.yul\":2233:2234   */\n  dup2\n    /* \"#utility.yul\":2284:2554   */\ntag_106:\n    /* \"#utility.yul\":2305:2312   */\n  dup1\n    /* \"#utility.yul\":2295:2303   */\n  dup6\n    /* \"#utility.yul\":2292:2313   */\n  gt\n    /* \"#utility.yul\":2284:2554   */\n  iszero\n  tag_108\n  jumpi\n    /* \"#utility.yul\":2364:2368   */\n  dup2\n    /* \"#utility.yul\":2360:2361   */\n  0x00\n    /* \"#utility.yul\":2356:2362   */\n  not\n    /* \"#utility.yul\":2352:2369   */\n  div\n    /* \"#utility.yul\":2346:2350   */\n  dup3\n    /* \"#utility.yul\":2343:2370   */\n  gt\n    /* \"#utility.yul\":2340:2393   */\n  iszero\n  tag_110\n  jumpi\n    /* \"#utility.yul\":2373:2391   */\n  tag_110\n  tag_77\n  jump\t// in\ntag_110:\n    /* \"#utility.yul\":2423:2430   */\n  dup1\n    /* \"#utility.yul\":2413:2421   */\n  dup6\n    /* \"#utility.yul\":2409:2431   */\n  and\n    /* \"#utility.yul\":2406:2461   */\n  iszero\n  tag_111\n  jumpi\n    /* \"#utility.yul\":2443:2459   */\n  swap2\n  dup2\n  mul\n  swap2\n    /* \"#utility.yul\":2406:2461   */\ntag_111:\n    /* \"#utility.yul\":2522:2544   */\n  swap4\n  dup5\n  shr\n  swap4\n    /* \"#utility.yul\":2482:2497   */\n  swap1\n  dup1\n  mul\n  swap1\n    /* \"#utility.yul\":2284:2554   */\n  jump(tag_106)\ntag_108:\n    /* \"#utility.yul\":2288:2291   */\n  pop\n    /* \"#utility.yul\":2144:2560   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2565:3371   */\ntag_79:\n    /* \"#utility.yul\":2614:2619   */\n  0x00\n    /* \"#utility.yul\":2644:2652   */\n  dup3\n    /* \"#utility.yul\":2634:2714   */\n  tag_113\n  jumpi\n  pop\n    /* \"#utility.yul\":2685:2686   */\n  0x01\n    /* \"#utility.yul\":2699:2704   */\n  jump(tag_112)\n    /* \"#utility.yul\":2634:2714   */\ntag_113:\n    /* \"#utility.yul\":2733:2737   */\n  dup2\n    /* \"#utility.yul\":2723:2799   */\n  tag_114\n  jumpi\n  pop\n    /* \"#utility.yul\":2770:2771   */\n  0x00\n    /* \"#utility.yul\":2784:2789   */\n  jump(tag_112)\n    /* \"#utility.yul\":2723:2799   */\ntag_114:\n    /* \"#utility.yul\":2815:2819   */\n  dup2\n    /* \"#utility.yul\":2833:2834   */\n  0x01\n    /* \"#utility.yul\":2828:2887   */\n  dup2\n  eq\n  tag_116\n  jumpi\n    /* \"#utility.yul\":2901:2902   */\n  0x02\n    /* \"#utility.yul\":2896:3026   */\n  dup2\n  eq\n  tag_117\n  jumpi\n    /* \"#utility.yul\":2808:3026   */\n  jump(tag_115)\n    /* \"#utility.yul\":2828:2887   */\ntag_116:\n    /* \"#utility.yul\":2858:2859   */\n  0x01\n    /* \"#utility.yul\":2849:2859   */\n  swap2\n  pop\n    /* \"#utility.yul\":2872:2877   */\n  pop\n  jump(tag_112)\n    /* \"#utility.yul\":2896:3026   */\ntag_117:\n    /* \"#utility.yul\":2933:2936   */\n  0xff\n    /* \"#utility.yul\":2923:2931   */\n  dup5\n    /* \"#utility.yul\":2920:2937   */\n  gt\n    /* \"#utility.yul\":2917:2960   */\n  iszero\n  tag_119\n  jumpi\n    /* \"#utility.yul\":2940:2958   */\n  tag_119\n  tag_77\n  jump\t// in\ntag_119:\n  pop\n  pop\n    /* \"#utility.yul\":2996:2997   */\n  0x01\n    /* \"#utility.yul\":2982:2998   */\n  dup3\n  shl\n    /* \"#utility.yul\":3011:3016   */\n  jump(tag_112)\n    /* \"#utility.yul\":2808:3026   */\ntag_115:\n  pop\n    /* \"#utility.yul\":3110:3112   */\n  0x20\n    /* \"#utility.yul\":3100:3108   */\n  dup4\n    /* \"#utility.yul\":3097:3113   */\n  lt\n    /* \"#utility.yul\":3091:3094   */\n  0x0133\n    /* \"#utility.yul\":3085:3089   */\n  dup4\n    /* \"#utility.yul\":3082:3095   */\n  lt\n    /* \"#utility.yul\":3078:3114   */\n  and\n    /* \"#utility.yul\":3072:3074   */\n  0x4e\n    /* \"#utility.yul\":3062:3070   */\n  dup5\n    /* \"#utility.yul\":3059:3075   */\n  lt\n    /* \"#utility.yul\":3054:3056   */\n  0x0b\n    /* \"#utility.yul\":3048:3052   */\n  dup5\n    /* \"#utility.yul\":3045:3057   */\n  lt\n    /* \"#utility.yul\":3041:3076   */\n  and\n    /* \"#utility.yul\":3038:3115   */\n  or\n    /* \"#utility.yul\":3035:3194   */\n  iszero\n  tag_120\n  jumpi\n  pop\n    /* \"#utility.yul\":3147:3166   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":3179:3184   */\n  jump(tag_112)\n    /* \"#utility.yul\":3035:3194   */\ntag_120:\n    /* \"#utility.yul\":3226:3260   */\n  tag_121\n    /* \"#utility.yul\":3251:3259   */\n  dup4\n    /* \"#utility.yul\":3245:3249   */\n  dup4\n    /* \"#utility.yul\":3226:3260   */\n  tag_78\n  jump\t// in\ntag_121:\n    /* \"#utility.yul\":3296:3302   */\n  dup1\n    /* \"#utility.yul\":3292:3293   */\n  0x00\n    /* \"#utility.yul\":3288:3294   */\n  not\n    /* \"#utility.yul\":3284:3303   */\n  div\n    /* \"#utility.yul\":3275:3282   */\n  dup3\n    /* \"#utility.yul\":3272:3304   */\n  gt\n    /* \"#utility.yul\":3269:3327   */\n  iszero\n  tag_123\n  jumpi\n    /* \"#utility.yul\":3307:3325   */\n  tag_123\n  tag_77\n  jump\t// in\ntag_123:\n    /* \"#utility.yul\":3345:3365   */\n  mul\n  swap1\n  pop\n    /* \"#utility.yul\":2565:3371   */\ntag_112:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3376:3516   */\ntag_6:\n    /* \"#utility.yul\":3434:3439   */\n  0x00\n    /* \"#utility.yul\":3463:3510   */\n  tag_125\n    /* \"#utility.yul\":3504:3508   */\n  0xff\n    /* \"#utility.yul\":3494:3502   */\n  dup5\n    /* \"#utility.yul\":3490:3509   */\n  and\n    /* \"#utility.yul\":3484:3488   */\n  dup4\n    /* \"#utility.yul\":3463:3510   */\n  tag_79\n  jump\t// in\ntag_125:\n    /* \"#utility.yul\":3454:3510   */\n  swap4\n    /* \"#utility.yul\":3376:3516   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3521:3689   */\ntag_8:\n    /* \"#utility.yul\":3594:3603   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":3625:3634   */\n  dup2\n  iszero\n    /* \"#utility.yul\":3642:3657   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":3636:3658   */\n  dup5\n  eq\n    /* \"#utility.yul\":3622:3659   */\n  or\n    /* \"#utility.yul\":3612:3683   */\n  tag_112\n  jumpi\n    /* \"#utility.yul\":3663:3681   */\n  tag_112\n  tag_77\n  jump\t// in\n    /* \"#utility.yul\":3902:4282   */\ntag_80:\n    /* \"#utility.yul\":3981:3982   */\n  0x01\n    /* \"#utility.yul\":3977:3989   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":4024:4036   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":4045:4106   */\n  tag_131\n  jumpi\n    /* \"#utility.yul\":4099:4103   */\n  0x7f\n    /* \"#utility.yul\":4091:4097   */\n  dup3\n    /* \"#utility.yul\":4087:4104   */\n  and\n    /* \"#utility.yul\":4077:4104   */\n  swap2\n  pop\n    /* \"#utility.yul\":4045:4106   */\ntag_131:\n    /* \"#utility.yul\":4152:4154   */\n  0x20\n    /* \"#utility.yul\":4144:4150   */\n  dup3\n    /* \"#utility.yul\":4141:4155   */\n  lt\n    /* \"#utility.yul\":4121:4139   */\n  dup2\n    /* \"#utility.yul\":4118:4156   */\n  sub\n    /* \"#utility.yul\":4115:4276   */\n  tag_132\n  jumpi\n    /* \"#utility.yul\":4198:4208   */\n  0x4e487b71\n    /* \"#utility.yul\":4193:4196   */\n  0xe0\n    /* \"#utility.yul\":4189:4209   */\n  shl\n    /* \"#utility.yul\":4186:4187   */\n  0x00\n    /* \"#utility.yul\":4179:4210   */\n  mstore\n    /* \"#utility.yul\":4233:4237   */\n  0x22\n    /* \"#utility.yul\":4230:4231   */\n  0x04\n    /* \"#utility.yul\":4223:4238   */\n  mstore\n    /* \"#utility.yul\":4261:4265   */\n  0x24\n    /* \"#utility.yul\":4258:4259   */\n  0x00\n    /* \"#utility.yul\":4251:4266   */\n  revert\n    /* \"#utility.yul\":4115:4276   */\ntag_132:\n  pop\n    /* \"#utility.yul\":3902:4282   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4413:4956   */\ntag_82:\n    /* \"#utility.yul\":4515:4517   */\n  0x1f\n    /* \"#utility.yul\":4510:4513   */\n  dup3\n    /* \"#utility.yul\":4507:4518   */\n  gt\n    /* \"#utility.yul\":4504:4950   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":4551:4552   */\n  0x00\n    /* \"#utility.yul\":4575:4580   */\n  dup2\n    /* \"#utility.yul\":4572:4573   */\n  0x00\n    /* \"#utility.yul\":4565:4581   */\n  mstore\n    /* \"#utility.yul\":4619:4623   */\n  0x20\n    /* \"#utility.yul\":4616:4617   */\n  0x00\n    /* \"#utility.yul\":4606:4624   */\n  keccak256\n    /* \"#utility.yul\":4689:4691   */\n  0x1f\n    /* \"#utility.yul\":4677:4687   */\n  dup6\n    /* \"#utility.yul\":4673:4692   */\n  add\n    /* \"#utility.yul\":4670:4671   */\n  0x05\n    /* \"#utility.yul\":4666:4693   */\n  shr\n    /* \"#utility.yul\":4660:4664   */\n  dup2\n    /* \"#utility.yul\":4656:4694   */\n  add\n    /* \"#utility.yul\":4725:4729   */\n  0x20\n    /* \"#utility.yul\":4713:4723   */\n  dup7\n    /* \"#utility.yul\":4710:4730   */\n  lt\n    /* \"#utility.yul\":4707:4754   */\n  iszero\n  tag_136\n  jumpi\n  pop\n    /* \"#utility.yul\":4748:4752   */\n  dup1\n    /* \"#utility.yul\":4707:4754   */\ntag_136:\n    /* \"#utility.yul\":4803:4805   */\n  0x1f\n    /* \"#utility.yul\":4798:4801   */\n  dup6\n    /* \"#utility.yul\":4794:4806   */\n  add\n    /* \"#utility.yul\":4791:4792   */\n  0x05\n    /* \"#utility.yul\":4787:4807   */\n  shr\n    /* \"#utility.yul\":4781:4785   */\n  dup3\n    /* \"#utility.yul\":4777:4808   */\n  add\n    /* \"#utility.yul\":4767:4808   */\n  swap2\n  pop\n    /* \"#utility.yul\":4858:4940   */\ntag_137:\n    /* \"#utility.yul\":4876:4878   */\n  dup2\n    /* \"#utility.yul\":4869:4874   */\n  dup2\n    /* \"#utility.yul\":4866:4879   */\n  lt\n    /* \"#utility.yul\":4858:4940   */\n  iszero\n  tag_139\n  jumpi\n    /* \"#utility.yul\":4921:4938   */\n  dup3\n  dup2\n  sstore\n    /* \"#utility.yul\":4902:4903   */\n  0x01\n    /* \"#utility.yul\":4891:4904   */\n  add\n    /* \"#utility.yul\":4858:4940   */\n  jump(tag_137)\ntag_139:\n    /* \"#utility.yul\":4862:4865   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":4413:4956   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5132:6477   */\ntag_21:\n    /* \"#utility.yul\":5252:5262   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":5274:5304   */\n  dup2\n  gt\n    /* \"#utility.yul\":5271:5327   */\n  iszero\n  tag_143\n  jumpi\n    /* \"#utility.yul\":5307:5325   */\n  tag_143\n  tag_75\n  jump\t// in\ntag_143:\n    /* \"#utility.yul\":5336:5433   */\n  tag_144\n    /* \"#utility.yul\":5426:5432   */\n  dup2\n    /* \"#utility.yul\":5386:5424   */\n  tag_145\n    /* \"#utility.yul\":5418:5422   */\n  dup5\n    /* \"#utility.yul\":5412:5423   */\n  sload\n    /* \"#utility.yul\":5386:5424   */\n  tag_80\n  jump\t// in\ntag_145:\n    /* \"#utility.yul\":5380:5384   */\n  dup5\n    /* \"#utility.yul\":5336:5433   */\n  tag_82\n  jump\t// in\ntag_144:\n    /* \"#utility.yul\":5488:5492   */\n  0x20\n  dup1\n    /* \"#utility.yul\":5545:5547   */\n  0x1f\n    /* \"#utility.yul\":5534:5548   */\n  dup4\n  gt\n    /* \"#utility.yul\":5562:5563   */\n  0x01\n    /* \"#utility.yul\":5557:6220   */\n  dup2\n  eq\n  tag_147\n  jumpi\n    /* \"#utility.yul\":6264:6265   */\n  0x00\n    /* \"#utility.yul\":6281:6287   */\n  dup5\n    /* \"#utility.yul\":6278:6367   */\n  iszero\n  tag_148\n  jumpi\n  pop\n    /* \"#utility.yul\":6333:6352   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":6327:6353   */\n  mload\n    /* \"#utility.yul\":6278:6367   */\ntag_148:\n  not(0x00)\n    /* \"#utility.yul\":5089:5090   */\n  0x03\n    /* \"#utility.yul\":5085:5096   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":5081:5105   */\n  shr\n    /* \"#utility.yul\":5077:5106   */\n  not\n    /* \"#utility.yul\":5067:5107   */\n  and\n    /* \"#utility.yul\":5113:5114   */\n  0x01\n    /* \"#utility.yul\":5109:5120   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":5064:5121   */\n  or\n    /* \"#utility.yul\":6380:6461   */\n  dup6\n  sstore\n    /* \"#utility.yul\":5527:6471   */\n  jump(tag_139)\n    /* \"#utility.yul\":5557:6220   */\ntag_147:\n    /* \"#utility.yul\":4360:4361   */\n  0x00\n    /* \"#utility.yul\":4353:4367   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":4397:4401   */\n  0x20\n    /* \"#utility.yul\":4384:4402   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":5593:5613   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":5711:5947   */\ntag_151:\n    /* \"#utility.yul\":5725:5732   */\n  dup3\n    /* \"#utility.yul\":5722:5723   */\n  dup2\n    /* \"#utility.yul\":5719:5733   */\n  lt\n    /* \"#utility.yul\":5711:5947   */\n  iszero\n  tag_153\n  jumpi\n    /* \"#utility.yul\":5814:5833   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":5808:5834   */\n  mload\n    /* \"#utility.yul\":5793:5835   */\n  dup3\n  sstore\n    /* \"#utility.yul\":5906:5933   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":5874:5875   */\n  0x01\n    /* \"#utility.yul\":5862:5876   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":5741:5760   */\n  dup5\n  add\n    /* \"#utility.yul\":5711:5947   */\n  jump(tag_151)\ntag_153:\n    /* \"#utility.yul\":5715:5718   */\n  pop\n    /* \"#utility.yul\":5975:5981   */\n  dup6\n    /* \"#utility.yul\":5966:5973   */\n  dup3\n    /* \"#utility.yul\":5963:5982   */\n  lt\n    /* \"#utility.yul\":5960:6161   */\n  iszero\n  tag_154\n  jumpi\n    /* \"#utility.yul\":6036:6055   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":6030:6056   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":6119:6120   */\n  0x03\n    /* \"#utility.yul\":6115:6129   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":6131:6134   */\n  0xf8\n    /* \"#utility.yul\":6111:6135   */\n  and\n    /* \"#utility.yul\":6107:6144   */\n  shr\n    /* \"#utility.yul\":6103:6145   */\n  not\n    /* \"#utility.yul\":6088:6146   */\n  and\n    /* \"#utility.yul\":6073:6147   */\n  dup2\n  sstore\n    /* \"#utility.yul\":5960:6161   */\ntag_154:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":6207:6208   */\n  0x01\n    /* \"#utility.yul\":6191:6205   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":6187:6209   */\n  add\n    /* \"#utility.yul\":6174:6210   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":5132:6477   */\n  jump\t// out\n    /* \"#utility.yul\":6735:6860   */\ntag_65:\n    /* \"#utility.yul\":6800:6809   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":6821:6831   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":6818:6854   */\n  iszero\n  tag_112\n  jumpi\n    /* \"#utility.yul\":6834:6852   */\n  tag_112\n  tag_77\n  jump\t// in\n    /* \"#utility.yul\":7215:7392   */\ntag_84:\n    /* \"contracts/masverse/MasToken.sol\":236:1443  contract MasToken is Ownable, ERC20Pausable, ERC20Capped {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x8129634de98ff4eac36cfdb2b9e1dc55781fddf4fba9ec16d4ac1f285a99533e\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/masverse/MasToken.sol\":236:1443  contract MasToken is Ownable, ERC20Pausable, ERC20Capped {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x9dc29fac\n      gt\n      tag_23\n      jumpi\n      dup1\n      0x9dc29fac\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xf0141d84\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0x70a08231\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x313ce567\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x355274ea\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n        /* \"#utility.yul\":1169:1183   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1162:1184   */\n      iszero\n        /* \"#utility.yul\":1144:1185   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1132:1134   */\n      0x20\n        /* \"#utility.yul\":1117:1135   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_27\n        /* \"#utility.yul\":1004:1191   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x03)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_35:\n      mload(0x40)\n        /* \"#utility.yul\":1342:1367   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      tag_27\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_29\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n        /* \"contracts/masverse/MasToken.sol\":707:795  function decimals() public view override returns (uint8) {... */\n    tag_7:\n        /* \"contracts/masverse/MasToken.sol\":782:787  _deci */\n      sload(0x06)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/masverse/MasToken.sol\":707:795  function decimals() public view override returns (uint8) {... */\n      mload(0x40)\n        /* \"#utility.yul\":1883:1887   */\n      0xff\n        /* \"#utility.yul\":1871:1888   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1853:1889   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1841:1843   */\n      0x20\n        /* \"#utility.yul\":1826:1844   */\n      add\n        /* \"contracts/masverse/MasToken.sol\":707:795  function decimals() public view override returns (uint8) {... */\n      tag_27\n        /* \"#utility.yul\":1711:1895   */\n      jump\n        /* \"contracts/NewSC/ERC20Capped.sol\":903:986  function cap() public view virtual returns (uint256) {... */\n    tag_8:\n        /* \"contracts/NewSC/ERC20Capped.sol\":974:978  _cap */\n      immutable(\"0x8129634de98ff4eac36cfdb2b9e1dc55781fddf4fba9ec16d4ac1f285a99533e\")\n        /* \"contracts/NewSC/ERC20Capped.sol\":903:986  function cap() public view virtual returns (uint256) {... */\n      jump(tag_35)\n        /* \"contracts/masverse/MasToken.sol\":1088:1153  function unpause() public onlyOwner {... */\n    tag_9:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      stop\n        /* \"contracts/masverse/MasToken.sol\":803:898  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_10:\n      tag_51\n      tag_54\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1850:1934  function paused() public view virtual returns (bool) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1920:1927  _paused */\n      and(0xff, sload(0x06))\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1850:1934  function paused() public view virtual returns (bool) {... */\n      jump(tag_29)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_35\n      tag_60\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_13:\n      tag_51\n      tag_65\n      jump\t// in\n        /* \"contracts/masverse/MasToken.sol\":1019:1080  function pause() public onlyOwner {... */\n    tag_14:\n      tag_51\n      tag_67\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_15:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2237:2288   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2225:2227   */\n      0x20\n        /* \"#utility.yul\":2210:2228   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      tag_27\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_16:\n      tag_25\n      tag_73\n      jump\t// in\n        /* \"contracts/masverse/MasToken.sol\":906:1011  function burn(address account, uint256 amount) public onlyOwner {... */\n    tag_17:\n      tag_51\n      tag_76\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_76:\n      tag_77\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_18:\n      tag_29\n      tag_79\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_79:\n      tag_80\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_19:\n      tag_35\n      tag_83\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_21:\n      tag_51\n      tag_91\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_26:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_94\n      swap1\n      tag_95\n      jump\t// in\n    tag_94:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_96\n      swap1\n      tag_95\n      jump\t// in\n    tag_96:\n      dup1\n      iszero\n      tag_97\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_98\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_97)\n    tag_98:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_99:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_99\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_97:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_32:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_103\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_104\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_103:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_100:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_42:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_108\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_109\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_108:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_110\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_111\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_110:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/masverse/MasToken.sol\":1088:1153  function unpause() public onlyOwner {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_115\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_115:\n        /* \"contracts/masverse/MasToken.sol\":1135:1145  _unpause() */\n      tag_118\n        /* \"contracts/masverse/MasToken.sol\":1135:1143  _unpause */\n      tag_119\n        /* \"contracts/masverse/MasToken.sol\":1135:1145  _unpause() */\n      jump\t// in\n    tag_118:\n        /* \"contracts/masverse/MasToken.sol\":1088:1153  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/masverse/MasToken.sol\":803:898  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_55:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_121\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_121:\n        /* \"contracts/masverse/MasToken.sol\":873:890  _mint(to, amount) */\n      tag_123\n        /* \"contracts/masverse/MasToken.sol\":879:881  to */\n      dup3\n        /* \"contracts/masverse/MasToken.sol\":883:889  amount */\n      dup3\n        /* \"contracts/masverse/MasToken.sol\":873:878  _mint */\n      tag_124\n        /* \"contracts/masverse/MasToken.sol\":873:890  _mint(to, amount) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/masverse/MasToken.sol\":803:898  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_128\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_128:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_131\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"contracts/masverse/MasToken.sol\":1019:1080  function pause() public onlyOwner {... */\n    tag_67:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_133\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_133:\n        /* \"contracts/masverse/MasToken.sol\":1064:1072  _pause() */\n      tag_118\n        /* \"contracts/masverse/MasToken.sol\":1064:1070  _pause */\n      tag_136\n        /* \"contracts/masverse/MasToken.sol\":1064:1072  _pause() */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x05\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_94\n      swap1\n      tag_95\n      jump\t// in\n        /* \"contracts/masverse/MasToken.sol\":906:1011  function burn(address account, uint256 amount) public onlyOwner {... */\n    tag_77:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_145\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_145:\n        /* \"contracts/masverse/MasToken.sol\":981:1003  _burn(account, amount) */\n      tag_123\n        /* \"contracts/masverse/MasToken.sol\":987:994  account */\n      dup3\n        /* \"contracts/masverse/MasToken.sol\":996:1002  amount */\n      dup3\n        /* \"contracts/masverse/MasToken.sol\":981:986  _burn */\n      tag_148\n        /* \"contracts/masverse/MasToken.sol\":981:1003  _burn(account, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_80:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_103\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_111\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_92:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_155\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_155:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_157\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n    tag_158:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_159\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_131\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_159:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_163\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_162:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_170\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3169:3201   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3151:3202   */\n      mstore\n        /* \"#utility.yul\":3218:3236   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3211:3245   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":3261:3279   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":3254:3288   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":3124:3142   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_158\n        /* \"#utility.yul\":2949:3294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_167:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_170\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_163\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_172\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_172:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_174\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_174:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_116:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_118\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2710:2827  function _unpause() internal virtual whenPaused {... */\n    tag_119:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1721:1737  _requirePaused() */\n      tag_185\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1721:1735  _requirePaused */\n      tag_186\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1721:1737  _requirePaused() */\n      jump\t// in\n    tag_185:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2768:2775  _paused */\n      0x06\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2768:2783  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2798:2820  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2807:2819  _msgSender() */\n    tag_188:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2798:2820  Unpaused(_msgSender()) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2255:2287   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2237:2288   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2225:2227   */\n      0x20\n        /* \"#utility.yul\":2210:2228   */\n      add\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2798:2820  Unpaused(_msgSender()) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2710:2827  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_191\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_191:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_123\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_131:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2463:2578  function _pause() internal virtual whenNotPaused {... */\n    tag_136:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      tag_196\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1491  _requireNotPaused */\n      tag_197\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      jump\t// in\n    tag_196:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2522:2529  _paused */\n      0x06\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2522:2536  _paused = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2532:2536  true */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2522:2536  _paused = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2551:2571  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2558:2570  _msgSender() */\n      tag_188\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_148:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_202\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_202:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_123\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_163:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_206\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_206:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_208\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2237:2288   */\n      mstore\n        /* \"#utility.yul\":2210:2228   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      tag_158\n        /* \"#utility.yul\":2091:2294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_208:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_170\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_211\n      swap2\n        /* \"#utility.yul\":1342:1367   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n      swap1\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n    tag_211:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/masverse/MasToken.sol\":1161:1348  function _update(... */\n    tag_177:\n        /* \"contracts/masverse/MasToken.sol\":1310:1340  super._update(from, to, value) */\n      tag_162\n        /* \"contracts/masverse/MasToken.sol\":1324:1328  from */\n      dup4\n        /* \"contracts/masverse/MasToken.sol\":1330:1332  to */\n      dup4\n        /* \"contracts/masverse/MasToken.sol\":1334:1339  value */\n      dup4\n        /* \"contracts/masverse/MasToken.sol\":1310:1323  super._update */\n      tag_214\n        /* \"contracts/masverse/MasToken.sol\":1310:1340  super._update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2202:2328  function _requirePaused() internal view virtual {... */\n    tag_186:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1920:1927  _paused */\n      and(0xff, sload(0x06))\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2260:2322  if (!paused()) {... */\n      tag_118\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2296:2311  ExpectedPause() */\n      mload(0x40)\n      shl(0xe0, 0x8dfc202b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2002:2130  function _requireNotPaused() internal view virtual {... */\n    tag_197:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1920:1927  _paused */\n      and(0xff, sload(0x06))\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2063:2124  if (paused()) {... */\n      iszero\n      tag_118\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2098:2113  EnforcedPause() */\n      mload(0x40)\n      shl(0xe0, 0xd93c0665)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/NewSC/ERC20Capped.sol\":1046:1453  function _update(address from, address to, uint256 value) internal virtual override {... */\n    tag_214:\n        /* \"contracts/NewSC/ERC20Capped.sol\":1141:1171  super._update(from, to, value) */\n      tag_222\n        /* \"contracts/NewSC/ERC20Capped.sol\":1155:1159  from */\n      dup4\n        /* \"contracts/NewSC/ERC20Capped.sol\":1161:1163  to */\n      dup4\n        /* \"contracts/NewSC/ERC20Capped.sol\":1165:1170  value */\n      dup4\n        /* \"contracts/NewSC/ERC20Capped.sol\":1141:1154  super._update */\n      tag_223\n        /* \"contracts/NewSC/ERC20Capped.sol\":1141:1171  super._update(from, to, value) */\n      jump\t// in\n    tag_222:\n        /* \"contracts/NewSC/ERC20Capped.sol\":974:978  _cap */\n      immutable(\"0x8129634de98ff4eac36cfdb2b9e1dc55781fddf4fba9ec16d4ac1f285a99533e\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/NewSC/ERC20Capped.sol\":1222:1240  from == address(0) */\n      dup5\n      and\n      iszero\n        /* \"contracts/NewSC/ERC20Capped.sol\":1222:1258  from == address(0) && maxSupply != 0 */\n      dup1\n      iszero\n      tag_225\n      jumpi\n      pop\n        /* \"contracts/NewSC/ERC20Capped.sol\":1244:1258  maxSupply != 0 */\n      dup1\n      iszero\n      iszero\n        /* \"contracts/NewSC/ERC20Capped.sol\":1222:1258  from == address(0) && maxSupply != 0 */\n    tag_225:\n        /* \"contracts/NewSC/ERC20Capped.sol\":1218:1446  if (from == address(0) && maxSupply != 0) {... */\n      iszero\n      tag_170\n      jumpi\n        /* \"contracts/NewSC/ERC20Capped.sol\":1289:1303  uint256 supply */\n      0x00\n        /* \"contracts/NewSC/ERC20Capped.sol\":1306:1319  totalSupply() */\n      tag_227\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x03)\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      jump\n        /* \"contracts/NewSC/ERC20Capped.sol\":1306:1319  totalSupply() */\n    tag_227:\n        /* \"contracts/NewSC/ERC20Capped.sol\":1289:1319  uint256 supply = totalSupply() */\n      swap1\n      pop\n        /* \"contracts/NewSC/ERC20Capped.sol\":1347:1356  maxSupply */\n      dup2\n        /* \"contracts/NewSC/ERC20Capped.sol\":1338:1344  supply */\n      dup2\n        /* \"contracts/NewSC/ERC20Capped.sol\":1338:1356  supply > maxSupply */\n      gt\n        /* \"contracts/NewSC/ERC20Capped.sol\":1334:1435  if (supply > maxSupply) {... */\n      iszero\n      tag_228\n      jumpi\n        /* \"contracts/NewSC/ERC20Capped.sol\":1384:1419  ERC20ExceededCap(supply, maxSupply) */\n      mload(0x40)\n      shl(0xe2, 0x279e7e15)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":3473:3498   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":3514:3532   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3507:3541   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":3446:3464   */\n      0x44\n      add\n        /* \"contracts/NewSC/ERC20Capped.sol\":1384:1419  ERC20ExceededCap(supply, maxSupply) */\n      tag_158\n        /* \"#utility.yul\":3299:3547   */\n      jump\n        /* \"contracts/NewSC/ERC20Capped.sol\":1334:1435  if (supply > maxSupply) {... */\n    tag_228:\n        /* \"contracts/NewSC/ERC20Capped.sol\":1260:1446  {... */\n      pop\n        /* \"contracts/NewSC/ERC20Capped.sol\":1130:1453  {... */\n      pop\n        /* \"contracts/NewSC/ERC20Capped.sol\":1046:1453  function _update(address from, address to, uint256 value) internal virtual override {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1112:1257  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n    tag_223:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      tag_232\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1491  _requireNotPaused */\n      tag_197\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      jump\t// in\n    tag_232:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1250  super._update(from, to, value) */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1234:1238  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1240:1242  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1244:1249  value */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_237\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x03\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_238\n      swap2\n      swap1\n      tag_239\n      jump\t// in\n    tag_238:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_240\n      swap1\n      pop\n      jump\n    tag_237:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_241\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3169:3201   */\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3151:3202   */\n      mstore\n        /* \"#utility.yul\":3218:3236   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3211:3245   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":3261:3279   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":3254:3288   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":3124:3142   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_158\n        /* \"#utility.yul\":2949:3294   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_240:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_243\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_244)\n    tag_243:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_244:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_245\n      swap2\n        /* \"#utility.yul\":1342:1367   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n      swap1\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n    tag_245:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:562   */\n    tag_28:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      0x20\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_249:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_249)\n    tag_251:\n        /* \"#utility.yul\":298:301   */\n      pop\n        /* \"#utility.yul\":483:484   */\n      0x00\n        /* \"#utility.yul\":478:480   */\n      0x40\n        /* \"#utility.yul\":469:475   */\n      dup3\n        /* \"#utility.yul\":458:467   */\n      dup7\n        /* \"#utility.yul\":454:476   */\n      add\n        /* \"#utility.yul\":450:481   */\n      add\n        /* \"#utility.yul\":443:485   */\n      mstore\n        /* \"#utility.yul\":553:555   */\n      0x40\n        /* \"#utility.yul\":546:548   */\n      0x1f\n        /* \"#utility.yul\":542:549   */\n      not\n        /* \"#utility.yul\":537:539   */\n      0x1f\n        /* \"#utility.yul\":529:535   */\n      dup4\n        /* \"#utility.yul\":525:540   */\n      add\n        /* \"#utility.yul\":521:550   */\n      and\n        /* \"#utility.yul\":510:519   */\n      dup6\n        /* \"#utility.yul\":506:551   */\n      add\n        /* \"#utility.yul\":502:556   */\n      add\n        /* \"#utility.yul\":494:556   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":14:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":567:740   */\n    tag_246:\n        /* \"#utility.yul\":635:655   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":684:715   */\n      dup2\n      and\n        /* \"#utility.yul\":674:716   */\n      dup2\n      eq\n        /* \"#utility.yul\":664:734   */\n      tag_253\n      jumpi\n        /* \"#utility.yul\":730:731   */\n      0x00\n        /* \"#utility.yul\":727:728   */\n      dup1\n        /* \"#utility.yul\":720:732   */\n      revert\n        /* \"#utility.yul\":664:734   */\n    tag_253:\n        /* \"#utility.yul\":567:740   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":745:999   */\n    tag_31:\n        /* \"#utility.yul\":813:819   */\n      0x00\n        /* \"#utility.yul\":821:827   */\n      dup1\n        /* \"#utility.yul\":874:876   */\n      0x40\n        /* \"#utility.yul\":862:871   */\n      dup4\n        /* \"#utility.yul\":853:860   */\n      dup6\n        /* \"#utility.yul\":849:872   */\n      sub\n        /* \"#utility.yul\":845:877   */\n      slt\n        /* \"#utility.yul\":842:894   */\n      iszero\n      tag_255\n      jumpi\n        /* \"#utility.yul\":890:891   */\n      0x00\n        /* \"#utility.yul\":887:888   */\n      dup1\n        /* \"#utility.yul\":880:892   */\n      revert\n        /* \"#utility.yul\":842:894   */\n    tag_255:\n        /* \"#utility.yul\":913:942   */\n      tag_256\n        /* \"#utility.yul\":932:941   */\n      dup4\n        /* \"#utility.yul\":913:942   */\n      tag_246\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":903:942   */\n      swap5\n        /* \"#utility.yul\":989:991   */\n      0x20\n        /* \"#utility.yul\":974:992   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":961:993   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":745:999   */\n      jump\t// out\n        /* \"#utility.yul\":1378:1706   */\n    tag_41:\n        /* \"#utility.yul\":1455:1461   */\n      0x00\n        /* \"#utility.yul\":1463:1469   */\n      dup1\n        /* \"#utility.yul\":1471:1477   */\n      0x00\n        /* \"#utility.yul\":1524:1526   */\n      0x60\n        /* \"#utility.yul\":1512:1521   */\n      dup5\n        /* \"#utility.yul\":1503:1510   */\n      dup7\n        /* \"#utility.yul\":1499:1522   */\n      sub\n        /* \"#utility.yul\":1495:1527   */\n      slt\n        /* \"#utility.yul\":1492:1544   */\n      iszero\n      tag_260\n      jumpi\n        /* \"#utility.yul\":1540:1541   */\n      0x00\n        /* \"#utility.yul\":1537:1538   */\n      dup1\n        /* \"#utility.yul\":1530:1542   */\n      revert\n        /* \"#utility.yul\":1492:1544   */\n    tag_260:\n        /* \"#utility.yul\":1563:1592   */\n      tag_261\n        /* \"#utility.yul\":1582:1591   */\n      dup5\n        /* \"#utility.yul\":1563:1592   */\n      tag_246\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":1553:1592   */\n      swap3\n      pop\n        /* \"#utility.yul\":1611:1649   */\n      tag_262\n        /* \"#utility.yul\":1645:1647   */\n      0x20\n        /* \"#utility.yul\":1634:1643   */\n      dup6\n        /* \"#utility.yul\":1630:1648   */\n      add\n        /* \"#utility.yul\":1611:1649   */\n      tag_246\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":1601:1649   */\n      swap2\n      pop\n        /* \"#utility.yul\":1696:1698   */\n      0x40\n        /* \"#utility.yul\":1685:1694   */\n      dup5\n        /* \"#utility.yul\":1681:1699   */\n      add\n        /* \"#utility.yul\":1668:1700   */\n      calldataload\n        /* \"#utility.yul\":1658:1700   */\n      swap1\n      pop\n        /* \"#utility.yul\":1378:1706   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1900:2086   */\n    tag_61:\n        /* \"#utility.yul\":1959:1965   */\n      0x00\n        /* \"#utility.yul\":2012:2014   */\n      0x20\n        /* \"#utility.yul\":2000:2009   */\n      dup3\n        /* \"#utility.yul\":1991:1998   */\n      dup5\n        /* \"#utility.yul\":1987:2010   */\n      sub\n        /* \"#utility.yul\":1983:2015   */\n      slt\n        /* \"#utility.yul\":1980:2032   */\n      iszero\n      tag_265\n      jumpi\n        /* \"#utility.yul\":2028:2029   */\n      0x00\n        /* \"#utility.yul\":2025:2026   */\n      dup1\n        /* \"#utility.yul\":2018:2030   */\n      revert\n        /* \"#utility.yul\":1980:2032   */\n    tag_265:\n        /* \"#utility.yul\":2051:2080   */\n      tag_266\n        /* \"#utility.yul\":2070:2079   */\n      dup3\n        /* \"#utility.yul\":2051:2080   */\n      tag_246\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":2041:2080   */\n      swap4\n        /* \"#utility.yul\":1900:2086   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2299:2559   */\n    tag_84:\n        /* \"#utility.yul\":2367:2373   */\n      0x00\n        /* \"#utility.yul\":2375:2381   */\n      dup1\n        /* \"#utility.yul\":2428:2430   */\n      0x40\n        /* \"#utility.yul\":2416:2425   */\n      dup4\n        /* \"#utility.yul\":2407:2414   */\n      dup6\n        /* \"#utility.yul\":2403:2426   */\n      sub\n        /* \"#utility.yul\":2399:2431   */\n      slt\n        /* \"#utility.yul\":2396:2448   */\n      iszero\n      tag_269\n      jumpi\n        /* \"#utility.yul\":2444:2445   */\n      0x00\n        /* \"#utility.yul\":2441:2442   */\n      dup1\n        /* \"#utility.yul\":2434:2446   */\n      revert\n        /* \"#utility.yul\":2396:2448   */\n    tag_269:\n        /* \"#utility.yul\":2467:2496   */\n      tag_270\n        /* \"#utility.yul\":2486:2495   */\n      dup4\n        /* \"#utility.yul\":2467:2496   */\n      tag_246\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":2457:2496   */\n      swap2\n      pop\n        /* \"#utility.yul\":2515:2553   */\n      tag_271\n        /* \"#utility.yul\":2549:2551   */\n      0x20\n        /* \"#utility.yul\":2538:2547   */\n      dup5\n        /* \"#utility.yul\":2534:2552   */\n      add\n        /* \"#utility.yul\":2515:2553   */\n      tag_246\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":2505:2553   */\n      swap1\n      pop\n        /* \"#utility.yul\":2299:2559   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2564:2944   */\n    tag_95:\n        /* \"#utility.yul\":2643:2644   */\n      0x01\n        /* \"#utility.yul\":2639:2651   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2686:2698   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2707:2768   */\n      tag_273\n      jumpi\n        /* \"#utility.yul\":2761:2765   */\n      0x7f\n        /* \"#utility.yul\":2753:2759   */\n      dup3\n        /* \"#utility.yul\":2749:2766   */\n      and\n        /* \"#utility.yul\":2739:2766   */\n      swap2\n      pop\n        /* \"#utility.yul\":2707:2768   */\n    tag_273:\n        /* \"#utility.yul\":2814:2816   */\n      0x20\n        /* \"#utility.yul\":2806:2812   */\n      dup3\n        /* \"#utility.yul\":2803:2817   */\n      lt\n        /* \"#utility.yul\":2783:2801   */\n      dup2\n        /* \"#utility.yul\":2780:2818   */\n      sub\n        /* \"#utility.yul\":2777:2938   */\n      tag_274\n      jumpi\n        /* \"#utility.yul\":2860:2870   */\n      0x4e487b71\n        /* \"#utility.yul\":2855:2858   */\n      0xe0\n        /* \"#utility.yul\":2851:2871   */\n      shl\n        /* \"#utility.yul\":2848:2849   */\n      0x00\n        /* \"#utility.yul\":2841:2872   */\n      mstore\n        /* \"#utility.yul\":2895:2899   */\n      0x22\n        /* \"#utility.yul\":2892:2893   */\n      0x04\n        /* \"#utility.yul\":2885:2900   */\n      mstore\n        /* \"#utility.yul\":2923:2927   */\n      0x24\n        /* \"#utility.yul\":2920:2921   */\n      0x00\n        /* \"#utility.yul\":2913:2928   */\n      revert\n        /* \"#utility.yul\":2777:2938   */\n    tag_274:\n      pop\n        /* \"#utility.yul\":2564:2944   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3552:3774   */\n    tag_239:\n        /* \"#utility.yul\":3617:3626   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3638:3648   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3635:3768   */\n      iszero\n      tag_100\n      jumpi\n        /* \"#utility.yul\":3690:3700   */\n      0x4e487b71\n        /* \"#utility.yul\":3685:3688   */\n      0xe0\n        /* \"#utility.yul\":3681:3701   */\n      shl\n        /* \"#utility.yul\":3678:3679   */\n      0x00\n        /* \"#utility.yul\":3671:3702   */\n      mstore\n        /* \"#utility.yul\":3725:3729   */\n      0x11\n        /* \"#utility.yul\":3722:3723   */\n      0x04\n        /* \"#utility.yul\":3715:3730   */\n      mstore\n        /* \"#utility.yul\":3753:3757   */\n      0x24\n        /* \"#utility.yul\":3750:3751   */\n      0x00\n        /* \"#utility.yul\":3743:3758   */\n      revert\n\n    auxdata: 0xa264697066735822122062a7257fd7784ce74b4c50822593c23e469ecd794ff312e75aa1e7b59b76d28764736f6c63430008180033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1001": {
									"entryPoint": null,
									"id": 1001,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_1115": {
									"entryPoint": null,
									"id": 1115,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_1229": {
									"entryPoint": null,
									"id": 1229,
									"parameterSlots": 6,
									"returnSlots": 0
								},
								"@_336": {
									"entryPoint": null,
									"id": 336,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_mint_639": {
									"entryPoint": 305,
									"id": 639,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_requireNotPaused_1038": {
									"entryPoint": 531,
									"id": 1038,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 225,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_1176": {
									"entryPoint": 385,
									"id": 1176,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_1307": {
									"entryPoint": 367,
									"id": 1307,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_606": {
									"entryPoint": 570,
									"id": 606,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_910": {
									"entryPoint": 508,
									"id": 910,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@cap_1124": {
									"entryPoint": null,
									"id": 1124,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@paused_1026": {
									"entryPoint": null,
									"id": 1026,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_372": {
									"entryPoint": null,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 899,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_uint8t_uint256_fromMemory": {
									"entryPoint": 1077,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 6
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1936,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 1283,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 1538,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 1356,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1562,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 1648,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1732,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 1588,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1261,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 877,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:7394:10",
										"nodeType": "YulBlock",
										"src": "0:7394:10",
										"statements": [
											{
												"nativeSrc": "6:3:10",
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "46:95:10",
													"nodeType": "YulBlock",
													"src": "46:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "63:1:10",
																		"nodeType": "YulLiteral",
																		"src": "63:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "70:3:10",
																				"nodeType": "YulLiteral",
																				"src": "70:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "75:10:10",
																				"nodeType": "YulLiteral",
																				"src": "75:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "66:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:10"
																		},
																		"nativeSrc": "66:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "56:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:10"
																},
																"nativeSrc": "56:31:10",
																"nodeType": "YulFunctionCall",
																"src": "56:31:10"
															},
															"nativeSrc": "56:31:10",
															"nodeType": "YulExpressionStatement",
															"src": "56:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "103:1:10",
																		"nodeType": "YulLiteral",
																		"src": "103:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "106:4:10",
																		"nodeType": "YulLiteral",
																		"src": "106:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "96:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:10"
																},
																"nativeSrc": "96:15:10",
																"nodeType": "YulFunctionCall",
																"src": "96:15:10"
															},
															"nativeSrc": "96:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "96:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "127:1:10",
																		"nodeType": "YulLiteral",
																		"src": "127:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "130:4:10",
																		"nodeType": "YulLiteral",
																		"src": "130:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "120:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:10"
																},
																"nativeSrc": "120:15:10",
																"nodeType": "YulFunctionCall",
																"src": "120:15:10"
															},
															"nativeSrc": "120:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "120:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "14:127:10",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:10"
											},
											{
												"body": {
													"nativeSrc": "210:780:10",
													"nodeType": "YulBlock",
													"src": "210:780:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "259:16:10",
																"nodeType": "YulBlock",
																"src": "259:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "268:1:10",
																					"nodeType": "YulLiteral",
																					"src": "268:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "271:1:10",
																					"nodeType": "YulLiteral",
																					"src": "271:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "261:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:10"
																			},
																			"nativeSrc": "261:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:10"
																		},
																		"nativeSrc": "261:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "238:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "246:4:10",
																						"nodeType": "YulLiteral",
																						"src": "246:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "234:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:10"
																				},
																				"nativeSrc": "234:17:10",
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:10"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "253:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "230:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:10"
																		},
																		"nativeSrc": "230:27:10",
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "223:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:10"
																},
																"nativeSrc": "223:35:10",
																"nodeType": "YulFunctionCall",
																"src": "223:35:10"
															},
															"nativeSrc": "220:55:10",
															"nodeType": "YulIf",
															"src": "220:55:10"
														},
														{
															"nativeSrc": "284:23:10",
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "300:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "294:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:10"
																},
																"nativeSrc": "294:13:10",
																"nodeType": "YulFunctionCall",
																"src": "294:13:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "288:2:10",
																	"nodeType": "YulTypedName",
																	"src": "288:2:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "316:28:10",
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "334:2:10",
																				"nodeType": "YulLiteral",
																				"src": "334:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "338:1:10",
																				"nodeType": "YulLiteral",
																				"src": "338:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "330:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:10"
																		},
																		"nativeSrc": "330:10:10",
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "342:1:10",
																		"nodeType": "YulLiteral",
																		"src": "342:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "326:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:10"
																},
																"nativeSrc": "326:18:10",
																"nodeType": "YulFunctionCall",
																"src": "326:18:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nativeSrc": "320:2:10",
																	"nodeType": "YulTypedName",
																	"src": "320:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "367:22:10",
																"nodeType": "YulBlock",
																"src": "367:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "369:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:10"
																			},
																			"nativeSrc": "369:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:10"
																		},
																		"nativeSrc": "369:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "359:2:10",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:10"
																	},
																	{
																		"name": "_2",
																		"nativeSrc": "363:2:10",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "356:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:10"
																},
																"nativeSrc": "356:10:10",
																"nodeType": "YulFunctionCall",
																"src": "356:10:10"
															},
															"nativeSrc": "353:36:10",
															"nodeType": "YulIf",
															"src": "353:36:10"
														},
														{
															"nativeSrc": "398:17:10",
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "412:2:10",
																		"nodeType": "YulLiteral",
																		"src": "412:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "408:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:10"
																},
																"nativeSrc": "408:7:10",
																"nodeType": "YulFunctionCall",
																"src": "408:7:10"
															},
															"variables": [
																{
																	"name": "_3",
																	"nativeSrc": "402:2:10",
																	"nodeType": "YulTypedName",
																	"src": "402:2:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "424:23:10",
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "444:2:10",
																		"nodeType": "YulLiteral",
																		"src": "444:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "438:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:10"
																},
																"nativeSrc": "438:9:10",
																"nodeType": "YulFunctionCall",
																"src": "438:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nativeSrc": "428:6:10",
																	"nodeType": "YulTypedName",
																	"src": "428:6:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "456:71:10",
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "478:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nativeSrc": "502:2:10",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:10"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "506:4:10",
																										"nodeType": "YulLiteral",
																										"src": "506:4:10",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "498:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:10"
																								},
																								"nativeSrc": "498:13:10",
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:10"
																							},
																							{
																								"name": "_3",
																								"nativeSrc": "513:2:10",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:10"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nativeSrc": "494:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:10"
																						},
																						"nativeSrc": "494:22:10",
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "518:2:10",
																						"nodeType": "YulLiteral",
																						"src": "518:2:10",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "490:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:10"
																				},
																				"nativeSrc": "490:31:10",
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:10"
																			},
																			{
																				"name": "_3",
																				"nativeSrc": "523:2:10",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "486:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:10"
																		},
																		"nativeSrc": "486:40:10",
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "474:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:10"
																},
																"nativeSrc": "474:53:10",
																"nodeType": "YulFunctionCall",
																"src": "474:53:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "460:10:10",
																	"nodeType": "YulTypedName",
																	"src": "460:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "586:22:10",
																"nodeType": "YulBlock",
																"src": "586:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "588:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:10"
																			},
																			"nativeSrc": "588:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:10"
																		},
																		"nativeSrc": "588:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "545:10:10",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:10"
																			},
																			{
																				"name": "_2",
																				"nativeSrc": "557:2:10",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "542:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:10"
																		},
																		"nativeSrc": "542:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "565:10:10",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "577:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "562:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:10"
																		},
																		"nativeSrc": "562:22:10",
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "539:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:10"
																},
																"nativeSrc": "539:46:10",
																"nodeType": "YulFunctionCall",
																"src": "539:46:10"
															},
															"nativeSrc": "536:72:10",
															"nodeType": "YulIf",
															"src": "536:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "624:2:10",
																		"nodeType": "YulLiteral",
																		"src": "624:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "628:10:10",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "617:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:10"
																},
																"nativeSrc": "617:22:10",
																"nodeType": "YulFunctionCall",
																"src": "617:22:10"
															},
															"nativeSrc": "617:22:10",
															"nodeType": "YulExpressionStatement",
															"src": "617:22:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "655:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:10"
																	},
																	{
																		"name": "_1",
																		"nativeSrc": "663:2:10",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "648:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:10"
																},
																"nativeSrc": "648:18:10",
																"nodeType": "YulFunctionCall",
																"src": "648:18:10"
															},
															"nativeSrc": "648:18:10",
															"nodeType": "YulExpressionStatement",
															"src": "648:18:10"
														},
														{
															"nativeSrc": "675:14:10",
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:10",
															"value": {
																"kind": "number",
																"nativeSrc": "685:4:10",
																"nodeType": "YulLiteral",
																"src": "685:4:10",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nativeSrc": "679:2:10",
																	"nodeType": "YulTypedName",
																	"src": "679:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "737:16:10",
																"nodeType": "YulBlock",
																"src": "737:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "746:1:10",
																					"nodeType": "YulLiteral",
																					"src": "746:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "749:1:10",
																					"nodeType": "YulLiteral",
																					"src": "749:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "739:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "739:6:10"
																			},
																			"nativeSrc": "739:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "739:12:10"
																		},
																		"nativeSrc": "739:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "739:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "712:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:10"
																					},
																					{
																						"name": "_1",
																						"nativeSrc": "720:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "708:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:10"
																				},
																				"nativeSrc": "708:15:10",
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "725:4:10",
																				"nodeType": "YulLiteral",
																				"src": "725:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "704:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:10"
																		},
																		"nativeSrc": "704:26:10",
																		"nodeType": "YulFunctionCall",
																		"src": "704:26:10"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "732:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "732:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "701:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:10"
																},
																"nativeSrc": "701:35:10",
																"nodeType": "YulFunctionCall",
																"src": "701:35:10"
															},
															"nativeSrc": "698:55:10",
															"nodeType": "YulIf",
															"src": "698:55:10"
														},
														{
															"nativeSrc": "762:10:10",
															"nodeType": "YulVariableDeclaration",
															"src": "762:10:10",
															"value": {
																"kind": "number",
																"nativeSrc": "771:1:10",
																"nodeType": "YulLiteral",
																"src": "771:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "766:1:10",
																	"nodeType": "YulTypedName",
																	"src": "766:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "827:87:10",
																"nodeType": "YulBlock",
																"src": "827:87:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nativeSrc": "856:6:10",
																									"nodeType": "YulIdentifier",
																									"src": "856:6:10"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "864:1:10",
																									"nodeType": "YulIdentifier",
																									"src": "864:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "852:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "852:3:10"
																							},
																							"nativeSrc": "852:14:10",
																							"nodeType": "YulFunctionCall",
																							"src": "852:14:10"
																						},
																						{
																							"name": "_4",
																							"nativeSrc": "868:2:10",
																							"nodeType": "YulIdentifier",
																							"src": "868:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "848:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "848:3:10"
																					},
																					"nativeSrc": "848:23:10",
																					"nodeType": "YulFunctionCall",
																					"src": "848:23:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nativeSrc": "887:6:10",
																											"nodeType": "YulIdentifier",
																											"src": "887:6:10"
																										},
																										{
																											"name": "i",
																											"nativeSrc": "895:1:10",
																											"nodeType": "YulIdentifier",
																											"src": "895:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nativeSrc": "883:3:10",
																										"nodeType": "YulIdentifier",
																										"src": "883:3:10"
																									},
																									"nativeSrc": "883:14:10",
																									"nodeType": "YulFunctionCall",
																									"src": "883:14:10"
																								},
																								{
																									"name": "_4",
																									"nativeSrc": "899:2:10",
																									"nodeType": "YulIdentifier",
																									"src": "899:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "879:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "879:3:10"
																							},
																							"nativeSrc": "879:23:10",
																							"nodeType": "YulFunctionCall",
																							"src": "879:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "873:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "873:5:10"
																					},
																					"nativeSrc": "873:30:10",
																					"nodeType": "YulFunctionCall",
																					"src": "873:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "841:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "841:6:10"
																			},
																			"nativeSrc": "841:63:10",
																			"nodeType": "YulFunctionCall",
																			"src": "841:63:10"
																		},
																		"nativeSrc": "841:63:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "841:63:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "792:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "792:1:10"
																	},
																	{
																		"name": "_1",
																		"nativeSrc": "795:2:10",
																		"nodeType": "YulIdentifier",
																		"src": "795:2:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "789:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "789:2:10"
																},
																"nativeSrc": "789:9:10",
																"nodeType": "YulFunctionCall",
																"src": "789:9:10"
															},
															"nativeSrc": "781:133:10",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "799:19:10",
																"nodeType": "YulBlock",
																"src": "799:19:10",
																"statements": [
																	{
																		"nativeSrc": "801:15:10",
																		"nodeType": "YulAssignment",
																		"src": "801:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "810:1:10",
																					"nodeType": "YulIdentifier",
																					"src": "810:1:10"
																				},
																				{
																					"name": "_4",
																					"nativeSrc": "813:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "813:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "806:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "806:3:10"
																			},
																			"nativeSrc": "806:10:10",
																			"nodeType": "YulFunctionCall",
																			"src": "806:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "801:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "801:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "785:3:10",
																"nodeType": "YulBlock",
																"src": "785:3:10",
																"statements": []
															},
															"src": "781:133:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nativeSrc": "938:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "938:6:10"
																					},
																					{
																						"name": "_1",
																						"nativeSrc": "946:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "946:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "934:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "934:3:10"
																				},
																				"nativeSrc": "934:15:10",
																				"nodeType": "YulFunctionCall",
																				"src": "934:15:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "951:4:10",
																				"nodeType": "YulLiteral",
																				"src": "951:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "930:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "930:3:10"
																		},
																		"nativeSrc": "930:26:10",
																		"nodeType": "YulFunctionCall",
																		"src": "930:26:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "958:1:10",
																		"nodeType": "YulLiteral",
																		"src": "958:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "923:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "923:6:10"
																},
																"nativeSrc": "923:37:10",
																"nodeType": "YulFunctionCall",
																"src": "923:37:10"
															},
															"nativeSrc": "923:37:10",
															"nodeType": "YulExpressionStatement",
															"src": "923:37:10"
														},
														{
															"nativeSrc": "969:15:10",
															"nodeType": "YulAssignment",
															"src": "969:15:10",
															"value": {
																"name": "memPtr",
																"nativeSrc": "978:6:10",
																"nodeType": "YulIdentifier",
																"src": "978:6:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "969:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "969:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nativeSrc": "146:844:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "184:6:10",
														"nodeType": "YulTypedName",
														"src": "184:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "192:3:10",
														"nodeType": "YulTypedName",
														"src": "192:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "200:5:10",
														"nodeType": "YulTypedName",
														"src": "200:5:10",
														"type": ""
													}
												],
												"src": "146:844:10"
											},
											{
												"body": {
													"nativeSrc": "1179:828:10",
													"nodeType": "YulBlock",
													"src": "1179:828:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "1226:16:10",
																"nodeType": "YulBlock",
																"src": "1226:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1235:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1235:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1238:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1238:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1228:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1228:6:10"
																			},
																			"nativeSrc": "1228:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1228:12:10"
																		},
																		"nativeSrc": "1228:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1228:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1200:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "1200:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1209:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1209:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1196:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1196:3:10"
																		},
																		"nativeSrc": "1196:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1196:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1221:3:10",
																		"nodeType": "YulLiteral",
																		"src": "1221:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1192:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1192:3:10"
																},
																"nativeSrc": "1192:33:10",
																"nodeType": "YulFunctionCall",
																"src": "1192:33:10"
															},
															"nativeSrc": "1189:53:10",
															"nodeType": "YulIf",
															"src": "1189:53:10"
														},
														{
															"nativeSrc": "1251:29:10",
															"nodeType": "YulVariableDeclaration",
															"src": "1251:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1270:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1270:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1264:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1264:5:10"
																},
																"nativeSrc": "1264:16:10",
																"nodeType": "YulFunctionCall",
																"src": "1264:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1255:5:10",
																	"nodeType": "YulTypedName",
																	"src": "1255:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1343:16:10",
																"nodeType": "YulBlock",
																"src": "1343:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1352:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1352:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1355:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1355:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1345:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1345:6:10"
																			},
																			"nativeSrc": "1345:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1345:12:10"
																		},
																		"nativeSrc": "1345:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1345:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1302:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "1302:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1313:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "1313:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1328:3:10",
																										"nodeType": "YulLiteral",
																										"src": "1328:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "1333:1:10",
																										"nodeType": "YulLiteral",
																										"src": "1333:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1324:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "1324:3:10"
																								},
																								"nativeSrc": "1324:11:10",
																								"nodeType": "YulFunctionCall",
																								"src": "1324:11:10"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1337:1:10",
																								"nodeType": "YulLiteral",
																								"src": "1337:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "1320:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "1320:3:10"
																						},
																						"nativeSrc": "1320:19:10",
																						"nodeType": "YulFunctionCall",
																						"src": "1320:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "1309:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "1309:3:10"
																				},
																				"nativeSrc": "1309:31:10",
																				"nodeType": "YulFunctionCall",
																				"src": "1309:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1299:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "1299:2:10"
																		},
																		"nativeSrc": "1299:42:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1299:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1292:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1292:6:10"
																},
																"nativeSrc": "1292:50:10",
																"nodeType": "YulFunctionCall",
																"src": "1292:50:10"
															},
															"nativeSrc": "1289:70:10",
															"nodeType": "YulIf",
															"src": "1289:70:10"
														},
														{
															"nativeSrc": "1368:15:10",
															"nodeType": "YulAssignment",
															"src": "1368:15:10",
															"value": {
																"name": "value",
																"nativeSrc": "1378:5:10",
																"nodeType": "YulIdentifier",
																"src": "1378:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1368:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1368:6:10"
																}
															]
														},
														{
															"nativeSrc": "1392:35:10",
															"nodeType": "YulAssignment",
															"src": "1392:35:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1412:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1412:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1423:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1423:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1408:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1408:3:10"
																		},
																		"nativeSrc": "1408:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1408:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1402:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1402:5:10"
																},
																"nativeSrc": "1402:25:10",
																"nodeType": "YulFunctionCall",
																"src": "1402:25:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1392:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1392:6:10"
																}
															]
														},
														{
															"nativeSrc": "1436:39:10",
															"nodeType": "YulVariableDeclaration",
															"src": "1436:39:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1460:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1460:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1471:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1471:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1456:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1456:3:10"
																		},
																		"nativeSrc": "1456:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1456:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1450:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1450:5:10"
																},
																"nativeSrc": "1450:25:10",
																"nodeType": "YulFunctionCall",
																"src": "1450:25:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "1440:6:10",
																	"nodeType": "YulTypedName",
																	"src": "1440:6:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1484:28:10",
															"nodeType": "YulVariableDeclaration",
															"src": "1484:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1502:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1502:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1506:1:10",
																				"nodeType": "YulLiteral",
																				"src": "1506:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1498:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1498:3:10"
																		},
																		"nativeSrc": "1498:10:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1498:10:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1510:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1510:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "1494:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1494:3:10"
																},
																"nativeSrc": "1494:18:10",
																"nodeType": "YulFunctionCall",
																"src": "1494:18:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "1488:2:10",
																	"nodeType": "YulTypedName",
																	"src": "1488:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1539:16:10",
																"nodeType": "YulBlock",
																"src": "1539:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1548:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1548:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1551:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1551:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1541:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1541:6:10"
																			},
																			"nativeSrc": "1541:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1541:12:10"
																		},
																		"nativeSrc": "1541:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1541:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1527:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "1527:6:10"
																	},
																	{
																		"name": "_1",
																		"nativeSrc": "1535:2:10",
																		"nodeType": "YulIdentifier",
																		"src": "1535:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1524:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "1524:2:10"
																},
																"nativeSrc": "1524:14:10",
																"nodeType": "YulFunctionCall",
																"src": "1524:14:10"
															},
															"nativeSrc": "1521:34:10",
															"nodeType": "YulIf",
															"src": "1521:34:10"
														},
														{
															"nativeSrc": "1564:71:10",
															"nodeType": "YulAssignment",
															"src": "1564:71:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1607:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1607:9:10"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "1618:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1618:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1603:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1603:3:10"
																		},
																		"nativeSrc": "1603:22:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1603:22:10"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "1627:7:10",
																		"nodeType": "YulIdentifier",
																		"src": "1627:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nativeSrc": "1574:28:10",
																	"nodeType": "YulIdentifier",
																	"src": "1574:28:10"
																},
																"nativeSrc": "1574:61:10",
																"nodeType": "YulFunctionCall",
																"src": "1574:61:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1564:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1564:6:10"
																}
															]
														},
														{
															"nativeSrc": "1644:41:10",
															"nodeType": "YulVariableDeclaration",
															"src": "1644:41:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1670:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1670:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1681:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1681:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1666:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1666:3:10"
																		},
																		"nativeSrc": "1666:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1666:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1660:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1660:5:10"
																},
																"nativeSrc": "1660:25:10",
																"nodeType": "YulFunctionCall",
																"src": "1660:25:10"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nativeSrc": "1648:8:10",
																	"nodeType": "YulTypedName",
																	"src": "1648:8:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1714:16:10",
																"nodeType": "YulBlock",
																"src": "1714:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1723:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1723:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1726:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1726:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1716:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1716:6:10"
																			},
																			"nativeSrc": "1716:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1716:12:10"
																		},
																		"nativeSrc": "1716:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1716:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nativeSrc": "1700:8:10",
																		"nodeType": "YulIdentifier",
																		"src": "1700:8:10"
																	},
																	{
																		"name": "_1",
																		"nativeSrc": "1710:2:10",
																		"nodeType": "YulIdentifier",
																		"src": "1710:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1697:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "1697:2:10"
																},
																"nativeSrc": "1697:16:10",
																"nodeType": "YulFunctionCall",
																"src": "1697:16:10"
															},
															"nativeSrc": "1694:36:10",
															"nodeType": "YulIf",
															"src": "1694:36:10"
														},
														{
															"nativeSrc": "1739:73:10",
															"nodeType": "YulAssignment",
															"src": "1739:73:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1782:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1782:9:10"
																			},
																			{
																				"name": "offset_1",
																				"nativeSrc": "1793:8:10",
																				"nodeType": "YulIdentifier",
																				"src": "1793:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1778:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1778:3:10"
																		},
																		"nativeSrc": "1778:24:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1778:24:10"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "1804:7:10",
																		"nodeType": "YulIdentifier",
																		"src": "1804:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nativeSrc": "1749:28:10",
																	"nodeType": "YulIdentifier",
																	"src": "1749:28:10"
																},
																"nativeSrc": "1749:63:10",
																"nodeType": "YulFunctionCall",
																"src": "1749:63:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "1739:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1739:6:10"
																}
															]
														},
														{
															"nativeSrc": "1821:41:10",
															"nodeType": "YulVariableDeclaration",
															"src": "1821:41:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1846:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1846:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1857:3:10",
																				"nodeType": "YulLiteral",
																				"src": "1857:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1842:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1842:3:10"
																		},
																		"nativeSrc": "1842:19:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1842:19:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1836:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1836:5:10"
																},
																"nativeSrc": "1836:26:10",
																"nodeType": "YulFunctionCall",
																"src": "1836:26:10"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "1825:7:10",
																	"nodeType": "YulTypedName",
																	"src": "1825:7:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1914:16:10",
																"nodeType": "YulBlock",
																"src": "1914:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1923:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1923:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1926:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1926:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1916:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1916:6:10"
																			},
																			"nativeSrc": "1916:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1916:12:10"
																		},
																		"nativeSrc": "1916:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1916:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_1",
																				"nativeSrc": "1884:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "1884:7:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_1",
																						"nativeSrc": "1897:7:10",
																						"nodeType": "YulIdentifier",
																						"src": "1897:7:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1906:4:10",
																						"nodeType": "YulLiteral",
																						"src": "1906:4:10",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "1893:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "1893:3:10"
																				},
																				"nativeSrc": "1893:18:10",
																				"nodeType": "YulFunctionCall",
																				"src": "1893:18:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1881:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "1881:2:10"
																		},
																		"nativeSrc": "1881:31:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1881:31:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1874:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1874:6:10"
																},
																"nativeSrc": "1874:39:10",
																"nodeType": "YulFunctionCall",
																"src": "1874:39:10"
															},
															"nativeSrc": "1871:59:10",
															"nodeType": "YulIf",
															"src": "1871:59:10"
														},
														{
															"nativeSrc": "1939:17:10",
															"nodeType": "YulAssignment",
															"src": "1939:17:10",
															"value": {
																"name": "value_1",
																"nativeSrc": "1949:7:10",
																"nodeType": "YulIdentifier",
																"src": "1949:7:10"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "1939:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1939:6:10"
																}
															]
														},
														{
															"nativeSrc": "1965:36:10",
															"nodeType": "YulAssignment",
															"src": "1965:36:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1985:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1985:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1996:3:10",
																				"nodeType": "YulLiteral",
																				"src": "1996:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1981:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1981:3:10"
																		},
																		"nativeSrc": "1981:19:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1981:19:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1975:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1975:5:10"
																},
																"nativeSrc": "1975:26:10",
																"nodeType": "YulFunctionCall",
																"src": "1975:26:10"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nativeSrc": "1965:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1965:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_uint8t_uint256_fromMemory",
												"nativeSrc": "995:1012:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1105:9:10",
														"nodeType": "YulTypedName",
														"src": "1105:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1116:7:10",
														"nodeType": "YulTypedName",
														"src": "1116:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1128:6:10",
														"nodeType": "YulTypedName",
														"src": "1128:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1136:6:10",
														"nodeType": "YulTypedName",
														"src": "1136:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1144:6:10",
														"nodeType": "YulTypedName",
														"src": "1144:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "1152:6:10",
														"nodeType": "YulTypedName",
														"src": "1152:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "1160:6:10",
														"nodeType": "YulTypedName",
														"src": "1160:6:10",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "1168:6:10",
														"nodeType": "YulTypedName",
														"src": "1168:6:10",
														"type": ""
													}
												],
												"src": "995:1012:10"
											},
											{
												"body": {
													"nativeSrc": "2044:95:10",
													"nodeType": "YulBlock",
													"src": "2044:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2061:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2061:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2068:3:10",
																				"nodeType": "YulLiteral",
																				"src": "2068:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2073:10:10",
																				"nodeType": "YulLiteral",
																				"src": "2073:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "2064:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2064:3:10"
																		},
																		"nativeSrc": "2064:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2064:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2054:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2054:6:10"
																},
																"nativeSrc": "2054:31:10",
																"nodeType": "YulFunctionCall",
																"src": "2054:31:10"
															},
															"nativeSrc": "2054:31:10",
															"nodeType": "YulExpressionStatement",
															"src": "2054:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2101:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2101:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2104:4:10",
																		"nodeType": "YulLiteral",
																		"src": "2104:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2094:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2094:6:10"
																},
																"nativeSrc": "2094:15:10",
																"nodeType": "YulFunctionCall",
																"src": "2094:15:10"
															},
															"nativeSrc": "2094:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "2094:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2125:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2125:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2128:4:10",
																		"nodeType": "YulLiteral",
																		"src": "2128:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2118:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2118:6:10"
																},
																"nativeSrc": "2118:15:10",
																"nodeType": "YulFunctionCall",
																"src": "2118:15:10"
															},
															"nativeSrc": "2118:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "2118:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "2012:127:10",
												"nodeType": "YulFunctionDefinition",
												"src": "2012:127:10"
											},
											{
												"body": {
													"nativeSrc": "2208:352:10",
													"nodeType": "YulBlock",
													"src": "2208:352:10",
													"statements": [
														{
															"nativeSrc": "2218:16:10",
															"nodeType": "YulVariableDeclaration",
															"src": "2218:16:10",
															"value": {
																"kind": "number",
																"nativeSrc": "2233:1:10",
																"nodeType": "YulLiteral",
																"src": "2233:1:10",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "2222:7:10",
																	"nodeType": "YulTypedName",
																	"src": "2222:7:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2243:10:10",
															"nodeType": "YulAssignment",
															"src": "2243:10:10",
															"value": {
																"kind": "number",
																"nativeSrc": "2252:1:10",
																"nodeType": "YulLiteral",
																"src": "2252:1:10",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "2243:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "2243:5:10"
																}
															]
														},
														{
															"nativeSrc": "2262:13:10",
															"nodeType": "YulAssignment",
															"src": "2262:13:10",
															"value": {
																"name": "_base",
																"nativeSrc": "2270:5:10",
																"nodeType": "YulIdentifier",
																"src": "2270:5:10"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "2262:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "2262:4:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2326:228:10",
																"nodeType": "YulBlock",
																"src": "2326:228:10",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "2371:22:10",
																			"nodeType": "YulBlock",
																			"src": "2371:22:10",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "2373:16:10",
																							"nodeType": "YulIdentifier",
																							"src": "2373:16:10"
																						},
																						"nativeSrc": "2373:18:10",
																						"nodeType": "YulFunctionCall",
																						"src": "2373:18:10"
																					},
																					"nativeSrc": "2373:18:10",
																					"nodeType": "YulExpressionStatement",
																					"src": "2373:18:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "2346:4:10",
																					"nodeType": "YulIdentifier",
																					"src": "2346:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "2360:1:10",
																									"nodeType": "YulLiteral",
																									"src": "2360:1:10",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "2356:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "2356:3:10"
																							},
																							"nativeSrc": "2356:6:10",
																							"nodeType": "YulFunctionCall",
																							"src": "2356:6:10"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "2364:4:10",
																							"nodeType": "YulIdentifier",
																							"src": "2364:4:10"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "2352:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "2352:3:10"
																					},
																					"nativeSrc": "2352:17:10",
																					"nodeType": "YulFunctionCall",
																					"src": "2352:17:10"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "2343:2:10",
																				"nodeType": "YulIdentifier",
																				"src": "2343:2:10"
																			},
																			"nativeSrc": "2343:27:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2343:27:10"
																		},
																		"nativeSrc": "2340:53:10",
																		"nodeType": "YulIf",
																		"src": "2340:53:10"
																	},
																	{
																		"body": {
																			"nativeSrc": "2432:29:10",
																			"nodeType": "YulBlock",
																			"src": "2432:29:10",
																			"statements": [
																				{
																					"nativeSrc": "2434:25:10",
																					"nodeType": "YulAssignment",
																					"src": "2434:25:10",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "2447:5:10",
																								"nodeType": "YulIdentifier",
																								"src": "2447:5:10"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "2454:4:10",
																								"nodeType": "YulIdentifier",
																								"src": "2454:4:10"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "2443:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "2443:3:10"
																						},
																						"nativeSrc": "2443:16:10",
																						"nodeType": "YulFunctionCall",
																						"src": "2443:16:10"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "2434:5:10",
																							"nodeType": "YulIdentifier",
																							"src": "2434:5:10"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "2413:8:10",
																					"nodeType": "YulIdentifier",
																					"src": "2413:8:10"
																				},
																				{
																					"name": "power_1",
																					"nativeSrc": "2423:7:10",
																					"nodeType": "YulIdentifier",
																					"src": "2423:7:10"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "2409:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2409:3:10"
																			},
																			"nativeSrc": "2409:22:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2409:22:10"
																		},
																		"nativeSrc": "2406:55:10",
																		"nodeType": "YulIf",
																		"src": "2406:55:10"
																	},
																	{
																		"nativeSrc": "2474:23:10",
																		"nodeType": "YulAssignment",
																		"src": "2474:23:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "2486:4:10",
																					"nodeType": "YulIdentifier",
																					"src": "2486:4:10"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "2492:4:10",
																					"nodeType": "YulIdentifier",
																					"src": "2492:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "2482:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2482:3:10"
																			},
																			"nativeSrc": "2482:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2482:15:10"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "2474:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "2474:4:10"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2510:34:10",
																		"nodeType": "YulAssignment",
																		"src": "2510:34:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nativeSrc": "2526:7:10",
																					"nodeType": "YulIdentifier",
																					"src": "2526:7:10"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "2535:8:10",
																					"nodeType": "YulIdentifier",
																					"src": "2535:8:10"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "2522:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2522:3:10"
																			},
																			"nativeSrc": "2522:22:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2522:22:10"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "2510:8:10",
																				"nodeType": "YulIdentifier",
																				"src": "2510:8:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "2295:8:10",
																		"nodeType": "YulIdentifier",
																		"src": "2295:8:10"
																	},
																	{
																		"name": "power_1",
																		"nativeSrc": "2305:7:10",
																		"nodeType": "YulIdentifier",
																		"src": "2305:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2292:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "2292:2:10"
																},
																"nativeSrc": "2292:21:10",
																"nodeType": "YulFunctionCall",
																"src": "2292:21:10"
															},
															"nativeSrc": "2284:270:10",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "2314:3:10",
																"nodeType": "YulBlock",
																"src": "2314:3:10",
																"statements": []
															},
															"pre": {
																"nativeSrc": "2288:3:10",
																"nodeType": "YulBlock",
																"src": "2288:3:10",
																"statements": []
															},
															"src": "2284:270:10"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "2144:416:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "2172:5:10",
														"nodeType": "YulTypedName",
														"src": "2172:5:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "2179:8:10",
														"nodeType": "YulTypedName",
														"src": "2179:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "2192:5:10",
														"nodeType": "YulTypedName",
														"src": "2192:5:10",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "2199:4:10",
														"nodeType": "YulTypedName",
														"src": "2199:4:10",
														"type": ""
													}
												],
												"src": "2144:416:10"
											},
											{
												"body": {
													"nativeSrc": "2624:747:10",
													"nodeType": "YulBlock",
													"src": "2624:747:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "2662:52:10",
																"nodeType": "YulBlock",
																"src": "2662:52:10",
																"statements": [
																	{
																		"nativeSrc": "2676:10:10",
																		"nodeType": "YulAssignment",
																		"src": "2676:10:10",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "2685:1:10",
																			"nodeType": "YulLiteral",
																			"src": "2685:1:10",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "2676:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "2676:5:10"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2699:5:10",
																		"nodeType": "YulLeave",
																		"src": "2699:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "2644:8:10",
																		"nodeType": "YulIdentifier",
																		"src": "2644:8:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2637:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2637:6:10"
																},
																"nativeSrc": "2637:16:10",
																"nodeType": "YulFunctionCall",
																"src": "2637:16:10"
															},
															"nativeSrc": "2634:80:10",
															"nodeType": "YulIf",
															"src": "2634:80:10"
														},
														{
															"body": {
																"nativeSrc": "2747:52:10",
																"nodeType": "YulBlock",
																"src": "2747:52:10",
																"statements": [
																	{
																		"nativeSrc": "2761:10:10",
																		"nodeType": "YulAssignment",
																		"src": "2761:10:10",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "2770:1:10",
																			"nodeType": "YulLiteral",
																			"src": "2770:1:10",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "2761:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "2761:5:10"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2784:5:10",
																		"nodeType": "YulLeave",
																		"src": "2784:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "2733:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "2733:4:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2726:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2726:6:10"
																},
																"nativeSrc": "2726:12:10",
																"nodeType": "YulFunctionCall",
																"src": "2726:12:10"
															},
															"nativeSrc": "2723:76:10",
															"nodeType": "YulIf",
															"src": "2723:76:10"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "2835:52:10",
																		"nodeType": "YulBlock",
																		"src": "2835:52:10",
																		"statements": [
																			{
																				"nativeSrc": "2849:10:10",
																				"nodeType": "YulAssignment",
																				"src": "2849:10:10",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2858:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2858:1:10",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "2849:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "2849:5:10"
																					}
																				]
																			},
																			{
																				"nativeSrc": "2872:5:10",
																				"nodeType": "YulLeave",
																				"src": "2872:5:10"
																			}
																		]
																	},
																	"nativeSrc": "2828:59:10",
																	"nodeType": "YulCase",
																	"src": "2828:59:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2833:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2833:1:10",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "2903:123:10",
																		"nodeType": "YulBlock",
																		"src": "2903:123:10",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "2938:22:10",
																					"nodeType": "YulBlock",
																					"src": "2938:22:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "2940:16:10",
																									"nodeType": "YulIdentifier",
																									"src": "2940:16:10"
																								},
																								"nativeSrc": "2940:18:10",
																								"nodeType": "YulFunctionCall",
																								"src": "2940:18:10"
																							},
																							"nativeSrc": "2940:18:10",
																							"nodeType": "YulExpressionStatement",
																							"src": "2940:18:10"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "2923:8:10",
																							"nodeType": "YulIdentifier",
																							"src": "2923:8:10"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2933:3:10",
																							"nodeType": "YulLiteral",
																							"src": "2933:3:10",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "2920:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "2920:2:10"
																					},
																					"nativeSrc": "2920:17:10",
																					"nodeType": "YulFunctionCall",
																					"src": "2920:17:10"
																				},
																				"nativeSrc": "2917:43:10",
																				"nodeType": "YulIf",
																				"src": "2917:43:10"
																			},
																			{
																				"nativeSrc": "2973:25:10",
																				"nodeType": "YulAssignment",
																				"src": "2973:25:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "2986:8:10",
																							"nodeType": "YulIdentifier",
																							"src": "2986:8:10"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2996:1:10",
																							"nodeType": "YulLiteral",
																							"src": "2996:1:10",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "2982:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "2982:3:10"
																					},
																					"nativeSrc": "2982:16:10",
																					"nodeType": "YulFunctionCall",
																					"src": "2982:16:10"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "2973:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "2973:5:10"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3011:5:10",
																				"nodeType": "YulLeave",
																				"src": "3011:5:10"
																			}
																		]
																	},
																	"nativeSrc": "2896:130:10",
																	"nodeType": "YulCase",
																	"src": "2896:130:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2901:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2901:1:10",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "2815:4:10",
																"nodeType": "YulIdentifier",
																"src": "2815:4:10"
															},
															"nativeSrc": "2808:218:10",
															"nodeType": "YulSwitch",
															"src": "2808:218:10"
														},
														{
															"body": {
																"nativeSrc": "3124:70:10",
																"nodeType": "YulBlock",
																"src": "3124:70:10",
																"statements": [
																	{
																		"nativeSrc": "3138:28:10",
																		"nodeType": "YulAssignment",
																		"src": "3138:28:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3151:4:10",
																					"nodeType": "YulIdentifier",
																					"src": "3151:4:10"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "3157:8:10",
																					"nodeType": "YulIdentifier",
																					"src": "3157:8:10"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "3147:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "3147:3:10"
																			},
																			"nativeSrc": "3147:19:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3147:19:10"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3138:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "3138:5:10"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3179:5:10",
																		"nodeType": "YulLeave",
																		"src": "3179:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "3048:4:10",
																						"nodeType": "YulIdentifier",
																						"src": "3048:4:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3054:2:10",
																						"nodeType": "YulLiteral",
																						"src": "3054:2:10",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3045:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "3045:2:10"
																				},
																				"nativeSrc": "3045:12:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3045:12:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "3062:8:10",
																						"nodeType": "YulIdentifier",
																						"src": "3062:8:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3072:2:10",
																						"nodeType": "YulLiteral",
																						"src": "3072:2:10",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3059:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "3059:2:10"
																				},
																				"nativeSrc": "3059:16:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3059:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3041:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3041:3:10"
																		},
																		"nativeSrc": "3041:35:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3041:35:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "3085:4:10",
																						"nodeType": "YulIdentifier",
																						"src": "3085:4:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3091:3:10",
																						"nodeType": "YulLiteral",
																						"src": "3091:3:10",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3082:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "3082:2:10"
																				},
																				"nativeSrc": "3082:13:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3082:13:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "3100:8:10",
																						"nodeType": "YulIdentifier",
																						"src": "3100:8:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3110:2:10",
																						"nodeType": "YulLiteral",
																						"src": "3110:2:10",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3097:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "3097:2:10"
																				},
																				"nativeSrc": "3097:16:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3097:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3078:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3078:3:10"
																		},
																		"nativeSrc": "3078:36:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3078:36:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "3038:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "3038:2:10"
																},
																"nativeSrc": "3038:77:10",
																"nodeType": "YulFunctionCall",
																"src": "3038:77:10"
															},
															"nativeSrc": "3035:159:10",
															"nodeType": "YulIf",
															"src": "3035:159:10"
														},
														{
															"nativeSrc": "3203:57:10",
															"nodeType": "YulVariableDeclaration",
															"src": "3203:57:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3245:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "3245:4:10"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "3251:8:10",
																		"nodeType": "YulIdentifier",
																		"src": "3251:8:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "3226:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "3226:18:10"
																},
																"nativeSrc": "3226:34:10",
																"nodeType": "YulFunctionCall",
																"src": "3226:34:10"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "3207:7:10",
																	"nodeType": "YulTypedName",
																	"src": "3207:7:10",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "3216:6:10",
																	"nodeType": "YulTypedName",
																	"src": "3216:6:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3305:22:10",
																"nodeType": "YulBlock",
																"src": "3305:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3307:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "3307:16:10"
																			},
																			"nativeSrc": "3307:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3307:18:10"
																		},
																		"nativeSrc": "3307:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3307:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "3275:7:10",
																		"nodeType": "YulIdentifier",
																		"src": "3275:7:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "3292:1:10",
																						"nodeType": "YulLiteral",
																						"src": "3292:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "3288:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3288:3:10"
																				},
																				"nativeSrc": "3288:6:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3288:6:10"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "3296:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3296:6:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "3284:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3284:3:10"
																		},
																		"nativeSrc": "3284:19:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3284:19:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3272:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "3272:2:10"
																},
																"nativeSrc": "3272:32:10",
																"nodeType": "YulFunctionCall",
																"src": "3272:32:10"
															},
															"nativeSrc": "3269:58:10",
															"nodeType": "YulIf",
															"src": "3269:58:10"
														},
														{
															"nativeSrc": "3336:29:10",
															"nodeType": "YulAssignment",
															"src": "3336:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "3349:7:10",
																		"nodeType": "YulIdentifier",
																		"src": "3349:7:10"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "3358:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3358:6:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "3345:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3345:3:10"
																},
																"nativeSrc": "3345:20:10",
																"nodeType": "YulFunctionCall",
																"src": "3345:20:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3336:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "3336:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "2565:806:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "2595:4:10",
														"nodeType": "YulTypedName",
														"src": "2595:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "2601:8:10",
														"nodeType": "YulTypedName",
														"src": "2601:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "2614:5:10",
														"nodeType": "YulTypedName",
														"src": "2614:5:10",
														"type": ""
													}
												],
												"src": "2565:806:10"
											},
											{
												"body": {
													"nativeSrc": "3444:72:10",
													"nodeType": "YulBlock",
													"src": "3444:72:10",
													"statements": [
														{
															"nativeSrc": "3454:56:10",
															"nodeType": "YulAssignment",
															"src": "3454:56:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3484:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "3484:4:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nativeSrc": "3494:8:10",
																				"nodeType": "YulIdentifier",
																				"src": "3494:8:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3504:4:10",
																				"nodeType": "YulLiteral",
																				"src": "3504:4:10",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3490:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3490:3:10"
																		},
																		"nativeSrc": "3490:19:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3490:19:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "3463:20:10",
																	"nodeType": "YulIdentifier",
																	"src": "3463:20:10"
																},
																"nativeSrc": "3463:47:10",
																"nodeType": "YulFunctionCall",
																"src": "3463:47:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3454:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "3454:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "3376:140:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "3415:4:10",
														"nodeType": "YulTypedName",
														"src": "3415:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3421:8:10",
														"nodeType": "YulTypedName",
														"src": "3421:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3434:5:10",
														"nodeType": "YulTypedName",
														"src": "3434:5:10",
														"type": ""
													}
												],
												"src": "3376:140:10"
											},
											{
												"body": {
													"nativeSrc": "3573:116:10",
													"nodeType": "YulBlock",
													"src": "3573:116:10",
													"statements": [
														{
															"nativeSrc": "3583:20:10",
															"nodeType": "YulAssignment",
															"src": "3583:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3598:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "3598:1:10"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3601:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "3601:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "3594:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3594:3:10"
																},
																"nativeSrc": "3594:9:10",
																"nodeType": "YulFunctionCall",
																"src": "3594:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "3583:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "3583:7:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3661:22:10",
																"nodeType": "YulBlock",
																"src": "3661:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3663:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "3663:16:10"
																			},
																			"nativeSrc": "3663:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3663:18:10"
																		},
																		"nativeSrc": "3663:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3663:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "3632:1:10",
																						"nodeType": "YulIdentifier",
																						"src": "3632:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "3625:6:10",
																					"nodeType": "YulIdentifier",
																					"src": "3625:6:10"
																				},
																				"nativeSrc": "3625:9:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3625:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "3639:1:10",
																						"nodeType": "YulIdentifier",
																						"src": "3639:1:10"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "3646:7:10",
																								"nodeType": "YulIdentifier",
																								"src": "3646:7:10"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "3655:1:10",
																								"nodeType": "YulIdentifier",
																								"src": "3655:1:10"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "3642:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "3642:3:10"
																						},
																						"nativeSrc": "3642:15:10",
																						"nodeType": "YulFunctionCall",
																						"src": "3642:15:10"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "3636:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "3636:2:10"
																				},
																				"nativeSrc": "3636:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3636:22:10"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "3622:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "3622:2:10"
																		},
																		"nativeSrc": "3622:37:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3622:37:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3615:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3615:6:10"
																},
																"nativeSrc": "3615:45:10",
																"nodeType": "YulFunctionCall",
																"src": "3615:45:10"
															},
															"nativeSrc": "3612:71:10",
															"nodeType": "YulIf",
															"src": "3612:71:10"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "3521:168:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3552:1:10",
														"nodeType": "YulTypedName",
														"src": "3552:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3555:1:10",
														"nodeType": "YulTypedName",
														"src": "3555:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "3561:7:10",
														"nodeType": "YulTypedName",
														"src": "3561:7:10",
														"type": ""
													}
												],
												"src": "3521:168:10"
											},
											{
												"body": {
													"nativeSrc": "3795:102:10",
													"nodeType": "YulBlock",
													"src": "3795:102:10",
													"statements": [
														{
															"nativeSrc": "3805:26:10",
															"nodeType": "YulAssignment",
															"src": "3805:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3817:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "3817:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3828:2:10",
																		"nodeType": "YulLiteral",
																		"src": "3828:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3813:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3813:3:10"
																},
																"nativeSrc": "3813:18:10",
																"nodeType": "YulFunctionCall",
																"src": "3813:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3805:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "3805:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3847:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "3847:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3862:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3862:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3878:3:10",
																								"nodeType": "YulLiteral",
																								"src": "3878:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3883:1:10",
																								"nodeType": "YulLiteral",
																								"src": "3883:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3874:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "3874:3:10"
																						},
																						"nativeSrc": "3874:11:10",
																						"nodeType": "YulFunctionCall",
																						"src": "3874:11:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3887:1:10",
																						"nodeType": "YulLiteral",
																						"src": "3887:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3870:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3870:3:10"
																				},
																				"nativeSrc": "3870:19:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3870:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3858:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3858:3:10"
																		},
																		"nativeSrc": "3858:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3858:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3840:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3840:6:10"
																},
																"nativeSrc": "3840:51:10",
																"nodeType": "YulFunctionCall",
																"src": "3840:51:10"
															},
															"nativeSrc": "3840:51:10",
															"nodeType": "YulExpressionStatement",
															"src": "3840:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "3694:203:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3764:9:10",
														"nodeType": "YulTypedName",
														"src": "3764:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3775:6:10",
														"nodeType": "YulTypedName",
														"src": "3775:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3786:4:10",
														"nodeType": "YulTypedName",
														"src": "3786:4:10",
														"type": ""
													}
												],
												"src": "3694:203:10"
											},
											{
												"body": {
													"nativeSrc": "3957:325:10",
													"nodeType": "YulBlock",
													"src": "3957:325:10",
													"statements": [
														{
															"nativeSrc": "3967:22:10",
															"nodeType": "YulAssignment",
															"src": "3967:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3981:1:10",
																		"nodeType": "YulLiteral",
																		"src": "3981:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "3984:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "3984:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "3977:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3977:3:10"
																},
																"nativeSrc": "3977:12:10",
																"nodeType": "YulFunctionCall",
																"src": "3977:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "3967:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3967:6:10"
																}
															]
														},
														{
															"nativeSrc": "3998:38:10",
															"nodeType": "YulVariableDeclaration",
															"src": "3998:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4028:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "4028:4:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4034:1:10",
																		"nodeType": "YulLiteral",
																		"src": "4034:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4024:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "4024:3:10"
																},
																"nativeSrc": "4024:12:10",
																"nodeType": "YulFunctionCall",
																"src": "4024:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "4002:18:10",
																	"nodeType": "YulTypedName",
																	"src": "4002:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4075:31:10",
																"nodeType": "YulBlock",
																"src": "4075:31:10",
																"statements": [
																	{
																		"nativeSrc": "4077:27:10",
																		"nodeType": "YulAssignment",
																		"src": "4077:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "4091:6:10",
																					"nodeType": "YulIdentifier",
																					"src": "4091:6:10"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4099:4:10",
																					"nodeType": "YulLiteral",
																					"src": "4099:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "4087:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "4087:3:10"
																			},
																			"nativeSrc": "4087:17:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4087:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "4077:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4077:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4055:18:10",
																		"nodeType": "YulIdentifier",
																		"src": "4055:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4048:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "4048:6:10"
																},
																"nativeSrc": "4048:26:10",
																"nodeType": "YulFunctionCall",
																"src": "4048:26:10"
															},
															"nativeSrc": "4045:61:10",
															"nodeType": "YulIf",
															"src": "4045:61:10"
														},
														{
															"body": {
																"nativeSrc": "4165:111:10",
																"nodeType": "YulBlock",
																"src": "4165:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4186:1:10",
																					"nodeType": "YulLiteral",
																					"src": "4186:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4193:3:10",
																							"nodeType": "YulLiteral",
																							"src": "4193:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4198:10:10",
																							"nodeType": "YulLiteral",
																							"src": "4198:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4189:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "4189:3:10"
																					},
																					"nativeSrc": "4189:20:10",
																					"nodeType": "YulFunctionCall",
																					"src": "4189:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4179:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4179:6:10"
																			},
																			"nativeSrc": "4179:31:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4179:31:10"
																		},
																		"nativeSrc": "4179:31:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "4179:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4230:1:10",
																					"nodeType": "YulLiteral",
																					"src": "4230:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4233:4:10",
																					"nodeType": "YulLiteral",
																					"src": "4233:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4223:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4223:6:10"
																			},
																			"nativeSrc": "4223:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4223:15:10"
																		},
																		"nativeSrc": "4223:15:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "4223:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4258:1:10",
																					"nodeType": "YulLiteral",
																					"src": "4258:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4261:4:10",
																					"nodeType": "YulLiteral",
																					"src": "4261:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4251:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4251:6:10"
																			},
																			"nativeSrc": "4251:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4251:15:10"
																		},
																		"nativeSrc": "4251:15:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "4251:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4121:18:10",
																		"nodeType": "YulIdentifier",
																		"src": "4121:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "4144:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4144:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4152:2:10",
																				"nodeType": "YulLiteral",
																				"src": "4152:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "4141:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "4141:2:10"
																		},
																		"nativeSrc": "4141:14:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4141:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "4118:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "4118:2:10"
																},
																"nativeSrc": "4118:38:10",
																"nodeType": "YulFunctionCall",
																"src": "4118:38:10"
															},
															"nativeSrc": "4115:161:10",
															"nodeType": "YulIf",
															"src": "4115:161:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "3902:380:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "3937:4:10",
														"nodeType": "YulTypedName",
														"src": "3937:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "3946:6:10",
														"nodeType": "YulTypedName",
														"src": "3946:6:10",
														"type": ""
													}
												],
												"src": "3902:380:10"
											},
											{
												"body": {
													"nativeSrc": "4343:65:10",
													"nodeType": "YulBlock",
													"src": "4343:65:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4360:1:10",
																		"nodeType": "YulLiteral",
																		"src": "4360:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "4363:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "4363:3:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4353:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "4353:6:10"
																},
																"nativeSrc": "4353:14:10",
																"nodeType": "YulFunctionCall",
																"src": "4353:14:10"
															},
															"nativeSrc": "4353:14:10",
															"nodeType": "YulExpressionStatement",
															"src": "4353:14:10"
														},
														{
															"nativeSrc": "4376:26:10",
															"nodeType": "YulAssignment",
															"src": "4376:26:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4394:1:10",
																		"nodeType": "YulLiteral",
																		"src": "4394:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4397:4:10",
																		"nodeType": "YulLiteral",
																		"src": "4397:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "4384:9:10",
																	"nodeType": "YulIdentifier",
																	"src": "4384:9:10"
																},
																"nativeSrc": "4384:18:10",
																"nodeType": "YulFunctionCall",
																"src": "4384:18:10"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4376:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "4376:4:10"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "4287:121:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "4326:3:10",
														"nodeType": "YulTypedName",
														"src": "4326:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "4334:4:10",
														"nodeType": "YulTypedName",
														"src": "4334:4:10",
														"type": ""
													}
												],
												"src": "4287:121:10"
											},
											{
												"body": {
													"nativeSrc": "4494:462:10",
													"nodeType": "YulBlock",
													"src": "4494:462:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "4527:423:10",
																"nodeType": "YulBlock",
																"src": "4527:423:10",
																"statements": [
																	{
																		"nativeSrc": "4541:11:10",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4541:11:10",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4551:1:10",
																			"nodeType": "YulLiteral",
																			"src": "4551:1:10",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "4545:2:10",
																				"nodeType": "YulTypedName",
																				"src": "4545:2:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4572:1:10",
																					"nodeType": "YulLiteral",
																					"src": "4572:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "4575:5:10",
																					"nodeType": "YulIdentifier",
																					"src": "4575:5:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4565:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4565:6:10"
																			},
																			"nativeSrc": "4565:16:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4565:16:10"
																		},
																		"nativeSrc": "4565:16:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "4565:16:10"
																	},
																	{
																		"nativeSrc": "4594:30:10",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4594:30:10",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4616:1:10",
																					"nodeType": "YulLiteral",
																					"src": "4616:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4619:4:10",
																					"nodeType": "YulLiteral",
																					"src": "4619:4:10",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "4606:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "4606:9:10"
																			},
																			"nativeSrc": "4606:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4606:18:10"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "4598:4:10",
																				"nodeType": "YulTypedName",
																				"src": "4598:4:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4637:57:10",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4637:57:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "4660:4:10",
																					"nodeType": "YulIdentifier",
																					"src": "4660:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4670:1:10",
																							"nodeType": "YulLiteral",
																							"src": "4670:1:10",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "4677:10:10",
																									"nodeType": "YulIdentifier",
																									"src": "4677:10:10"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4689:2:10",
																									"nodeType": "YulLiteral",
																									"src": "4689:2:10",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4673:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "4673:3:10"
																							},
																							"nativeSrc": "4673:19:10",
																							"nodeType": "YulFunctionCall",
																							"src": "4673:19:10"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "4666:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "4666:3:10"
																					},
																					"nativeSrc": "4666:27:10",
																					"nodeType": "YulFunctionCall",
																					"src": "4666:27:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4656:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "4656:3:10"
																			},
																			"nativeSrc": "4656:38:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4656:38:10"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "4641:11:10",
																				"nodeType": "YulTypedName",
																				"src": "4641:11:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4731:23:10",
																			"nodeType": "YulBlock",
																			"src": "4731:23:10",
																			"statements": [
																				{
																					"nativeSrc": "4733:19:10",
																					"nodeType": "YulAssignment",
																					"src": "4733:19:10",
																					"value": {
																						"name": "data",
																						"nativeSrc": "4748:4:10",
																						"nodeType": "YulIdentifier",
																						"src": "4748:4:10"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "4733:11:10",
																							"nodeType": "YulIdentifier",
																							"src": "4733:11:10"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "4713:10:10",
																					"nodeType": "YulIdentifier",
																					"src": "4713:10:10"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4725:4:10",
																					"nodeType": "YulLiteral",
																					"src": "4725:4:10",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4710:2:10",
																				"nodeType": "YulIdentifier",
																				"src": "4710:2:10"
																			},
																			"nativeSrc": "4710:20:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4710:20:10"
																		},
																		"nativeSrc": "4707:47:10",
																		"nodeType": "YulIf",
																		"src": "4707:47:10"
																	},
																	{
																		"nativeSrc": "4767:41:10",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4767:41:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "4781:4:10",
																					"nodeType": "YulIdentifier",
																					"src": "4781:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4791:1:10",
																							"nodeType": "YulLiteral",
																							"src": "4791:1:10",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "4798:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "4798:3:10"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4803:2:10",
																									"nodeType": "YulLiteral",
																									"src": "4803:2:10",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4794:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "4794:3:10"
																							},
																							"nativeSrc": "4794:12:10",
																							"nodeType": "YulFunctionCall",
																							"src": "4794:12:10"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "4787:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "4787:3:10"
																					},
																					"nativeSrc": "4787:20:10",
																					"nodeType": "YulFunctionCall",
																					"src": "4787:20:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4777:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "4777:3:10"
																			},
																			"nativeSrc": "4777:31:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4777:31:10"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nativeSrc": "4771:2:10",
																				"nodeType": "YulTypedName",
																				"src": "4771:2:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4821:24:10",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4821:24:10",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "4834:11:10",
																			"nodeType": "YulIdentifier",
																			"src": "4834:11:10"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "4825:5:10",
																				"nodeType": "YulTypedName",
																				"src": "4825:5:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4919:21:10",
																			"nodeType": "YulBlock",
																			"src": "4919:21:10",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "4928:5:10",
																								"nodeType": "YulIdentifier",
																								"src": "4928:5:10"
																							},
																							{
																								"name": "_1",
																								"nativeSrc": "4935:2:10",
																								"nodeType": "YulIdentifier",
																								"src": "4935:2:10"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "4921:6:10",
																							"nodeType": "YulIdentifier",
																							"src": "4921:6:10"
																						},
																						"nativeSrc": "4921:17:10",
																						"nodeType": "YulFunctionCall",
																						"src": "4921:17:10"
																					},
																					"nativeSrc": "4921:17:10",
																					"nodeType": "YulExpressionStatement",
																					"src": "4921:17:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "4869:5:10",
																					"nodeType": "YulIdentifier",
																					"src": "4869:5:10"
																				},
																				{
																					"name": "_2",
																					"nativeSrc": "4876:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "4876:2:10"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4866:2:10",
																				"nodeType": "YulIdentifier",
																				"src": "4866:2:10"
																			},
																			"nativeSrc": "4866:13:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4866:13:10"
																		},
																		"nativeSrc": "4858:82:10",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "4880:26:10",
																			"nodeType": "YulBlock",
																			"src": "4880:26:10",
																			"statements": [
																				{
																					"nativeSrc": "4882:22:10",
																					"nodeType": "YulAssignment",
																					"src": "4882:22:10",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "4895:5:10",
																								"nodeType": "YulIdentifier",
																								"src": "4895:5:10"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4902:1:10",
																								"nodeType": "YulLiteral",
																								"src": "4902:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "4891:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "4891:3:10"
																						},
																						"nativeSrc": "4891:13:10",
																						"nodeType": "YulFunctionCall",
																						"src": "4891:13:10"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "4882:5:10",
																							"nodeType": "YulIdentifier",
																							"src": "4882:5:10"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "4862:3:10",
																			"nodeType": "YulBlock",
																			"src": "4862:3:10",
																			"statements": []
																		},
																		"src": "4858:82:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "4510:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "4510:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4515:2:10",
																		"nodeType": "YulLiteral",
																		"src": "4515:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4507:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "4507:2:10"
																},
																"nativeSrc": "4507:11:10",
																"nodeType": "YulFunctionCall",
																"src": "4507:11:10"
															},
															"nativeSrc": "4504:446:10",
															"nodeType": "YulIf",
															"src": "4504:446:10"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "4413:543:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "4466:5:10",
														"nodeType": "YulTypedName",
														"src": "4466:5:10",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4473:3:10",
														"nodeType": "YulTypedName",
														"src": "4473:3:10",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "4478:10:10",
														"nodeType": "YulTypedName",
														"src": "4478:10:10",
														"type": ""
													}
												],
												"src": "4413:543:10"
											},
											{
												"body": {
													"nativeSrc": "5046:81:10",
													"nodeType": "YulBlock",
													"src": "5046:81:10",
													"statements": [
														{
															"nativeSrc": "5056:65:10",
															"nodeType": "YulAssignment",
															"src": "5056:65:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "5071:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "5071:4:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "5089:1:10",
																										"nodeType": "YulLiteral",
																										"src": "5089:1:10",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "5092:3:10",
																										"nodeType": "YulIdentifier",
																										"src": "5092:3:10"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "5085:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "5085:3:10"
																								},
																								"nativeSrc": "5085:11:10",
																								"nodeType": "YulFunctionCall",
																								"src": "5085:11:10"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "5102:1:10",
																										"nodeType": "YulLiteral",
																										"src": "5102:1:10",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "5098:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "5098:3:10"
																								},
																								"nativeSrc": "5098:6:10",
																								"nodeType": "YulFunctionCall",
																								"src": "5098:6:10"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "5081:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "5081:3:10"
																						},
																						"nativeSrc": "5081:24:10",
																						"nodeType": "YulFunctionCall",
																						"src": "5081:24:10"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "5077:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "5077:3:10"
																				},
																				"nativeSrc": "5077:29:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5077:29:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5067:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5067:3:10"
																		},
																		"nativeSrc": "5067:40:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5067:40:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5113:1:10",
																				"nodeType": "YulLiteral",
																				"src": "5113:1:10",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "5116:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "5116:3:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5109:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5109:3:10"
																		},
																		"nativeSrc": "5109:11:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5109:11:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "5064:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "5064:2:10"
																},
																"nativeSrc": "5064:57:10",
																"nodeType": "YulFunctionCall",
																"src": "5064:57:10"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "5056:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "5056:4:10"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "4961:166:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5023:4:10",
														"nodeType": "YulTypedName",
														"src": "5023:4:10",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "5029:3:10",
														"nodeType": "YulTypedName",
														"src": "5029:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "5037:4:10",
														"nodeType": "YulTypedName",
														"src": "5037:4:10",
														"type": ""
													}
												],
												"src": "4961:166:10"
											},
											{
												"body": {
													"nativeSrc": "5228:1249:10",
													"nodeType": "YulBlock",
													"src": "5228:1249:10",
													"statements": [
														{
															"nativeSrc": "5238:24:10",
															"nodeType": "YulVariableDeclaration",
															"src": "5238:24:10",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "5258:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "5258:3:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5252:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "5252:5:10"
																},
																"nativeSrc": "5252:10:10",
																"nodeType": "YulFunctionCall",
																"src": "5252:10:10"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "5242:6:10",
																	"nodeType": "YulTypedName",
																	"src": "5242:6:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5305:22:10",
																"nodeType": "YulBlock",
																"src": "5305:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "5307:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "5307:16:10"
																			},
																			"nativeSrc": "5307:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "5307:18:10"
																		},
																		"nativeSrc": "5307:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "5307:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5277:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "5277:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5293:2:10",
																						"nodeType": "YulLiteral",
																						"src": "5293:2:10",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5297:1:10",
																						"nodeType": "YulLiteral",
																						"src": "5297:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "5289:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "5289:3:10"
																				},
																				"nativeSrc": "5289:10:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5289:10:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5301:1:10",
																				"nodeType": "YulLiteral",
																				"src": "5301:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5285:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5285:3:10"
																		},
																		"nativeSrc": "5285:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5285:18:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5274:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "5274:2:10"
																},
																"nativeSrc": "5274:30:10",
																"nodeType": "YulFunctionCall",
																"src": "5274:30:10"
															},
															"nativeSrc": "5271:56:10",
															"nodeType": "YulIf",
															"src": "5271:56:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5380:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "5380:4:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "5418:4:10",
																						"nodeType": "YulIdentifier",
																						"src": "5418:4:10"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "5412:5:10",
																					"nodeType": "YulIdentifier",
																					"src": "5412:5:10"
																				},
																				"nativeSrc": "5412:11:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5412:11:10"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "5386:25:10",
																			"nodeType": "YulIdentifier",
																			"src": "5386:25:10"
																		},
																		"nativeSrc": "5386:38:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5386:38:10"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "5426:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "5426:6:10"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "5336:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "5336:43:10"
																},
																"nativeSrc": "5336:97:10",
																"nodeType": "YulFunctionCall",
																"src": "5336:97:10"
															},
															"nativeSrc": "5336:97:10",
															"nodeType": "YulExpressionStatement",
															"src": "5336:97:10"
														},
														{
															"nativeSrc": "5442:18:10",
															"nodeType": "YulVariableDeclaration",
															"src": "5442:18:10",
															"value": {
																"kind": "number",
																"nativeSrc": "5459:1:10",
																"nodeType": "YulLiteral",
																"src": "5459:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5446:9:10",
																	"nodeType": "YulTypedName",
																	"src": "5446:9:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5469:23:10",
															"nodeType": "YulVariableDeclaration",
															"src": "5469:23:10",
															"value": {
																"kind": "number",
																"nativeSrc": "5488:4:10",
																"nodeType": "YulLiteral",
																"src": "5488:4:10",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nativeSrc": "5473:11:10",
																	"nodeType": "YulTypedName",
																	"src": "5473:11:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5501:17:10",
															"nodeType": "YulAssignment",
															"src": "5501:17:10",
															"value": {
																"kind": "number",
																"nativeSrc": "5514:4:10",
																"nodeType": "YulLiteral",
																"src": "5514:4:10",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5501:9:10",
																	"nodeType": "YulIdentifier",
																	"src": "5501:9:10"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "5564:656:10",
																		"nodeType": "YulBlock",
																		"src": "5564:656:10",
																		"statements": [
																			{
																				"nativeSrc": "5578:35:10",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5578:35:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "5597:6:10",
																							"nodeType": "YulIdentifier",
																							"src": "5597:6:10"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5609:2:10",
																									"nodeType": "YulLiteral",
																									"src": "5609:2:10",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5605:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "5605:3:10"
																							},
																							"nativeSrc": "5605:7:10",
																							"nodeType": "YulFunctionCall",
																							"src": "5605:7:10"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "5593:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "5593:3:10"
																					},
																					"nativeSrc": "5593:20:10",
																					"nodeType": "YulFunctionCall",
																					"src": "5593:20:10"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "5582:7:10",
																						"nodeType": "YulTypedName",
																						"src": "5582:7:10",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5626:49:10",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5626:49:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "5670:4:10",
																							"nodeType": "YulIdentifier",
																							"src": "5670:4:10"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "5640:29:10",
																						"nodeType": "YulIdentifier",
																						"src": "5640:29:10"
																					},
																					"nativeSrc": "5640:35:10",
																					"nodeType": "YulFunctionCall",
																					"src": "5640:35:10"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "5630:6:10",
																						"nodeType": "YulTypedName",
																						"src": "5630:6:10",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5688:10:10",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5688:10:10",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5697:1:10",
																					"nodeType": "YulLiteral",
																					"src": "5697:1:10",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "5692:1:10",
																						"nodeType": "YulTypedName",
																						"src": "5692:1:10",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "5775:172:10",
																					"nodeType": "YulBlock",
																					"src": "5775:172:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5800:6:10",
																										"nodeType": "YulIdentifier",
																										"src": "5800:6:10"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "5818:3:10",
																														"nodeType": "YulIdentifier",
																														"src": "5818:3:10"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "5823:9:10",
																														"nodeType": "YulIdentifier",
																														"src": "5823:9:10"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "5814:3:10",
																													"nodeType": "YulIdentifier",
																													"src": "5814:3:10"
																												},
																												"nativeSrc": "5814:19:10",
																												"nodeType": "YulFunctionCall",
																												"src": "5814:19:10"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "5808:5:10",
																											"nodeType": "YulIdentifier",
																											"src": "5808:5:10"
																										},
																										"nativeSrc": "5808:26:10",
																										"nodeType": "YulFunctionCall",
																										"src": "5808:26:10"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "5793:6:10",
																									"nodeType": "YulIdentifier",
																									"src": "5793:6:10"
																								},
																								"nativeSrc": "5793:42:10",
																								"nodeType": "YulFunctionCall",
																								"src": "5793:42:10"
																							},
																							"nativeSrc": "5793:42:10",
																							"nodeType": "YulExpressionStatement",
																							"src": "5793:42:10"
																						},
																						{
																							"nativeSrc": "5852:24:10",
																							"nodeType": "YulAssignment",
																							"src": "5852:24:10",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5866:6:10",
																										"nodeType": "YulIdentifier",
																										"src": "5866:6:10"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5874:1:10",
																										"nodeType": "YulLiteral",
																										"src": "5874:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5862:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "5862:3:10"
																								},
																								"nativeSrc": "5862:14:10",
																								"nodeType": "YulFunctionCall",
																								"src": "5862:14:10"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "5852:6:10",
																									"nodeType": "YulIdentifier",
																									"src": "5852:6:10"
																								}
																							]
																						},
																						{
																							"nativeSrc": "5893:40:10",
																							"nodeType": "YulAssignment",
																							"src": "5893:40:10",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "5910:9:10",
																										"nodeType": "YulIdentifier",
																										"src": "5910:9:10"
																									},
																									{
																										"name": "srcOffset_1",
																										"nativeSrc": "5921:11:10",
																										"nodeType": "YulIdentifier",
																										"src": "5921:11:10"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5906:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "5906:3:10"
																								},
																								"nativeSrc": "5906:27:10",
																								"nodeType": "YulFunctionCall",
																								"src": "5906:27:10"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "5893:9:10",
																									"nodeType": "YulIdentifier",
																									"src": "5893:9:10"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "5722:1:10",
																							"nodeType": "YulIdentifier",
																							"src": "5722:1:10"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5725:7:10",
																							"nodeType": "YulIdentifier",
																							"src": "5725:7:10"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5719:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "5719:2:10"
																					},
																					"nativeSrc": "5719:14:10",
																					"nodeType": "YulFunctionCall",
																					"src": "5719:14:10"
																				},
																				"nativeSrc": "5711:236:10",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "5734:28:10",
																					"nodeType": "YulBlock",
																					"src": "5734:28:10",
																					"statements": [
																						{
																							"nativeSrc": "5736:24:10",
																							"nodeType": "YulAssignment",
																							"src": "5736:24:10",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "5745:1:10",
																										"nodeType": "YulIdentifier",
																										"src": "5745:1:10"
																									},
																									{
																										"name": "srcOffset_1",
																										"nativeSrc": "5748:11:10",
																										"nodeType": "YulIdentifier",
																										"src": "5748:11:10"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5741:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "5741:3:10"
																								},
																								"nativeSrc": "5741:19:10",
																								"nodeType": "YulFunctionCall",
																								"src": "5741:19:10"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "5736:1:10",
																									"nodeType": "YulIdentifier",
																									"src": "5736:1:10"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "5715:3:10",
																					"nodeType": "YulBlock",
																					"src": "5715:3:10",
																					"statements": []
																				},
																				"src": "5711:236:10"
																			},
																			{
																				"body": {
																					"nativeSrc": "5995:166:10",
																					"nodeType": "YulBlock",
																					"src": "5995:166:10",
																					"statements": [
																						{
																							"nativeSrc": "6013:43:10",
																							"nodeType": "YulVariableDeclaration",
																							"src": "6013:43:10",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6040:3:10",
																												"nodeType": "YulIdentifier",
																												"src": "6040:3:10"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6045:9:10",
																												"nodeType": "YulIdentifier",
																												"src": "6045:9:10"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6036:3:10",
																											"nodeType": "YulIdentifier",
																											"src": "6036:3:10"
																										},
																										"nativeSrc": "6036:19:10",
																										"nodeType": "YulFunctionCall",
																										"src": "6036:19:10"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6030:5:10",
																									"nodeType": "YulIdentifier",
																									"src": "6030:5:10"
																								},
																								"nativeSrc": "6030:26:10",
																								"nodeType": "YulFunctionCall",
																								"src": "6030:26:10"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "6017:9:10",
																									"nodeType": "YulTypedName",
																									"src": "6017:9:10",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6080:6:10",
																										"nodeType": "YulIdentifier",
																										"src": "6080:6:10"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "6092:9:10",
																												"nodeType": "YulIdentifier",
																												"src": "6092:9:10"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "6119:1:10",
																																				"nodeType": "YulLiteral",
																																				"src": "6119:1:10",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "6122:6:10",
																																				"nodeType": "YulIdentifier",
																																				"src": "6122:6:10"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "6115:3:10",
																																			"nodeType": "YulIdentifier",
																																			"src": "6115:3:10"
																																		},
																																		"nativeSrc": "6115:14:10",
																																		"nodeType": "YulFunctionCall",
																																		"src": "6115:14:10"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "6131:3:10",
																																		"nodeType": "YulLiteral",
																																		"src": "6131:3:10",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "6111:3:10",
																																	"nodeType": "YulIdentifier",
																																	"src": "6111:3:10"
																																},
																																"nativeSrc": "6111:24:10",
																																"nodeType": "YulFunctionCall",
																																"src": "6111:24:10"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "6141:1:10",
																																		"nodeType": "YulLiteral",
																																		"src": "6141:1:10",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "6137:3:10",
																																	"nodeType": "YulIdentifier",
																																	"src": "6137:3:10"
																																},
																																"nativeSrc": "6137:6:10",
																																"nodeType": "YulFunctionCall",
																																"src": "6137:6:10"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "6107:3:10",
																															"nodeType": "YulIdentifier",
																															"src": "6107:3:10"
																														},
																														"nativeSrc": "6107:37:10",
																														"nodeType": "YulFunctionCall",
																														"src": "6107:37:10"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "6103:3:10",
																													"nodeType": "YulIdentifier",
																													"src": "6103:3:10"
																												},
																												"nativeSrc": "6103:42:10",
																												"nodeType": "YulFunctionCall",
																												"src": "6103:42:10"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "6088:3:10",
																											"nodeType": "YulIdentifier",
																											"src": "6088:3:10"
																										},
																										"nativeSrc": "6088:58:10",
																										"nodeType": "YulFunctionCall",
																										"src": "6088:58:10"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "6073:6:10",
																									"nodeType": "YulIdentifier",
																									"src": "6073:6:10"
																								},
																								"nativeSrc": "6073:74:10",
																								"nodeType": "YulFunctionCall",
																								"src": "6073:74:10"
																							},
																							"nativeSrc": "6073:74:10",
																							"nodeType": "YulExpressionStatement",
																							"src": "6073:74:10"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5966:7:10",
																							"nodeType": "YulIdentifier",
																							"src": "5966:7:10"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "5975:6:10",
																							"nodeType": "YulIdentifier",
																							"src": "5975:6:10"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5963:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "5963:2:10"
																					},
																					"nativeSrc": "5963:19:10",
																					"nodeType": "YulFunctionCall",
																					"src": "5963:19:10"
																				},
																				"nativeSrc": "5960:201:10",
																				"nodeType": "YulIf",
																				"src": "5960:201:10"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6181:4:10",
																							"nodeType": "YulIdentifier",
																							"src": "6181:4:10"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "6195:1:10",
																											"nodeType": "YulLiteral",
																											"src": "6195:1:10",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "6198:6:10",
																											"nodeType": "YulIdentifier",
																											"src": "6198:6:10"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "6191:3:10",
																										"nodeType": "YulIdentifier",
																										"src": "6191:3:10"
																									},
																									"nativeSrc": "6191:14:10",
																									"nodeType": "YulFunctionCall",
																									"src": "6191:14:10"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6207:1:10",
																									"nodeType": "YulLiteral",
																									"src": "6207:1:10",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6187:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "6187:3:10"
																							},
																							"nativeSrc": "6187:22:10",
																							"nodeType": "YulFunctionCall",
																							"src": "6187:22:10"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6174:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "6174:6:10"
																					},
																					"nativeSrc": "6174:36:10",
																					"nodeType": "YulFunctionCall",
																					"src": "6174:36:10"
																				},
																				"nativeSrc": "6174:36:10",
																				"nodeType": "YulExpressionStatement",
																				"src": "6174:36:10"
																			}
																		]
																	},
																	"nativeSrc": "5557:663:10",
																	"nodeType": "YulCase",
																	"src": "5557:663:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5562:1:10",
																		"nodeType": "YulLiteral",
																		"src": "5562:1:10",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "6237:234:10",
																		"nodeType": "YulBlock",
																		"src": "6237:234:10",
																		"statements": [
																			{
																				"nativeSrc": "6251:14:10",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6251:14:10",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6264:1:10",
																					"nodeType": "YulLiteral",
																					"src": "6264:1:10",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "6255:5:10",
																						"nodeType": "YulTypedName",
																						"src": "6255:5:10",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6300:67:10",
																					"nodeType": "YulBlock",
																					"src": "6300:67:10",
																					"statements": [
																						{
																							"nativeSrc": "6318:35:10",
																							"nodeType": "YulAssignment",
																							"src": "6318:35:10",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6337:3:10",
																												"nodeType": "YulIdentifier",
																												"src": "6337:3:10"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6342:9:10",
																												"nodeType": "YulIdentifier",
																												"src": "6342:9:10"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6333:3:10",
																											"nodeType": "YulIdentifier",
																											"src": "6333:3:10"
																										},
																										"nativeSrc": "6333:19:10",
																										"nodeType": "YulFunctionCall",
																										"src": "6333:19:10"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6327:5:10",
																									"nodeType": "YulIdentifier",
																									"src": "6327:5:10"
																								},
																								"nativeSrc": "6327:26:10",
																								"nodeType": "YulFunctionCall",
																								"src": "6327:26:10"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "6318:5:10",
																									"nodeType": "YulIdentifier",
																									"src": "6318:5:10"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "6281:6:10",
																					"nodeType": "YulIdentifier",
																					"src": "6281:6:10"
																				},
																				"nativeSrc": "6278:89:10",
																				"nodeType": "YulIf",
																				"src": "6278:89:10"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6387:4:10",
																							"nodeType": "YulIdentifier",
																							"src": "6387:4:10"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "6446:5:10",
																									"nodeType": "YulIdentifier",
																									"src": "6446:5:10"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "6453:6:10",
																									"nodeType": "YulIdentifier",
																									"src": "6453:6:10"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "6393:52:10",
																								"nodeType": "YulIdentifier",
																								"src": "6393:52:10"
																							},
																							"nativeSrc": "6393:67:10",
																							"nodeType": "YulFunctionCall",
																							"src": "6393:67:10"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6380:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "6380:6:10"
																					},
																					"nativeSrc": "6380:81:10",
																					"nodeType": "YulFunctionCall",
																					"src": "6380:81:10"
																				},
																				"nativeSrc": "6380:81:10",
																				"nodeType": "YulExpressionStatement",
																				"src": "6380:81:10"
																			}
																		]
																	},
																	"nativeSrc": "6229:242:10",
																	"nodeType": "YulCase",
																	"src": "6229:242:10",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5537:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "5537:6:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5545:2:10",
																		"nodeType": "YulLiteral",
																		"src": "5545:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5534:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "5534:2:10"
																},
																"nativeSrc": "5534:14:10",
																"nodeType": "YulFunctionCall",
																"src": "5534:14:10"
															},
															"nativeSrc": "5527:944:10",
															"nodeType": "YulSwitch",
															"src": "5527:944:10"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "5132:1345:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5213:4:10",
														"nodeType": "YulTypedName",
														"src": "5213:4:10",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "5219:3:10",
														"nodeType": "YulTypedName",
														"src": "5219:3:10",
														"type": ""
													}
												],
												"src": "5132:1345:10"
											},
											{
												"body": {
													"nativeSrc": "6611:119:10",
													"nodeType": "YulBlock",
													"src": "6611:119:10",
													"statements": [
														{
															"nativeSrc": "6621:26:10",
															"nodeType": "YulAssignment",
															"src": "6621:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6633:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "6633:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6644:2:10",
																		"nodeType": "YulLiteral",
																		"src": "6644:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6629:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "6629:3:10"
																},
																"nativeSrc": "6629:18:10",
																"nodeType": "YulFunctionCall",
																"src": "6629:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6621:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "6621:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6663:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "6663:9:10"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6674:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "6674:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6656:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "6656:6:10"
																},
																"nativeSrc": "6656:25:10",
																"nodeType": "YulFunctionCall",
																"src": "6656:25:10"
															},
															"nativeSrc": "6656:25:10",
															"nodeType": "YulExpressionStatement",
															"src": "6656:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6701:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "6701:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6712:2:10",
																				"nodeType": "YulLiteral",
																				"src": "6712:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6697:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "6697:3:10"
																		},
																		"nativeSrc": "6697:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6697:18:10"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6717:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "6717:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6690:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "6690:6:10"
																},
																"nativeSrc": "6690:34:10",
																"nodeType": "YulFunctionCall",
																"src": "6690:34:10"
															},
															"nativeSrc": "6690:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "6690:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6482:248:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6572:9:10",
														"nodeType": "YulTypedName",
														"src": "6572:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6583:6:10",
														"nodeType": "YulTypedName",
														"src": "6583:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6591:6:10",
														"nodeType": "YulTypedName",
														"src": "6591:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6602:4:10",
														"nodeType": "YulTypedName",
														"src": "6602:4:10",
														"type": ""
													}
												],
												"src": "6482:248:10"
											},
											{
												"body": {
													"nativeSrc": "6783:77:10",
													"nodeType": "YulBlock",
													"src": "6783:77:10",
													"statements": [
														{
															"nativeSrc": "6793:16:10",
															"nodeType": "YulAssignment",
															"src": "6793:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6804:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "6804:1:10"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6807:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "6807:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6800:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "6800:3:10"
																},
																"nativeSrc": "6800:9:10",
																"nodeType": "YulFunctionCall",
																"src": "6800:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "6793:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "6793:3:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6832:22:10",
																"nodeType": "YulBlock",
																"src": "6832:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6834:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "6834:16:10"
																			},
																			"nativeSrc": "6834:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "6834:18:10"
																		},
																		"nativeSrc": "6834:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "6834:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6824:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "6824:1:10"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "6827:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "6827:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6821:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "6821:2:10"
																},
																"nativeSrc": "6821:10:10",
																"nodeType": "YulFunctionCall",
																"src": "6821:10:10"
															},
															"nativeSrc": "6818:36:10",
															"nodeType": "YulIf",
															"src": "6818:36:10"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "6735:125:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6766:1:10",
														"nodeType": "YulTypedName",
														"src": "6766:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6769:1:10",
														"nodeType": "YulTypedName",
														"src": "6769:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "6775:3:10",
														"nodeType": "YulTypedName",
														"src": "6775:3:10",
														"type": ""
													}
												],
												"src": "6735:125:10"
											},
											{
												"body": {
													"nativeSrc": "7022:188:10",
													"nodeType": "YulBlock",
													"src": "7022:188:10",
													"statements": [
														{
															"nativeSrc": "7032:26:10",
															"nodeType": "YulAssignment",
															"src": "7032:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7044:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "7044:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7055:2:10",
																		"nodeType": "YulLiteral",
																		"src": "7055:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7040:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7040:3:10"
																},
																"nativeSrc": "7040:18:10",
																"nodeType": "YulFunctionCall",
																"src": "7040:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7032:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "7032:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7074:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "7074:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "7089:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "7089:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7105:3:10",
																								"nodeType": "YulLiteral",
																								"src": "7105:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7110:1:10",
																								"nodeType": "YulLiteral",
																								"src": "7110:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7101:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "7101:3:10"
																						},
																						"nativeSrc": "7101:11:10",
																						"nodeType": "YulFunctionCall",
																						"src": "7101:11:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7114:1:10",
																						"nodeType": "YulLiteral",
																						"src": "7114:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7097:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "7097:3:10"
																				},
																				"nativeSrc": "7097:19:10",
																				"nodeType": "YulFunctionCall",
																				"src": "7097:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7085:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "7085:3:10"
																		},
																		"nativeSrc": "7085:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "7085:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7067:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7067:6:10"
																},
																"nativeSrc": "7067:51:10",
																"nodeType": "YulFunctionCall",
																"src": "7067:51:10"
															},
															"nativeSrc": "7067:51:10",
															"nodeType": "YulExpressionStatement",
															"src": "7067:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7138:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "7138:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7149:2:10",
																				"nodeType": "YulLiteral",
																				"src": "7149:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7134:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "7134:3:10"
																		},
																		"nativeSrc": "7134:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "7134:18:10"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "7154:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "7154:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7127:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7127:6:10"
																},
																"nativeSrc": "7127:34:10",
																"nodeType": "YulFunctionCall",
																"src": "7127:34:10"
															},
															"nativeSrc": "7127:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "7127:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7181:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "7181:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7192:2:10",
																				"nodeType": "YulLiteral",
																				"src": "7192:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7177:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "7177:3:10"
																		},
																		"nativeSrc": "7177:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "7177:18:10"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "7197:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "7197:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7170:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7170:6:10"
																},
																"nativeSrc": "7170:34:10",
																"nodeType": "YulFunctionCall",
																"src": "7170:34:10"
															},
															"nativeSrc": "7170:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "7170:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6865:345:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6975:9:10",
														"nodeType": "YulTypedName",
														"src": "6975:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6986:6:10",
														"nodeType": "YulTypedName",
														"src": "6986:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6994:6:10",
														"nodeType": "YulTypedName",
														"src": "6994:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7002:6:10",
														"nodeType": "YulTypedName",
														"src": "7002:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7013:4:10",
														"nodeType": "YulTypedName",
														"src": "7013:4:10",
														"type": ""
													}
												],
												"src": "6865:345:10"
											},
											{
												"body": {
													"nativeSrc": "7316:76:10",
													"nodeType": "YulBlock",
													"src": "7316:76:10",
													"statements": [
														{
															"nativeSrc": "7326:26:10",
															"nodeType": "YulAssignment",
															"src": "7326:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7338:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "7338:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7349:2:10",
																		"nodeType": "YulLiteral",
																		"src": "7349:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7334:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7334:3:10"
																},
																"nativeSrc": "7334:18:10",
																"nodeType": "YulFunctionCall",
																"src": "7334:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7326:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "7326:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7368:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "7368:9:10"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7379:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "7379:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7361:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7361:6:10"
																},
																"nativeSrc": "7361:25:10",
																"nodeType": "YulFunctionCall",
																"src": "7361:25:10"
															},
															"nativeSrc": "7361:25:10",
															"nodeType": "YulExpressionStatement",
															"src": "7361:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "7215:177:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7285:9:10",
														"nodeType": "YulTypedName",
														"src": "7285:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7296:6:10",
														"nodeType": "YulTypedName",
														"src": "7296:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7307:4:10",
														"nodeType": "YulTypedName",
														"src": "7307:4:10",
														"type": ""
													}
												],
												"src": "7215:177:10"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_uint8t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n        let offset := mload(add(headStart, 64))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value_1 := mload(add(headStart, 128))\n        if iszero(eq(value_1, and(value_1, 0xff))) { revert(0, 0) }\n        value4 := value_1\n        value5 := mload(add(headStart, 160))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := 1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a06040523480156200001157600080fd5b506040516200131d3803806200131d833981016040819052620000349162000435565b6200004182600a62000602565b6200004d90866200061a565b8484886001600160a01b0381166200008057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200008b81620000e1565b5060046200009a8382620006c4565b506005620000a98282620006c4565b50506006805460809390935261ffff1990921661010060ff8616021790915550620000d5868262000131565b505050505050620007a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166200015d5760405163ec442f0560e01b81526000600482015260240162000077565b6200016b600083836200016f565b5050565b6200017c83838362000181565b505050565b6200018e838383620001fc565b60006200019a60805190565b90506001600160a01b038416158015620001b357508015155b15620001f6576000620001c560035490565b905081811115620001f45760405163279e7e1560e21b8152600481018290526024810183905260440162000077565b505b50505050565b6200020662000213565b6200017c8383836200023a565b60065460ff1615620002385760405163d93c066560e01b815260040160405180910390fd5b565b6001600160a01b038316620002695780600360008282546200025d919062000790565b90915550620002dd9050565b6001600160a01b03831660009081526001602052604090205481811015620002be5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640162000077565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b038216620002fb576003805482900390556200031a565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200036091815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200039557600080fd5b81516001600160401b0380821115620003b257620003b26200036d565b604051601f8301601f19908116603f01168101908282118183101715620003dd57620003dd6200036d565b8160405283815260209250866020858801011115620003fb57600080fd5b600091505b838210156200041f578582018301518183018401529082019062000400565b6000602085830101528094505050505092915050565b60008060008060008060c087890312156200044f57600080fd5b86516001600160a01b03811681146200046757600080fd5b6020880151604089015191975095506001600160401b03808211156200048c57600080fd5b6200049a8a838b0162000383565b95506060890151915080821115620004b157600080fd5b50620004c089828a0162000383565b935050608087015160ff81168114620004d857600080fd5b8092505060a087015190509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000544578160001904821115620005285762000528620004ed565b808516156200053657918102915b93841c939080029062000508565b509250929050565b6000826200055d57506001620005fc565b816200056c57506000620005fc565b81600181146200058557600281146200059057620005b0565b6001915050620005fc565b60ff841115620005a457620005a4620004ed565b50506001821b620005fc565b5060208310610133831016604e8410600b8410161715620005d5575081810a620005fc565b620005e1838362000503565b8060001904821115620005f857620005f8620004ed565b0290505b92915050565b60006200061360ff8416836200054c565b9392505050565b8082028115828204841417620005fc57620005fc620004ed565b600181811c908216806200064957607f821691505b6020821081036200066a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017c576000816000526020600020601f850160051c810160208610156200069b5750805b601f850160051c820191505b81811015620006bc57828155600101620006a7565b505050505050565b81516001600160401b03811115620006e057620006e06200036d565b620006f881620006f1845462000634565b8462000670565b602080601f831160018114620007305760008415620007175750858301515b600019600386901b1c1916600185901b178555620006bc565b600085815260208120601f198616915b82811015620007615788860151825594840194600190910190840162000740565b5085821015620007805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620005fc57620005fc620004ed565b608051610b54620007c9600039600081816101ab01526107ec0152610b546000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad5780639dc29fac116100715780639dc29fac14610253578063a9059cbb14610266578063dd62ed3e14610279578063f0141d841461018c578063f2fde38b146102b257600080fd5b806370a08231146101f7578063715018a6146102205780638456cb59146102285780638da5cb5b1461023057806395d89b411461024b57600080fd5b8063313ce567116100f4578063313ce5671461018c578063355274ea146101a95780633f4ba83a146101cf57806340c10f19146101d95780635c975abb146101ec57600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e6102c5565b60405161013b919061099d565b60405180910390f35b610157610152366004610a08565b610357565b604051901515815260200161013b565b6003545b60405190815260200161013b565b610157610187366004610a32565b610371565b600654610100900460ff1660405160ff909116815260200161013b565b7f000000000000000000000000000000000000000000000000000000000000000061016b565b6101d7610395565b005b6101d76101e7366004610a08565b6103a7565b60065460ff16610157565b61016b610205366004610a6e565b6001600160a01b031660009081526001602052604090205490565b6101d76103bd565b6101d76103cf565b6000546040516001600160a01b03909116815260200161013b565b61012e6103df565b6101d7610261366004610a08565b6103ee565b610157610274366004610a08565b610400565b61016b610287366004610a90565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6101d76102c0366004610a6e565b61040e565b6060600480546102d490610ac3565b80601f016020809104026020016040519081016040528092919081815260200182805461030090610ac3565b801561034d5780601f106103225761010080835404028352916020019161034d565b820191906000526020600020905b81548152906001019060200180831161033057829003601f168201915b5050505050905090565b600033610365818585610451565b60019150505b92915050565b60003361037f858285610463565b61038a8585856104e1565b506001949350505050565b61039d610540565b6103a561056d565b565b6103af610540565b6103b982826105bf565b5050565b6103c5610540565b6103a560006105f5565b6103d7610540565b6103a5610645565b6060600580546102d490610ac3565b6103f6610540565b6103b98282610682565b6000336103658185856104e1565b610416610540565b6001600160a01b03811661044557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61044e816105f5565b50565b61045e83838360016106b8565b505050565b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981146104db57818110156104cc57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161043c565b6104db848484840360006106b8565b50505050565b6001600160a01b03831661050b57604051634b637e8f60e11b81526000600482015260240161043c565b6001600160a01b0382166105355760405163ec442f0560e01b81526000600482015260240161043c565b61045e83838361078d565b6000546001600160a01b031633146103a55760405163118cdaa760e01b815233600482015260240161043c565b610575610798565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166105e95760405163ec442f0560e01b81526000600482015260240161043c565b6103b96000838361078d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61064d6107bb565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586105a23390565b6001600160a01b0382166106ac57604051634b637e8f60e11b81526000600482015260240161043c565b6103b98260008361078d565b6001600160a01b0384166106e25760405163e602df0560e01b81526000600482015260240161043c565b6001600160a01b03831661070c57604051634a1406b160e11b81526000600482015260240161043c565b6001600160a01b03808516600090815260026020908152604080832093871683529290522082905580156104db57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161077f91815260200190565b60405180910390a350505050565b61045e8383836107df565b60065460ff166103a557604051638dfc202b60e01b815260040160405180910390fd5b60065460ff16156103a55760405163d93c066560e01b815260040160405180910390fd5b6107ea838383610865565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03841615801561082157508015155b156104db57600061083160035490565b90508181111561085e5760405163279e7e1560e21b8152600481018290526024810183905260440161043c565b5050505050565b61086d6107bb565b61045e8383836001600160a01b03831661089e5780600360008282546108939190610afd565b909155506109109050565b6001600160a01b038316600090815260016020526040902054818110156108f15760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161043c565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b03821661092c5760038054829003905561094b565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161099091815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156109cb578581018301518582016040015282016109af565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a0357600080fd5b919050565b60008060408385031215610a1b57600080fd5b610a24836109ec565b946020939093013593505050565b600080600060608486031215610a4757600080fd5b610a50846109ec565b9250610a5e602085016109ec565b9150604084013590509250925092565b600060208284031215610a8057600080fd5b610a89826109ec565b9392505050565b60008060408385031215610aa357600080fd5b610aac836109ec565b9150610aba602084016109ec565b90509250929050565b600181811c90821680610ad757607f821691505b602082108103610af757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561036b57634e487b7160e01b600052601160045260246000fdfea264697066735822122062a7257fd7784ce74b4c50822593c23e469ecd794ff312e75aa1e7b59b76d28764736f6c63430008180033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x131D CODESIZE SUB DUP1 PUSH3 0x131D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x435 JUMP JUMPDEST PUSH3 0x41 DUP3 PUSH1 0xA PUSH3 0x602 JUMP JUMPDEST PUSH3 0x4D SWAP1 DUP7 PUSH3 0x61A JUMP JUMPDEST DUP5 DUP5 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x80 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x8B DUP2 PUSH3 0xE1 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x9A DUP4 DUP3 PUSH3 0x6C4 JUMP JUMPDEST POP PUSH1 0x5 PUSH3 0xA9 DUP3 DUP3 PUSH3 0x6C4 JUMP JUMPDEST POP POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x80 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0xFFFF NOT SWAP1 SWAP3 AND PUSH2 0x100 PUSH1 0xFF DUP7 AND MUL OR SWAP1 SWAP2 SSTORE POP PUSH3 0xD5 DUP7 DUP3 PUSH3 0x131 JUMP JUMPDEST POP POP POP POP POP POP PUSH3 0x7A6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x15D JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH3 0x77 JUMP JUMPDEST PUSH3 0x16B PUSH1 0x0 DUP4 DUP4 PUSH3 0x16F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x17C DUP4 DUP4 DUP4 PUSH3 0x181 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x18E DUP4 DUP4 DUP4 PUSH3 0x1FC JUMP JUMPDEST PUSH1 0x0 PUSH3 0x19A PUSH1 0x80 MLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO PUSH3 0x1B3 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH3 0x1F6 JUMPI PUSH1 0x0 PUSH3 0x1C5 PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH3 0x1F4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x279E7E15 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH3 0x77 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH3 0x206 PUSH3 0x213 JUMP JUMPDEST PUSH3 0x17C DUP4 DUP4 DUP4 PUSH3 0x23A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x238 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x269 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x25D SWAP2 SWAP1 PUSH3 0x790 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH3 0x2DD SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH3 0x2BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH3 0x77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x2FB JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH3 0x31A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x360 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3B2 JUMPI PUSH3 0x3B2 PUSH3 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x3DD JUMPI PUSH3 0x3DD PUSH3 0x36D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x41F JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x400 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD PUSH1 0x40 DUP10 ADD MLOAD SWAP2 SWAP8 POP SWAP6 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x49A DUP11 DUP4 DUP12 ADD PUSH3 0x383 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x4C0 DUP10 DUP3 DUP11 ADD PUSH3 0x383 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x4D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x544 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x4ED JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x536 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x508 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x55D JUMPI POP PUSH1 0x1 PUSH3 0x5FC JUMP JUMPDEST DUP2 PUSH3 0x56C JUMPI POP PUSH1 0x0 PUSH3 0x5FC JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x585 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x590 JUMPI PUSH3 0x5B0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x5FC JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x5A4 JUMPI PUSH3 0x5A4 PUSH3 0x4ED JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x5FC JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x5D5 JUMPI POP DUP2 DUP2 EXP PUSH3 0x5FC JUMP JUMPDEST PUSH3 0x5E1 DUP4 DUP4 PUSH3 0x503 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x5F8 JUMPI PUSH3 0x5F8 PUSH3 0x4ED JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x613 PUSH1 0xFF DUP5 AND DUP4 PUSH3 0x54C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x5FC JUMPI PUSH3 0x5FC PUSH3 0x4ED JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x649 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x66A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x17C JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x69B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x6BC JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x6A7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x6E0 JUMPI PUSH3 0x6E0 PUSH3 0x36D JUMP JUMPDEST PUSH3 0x6F8 DUP2 PUSH3 0x6F1 DUP5 SLOAD PUSH3 0x634 JUMP JUMPDEST DUP5 PUSH3 0x670 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x730 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x717 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x6BC JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x761 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x740 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x780 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x5FC JUMPI PUSH3 0x5FC PUSH3 0x4ED JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xB54 PUSH3 0x7C9 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1AB ADD MSTORE PUSH2 0x7EC ADD MSTORE PUSH2 0xB54 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0x9DC29FAC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xF0141D84 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x99D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x157 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xA32 JUMP JUMPDEST PUSH2 0x371 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH32 0x0 PUSH2 0x16B JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x395 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D7 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x157 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x3BD JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x12E PUSH2 0x3DF JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x261 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x157 PUSH2 0x274 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6E JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2D4 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x300 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x34D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x322 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x34D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x330 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x365 DUP2 DUP6 DUP6 PUSH2 0x451 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x37F DUP6 DUP3 DUP6 PUSH2 0x463 JUMP JUMPDEST PUSH2 0x38A DUP6 DUP6 DUP6 PUSH2 0x4E1 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x39D PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3A5 PUSH2 0x56D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3AF PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3B9 DUP3 DUP3 PUSH2 0x5BF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3A5 PUSH1 0x0 PUSH2 0x5F5 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3A5 PUSH2 0x645 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x2D4 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3B9 DUP3 DUP3 PUSH2 0x682 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x365 DUP2 DUP6 DUP6 PUSH2 0x4E1 JUMP JUMPDEST PUSH2 0x416 PUSH2 0x540 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x445 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x44E DUP2 PUSH2 0x5F5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x6B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4DB JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x4DB DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x6B8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x50B JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x575 PUSH2 0x798 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x3B9 PUSH1 0x0 DUP4 DUP4 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x64D PUSH2 0x7BB JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x5A2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x3B9 DUP3 PUSH1 0x0 DUP4 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x70C JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4DB JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x77F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH2 0x7DF JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7EA DUP4 DUP4 DUP4 PUSH2 0x865 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO PUSH2 0x821 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 PUSH2 0x831 PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x85E JUMPI PUSH1 0x40 MLOAD PUSH4 0x279E7E15 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x43C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x86D PUSH2 0x7BB JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x89E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x893 SWAP2 SWAP1 PUSH2 0xAFD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x910 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x92C JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x94B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x990 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9CB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x9AF JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA24 DUP4 PUSH2 0x9EC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA50 DUP5 PUSH2 0x9EC JUMP JUMPDEST SWAP3 POP PUSH2 0xA5E PUSH1 0x20 DUP6 ADD PUSH2 0x9EC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA89 DUP3 PUSH2 0x9EC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAAC DUP4 PUSH2 0x9EC JUMP JUMPDEST SWAP2 POP PUSH2 0xABA PUSH1 0x20 DUP5 ADD PUSH2 0x9EC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xAD7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xAF7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0xA7257F 0xD7 PUSH25 0x4CE74B4C50822593C23E469ECD794FF312E75AA1E7B59B76D2 DUP8 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ",
							"sourceMap": "236:1207:9:-:0;;;328:371;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;606:10;612:4;606:2;:10;:::i;:::-;597:19;;:6;:19;:::i;:::-;531:4;537:6;562:12;-1:-1:-1;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;3840:51:10;3813:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1962:5:2;:13;1970:5;1962;:13;:::i;:::-;-1:-1:-1;1985:7:2;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;;1231:7:7;:15;;800:11:8;;;;;-1:-1:-1;;634:12:9;;;1231:15:7;;634:12:9;::::3;;;::::0;;;-1:-1:-1;657:34:9::3;663:12:::0;677:13;657:5:::3;:34::i;:::-;328:371:::0;;;;;;236:1207;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;7721:208:2:-;-1:-1:-1;;;;;7791:21:2;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:2;;7864:1;7835:32;;;3840:51:10;3813:18;;7835:32:2;3694:203:10;7787:91:2;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;1161:187:9:-;1310:30;1324:4;1330:2;1334:5;1310:13;:30::i;:::-;1161:187;;;:::o;1046:407:8:-;1141:30;1155:4;1161:2;1165:5;1141:13;:30::i;:::-;1182:17;1202:5;974:4;;;903:83;1202:5;1182:25;-1:-1:-1;;;;;;1222:18:8;;;:36;;;;-1:-1:-1;1244:14:8;;;1222:36;1218:228;;;1289:14;1306:13;3222:12:2;;;3144:97;1306:13:8;1289:30;;1347:9;1338:6;:18;1334:101;;;1384:35;;-1:-1:-1;;;1384:35:8;;;;;6656:25:10;;;6697:18;;;6690:34;;;6629:18;;1384:35:8;6482:248:10;1334:101:8;1260:186;1218:228;1130:323;1046:407;;;:::o;1112:145:4:-;1474:19:7;:17;:19::i;:::-;1220:30:4::1;1234:4:::0;1240:2;1244:5;1220:13:::1;:30::i;2002:128:7:-:0;1920:7;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:7;;;;;;;;;;;2063:61;2002:128::o;6271:1107:2:-;-1:-1:-1;;;;;6360:18:2;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:2;;-1:-1:-1;6356:540:2;;-1:-1:-1;;;;;6570:15:2;;6548:19;6570:15;;;:9;:15;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:2;;-1:-1:-1;;;;;7085:32:10;;6649:50:2;;;7067:51:10;7134:18;;;7127:34;;;7177:18;;;7170:34;;;7040:18;;6649:50:2;6865:345:10;6599:115:2;-1:-1:-1;;;;;6834:15:2;;;;;;:9;:15;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:2;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:2;;;;;;:9;:13;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:2;7355:4;-1:-1:-1;;;;;7346:25:2;;7365:5;7346:25;;;;7361::10;;7349:2;7334:18;;7215:177;7346:25:2;;;;;;;;6271:1107;;;:::o;14:127:10:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:844;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:10;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:10;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;732:3;725:4;720:2;712:6;708:15;704:26;701:35;698:55;;;749:1;746;739:12;698:55;771:1;762:10;;781:133;795:2;792:1;789:9;781:133;;;883:14;;;879:23;;873:30;852:14;;;848:23;;841:63;806:10;;;;781:133;;;958:1;951:4;946:2;938:6;934:15;930:26;923:37;978:6;969:15;;;;;;146:844;;;;:::o;995:1012::-;1128:6;1136;1144;1152;1160;1168;1221:3;1209:9;1200:7;1196:23;1192:33;1189:53;;;1238:1;1235;1228:12;1189:53;1264:16;;-1:-1:-1;;;;;1309:31:10;;1299:42;;1289:70;;1355:1;1352;1345:12;1289:70;1423:2;1408:18;;1402:25;1471:2;1456:18;;1450:25;1378:5;;-1:-1:-1;1402:25:10;-1:-1:-1;;;;;;1524:14:10;;;1521:34;;;1551:1;1548;1541:12;1521:34;1574:61;1627:7;1618:6;1607:9;1603:22;1574:61;:::i;:::-;1564:71;;1681:2;1670:9;1666:18;1660:25;1644:41;;1710:2;1700:8;1697:16;1694:36;;;1726:1;1723;1716:12;1694:36;;1749:63;1804:7;1793:8;1782:9;1778:24;1749:63;:::i;:::-;1739:73;;;1857:3;1846:9;1842:19;1836:26;1906:4;1897:7;1893:18;1884:7;1881:31;1871:59;;1926:1;1923;1916:12;1871:59;1949:7;1939:17;;;1996:3;1985:9;1981:19;1975:26;1965:36;;995:1012;;;;;;;;:::o;2012:127::-;2073:10;2068:3;2064:20;2061:1;2054:31;2104:4;2101:1;2094:15;2128:4;2125:1;2118:15;2144:416;2233:1;2270:5;2233:1;2284:270;2305:7;2295:8;2292:21;2284:270;;;2364:4;2360:1;2356:6;2352:17;2346:4;2343:27;2340:53;;;2373:18;;:::i;:::-;2423:7;2413:8;2409:22;2406:55;;;2443:16;;;;2406:55;2522:22;;;;2482:15;;;;2284:270;;;2288:3;2144:416;;;;;:::o;2565:806::-;2614:5;2644:8;2634:80;;-1:-1:-1;2685:1:10;2699:5;;2634:80;2733:4;2723:76;;-1:-1:-1;2770:1:10;2784:5;;2723:76;2815:4;2833:1;2828:59;;;;2901:1;2896:130;;;;2808:218;;2828:59;2858:1;2849:10;;2872:5;;;2896:130;2933:3;2923:8;2920:17;2917:43;;;2940:18;;:::i;:::-;-1:-1:-1;;2996:1:10;2982:16;;3011:5;;2808:218;;3110:2;3100:8;3097:16;3091:3;3085:4;3082:13;3078:36;3072:2;3062:8;3059:16;3054:2;3048:4;3045:12;3041:35;3038:77;3035:159;;;-1:-1:-1;3147:19:10;;;3179:5;;3035:159;3226:34;3251:8;3245:4;3226:34;:::i;:::-;3296:6;3292:1;3288:6;3284:19;3275:7;3272:32;3269:58;;;3307:18;;:::i;:::-;3345:20;;-1:-1:-1;2565:806:10;;;;;:::o;3376:140::-;3434:5;3463:47;3504:4;3494:8;3490:19;3484:4;3463:47;:::i;:::-;3454:56;3376:140;-1:-1:-1;;;3376:140:10:o;3521:168::-;3594:9;;;3625;;3642:15;;;3636:22;;3622:37;3612:71;;3663:18;;:::i;3902:380::-;3981:1;3977:12;;;;4024;;;4045:61;;4099:4;4091:6;4087:17;4077:27;;4045:61;4152:2;4144:6;4141:14;4121:18;4118:38;4115:161;;4198:10;4193:3;4189:20;4186:1;4179:31;4233:4;4230:1;4223:15;4261:4;4258:1;4251:15;4115:161;;3902:380;;;:::o;4413:543::-;4515:2;4510:3;4507:11;4504:446;;;4551:1;4575:5;4572:1;4565:16;4619:4;4616:1;4606:18;4689:2;4677:10;4673:19;4670:1;4666:27;4660:4;4656:38;4725:4;4713:10;4710:20;4707:47;;;-1:-1:-1;4748:4:10;4707:47;4803:2;4798:3;4794:12;4791:1;4787:20;4781:4;4777:31;4767:41;;4858:82;4876:2;4869:5;4866:13;4858:82;;;4921:17;;;4902:1;4891:13;4858:82;;;4862:3;;;4413:543;;;:::o;5132:1345::-;5252:10;;-1:-1:-1;;;;;5274:30:10;;5271:56;;;5307:18;;:::i;:::-;5336:97;5426:6;5386:38;5418:4;5412:11;5386:38;:::i;:::-;5380:4;5336:97;:::i;:::-;5488:4;;5545:2;5534:14;;5562:1;5557:663;;;;6264:1;6281:6;6278:89;;;-1:-1:-1;6333:19:10;;;6327:26;6278:89;-1:-1:-1;;5089:1:10;5085:11;;;5081:24;5077:29;5067:40;5113:1;5109:11;;;5064:57;6380:81;;5527:944;;5557:663;4360:1;4353:14;;;4397:4;4384:18;;-1:-1:-1;;5593:20:10;;;5711:236;5725:7;5722:1;5719:14;5711:236;;;5814:19;;;5808:26;5793:42;;5906:27;;;;5874:1;5862:14;;;;5741:19;;5711:236;;;5715:3;5975:6;5966:7;5963:19;5960:201;;;6036:19;;;6030:26;-1:-1:-1;;6119:1:10;6115:14;;;6131:3;6111:24;6107:37;6103:42;6088:58;6073:74;;5960:201;-1:-1:-1;;;;;6207:1:10;6191:14;;;6187:22;6174:36;;-1:-1:-1;5132:1345:10:o;6735:125::-;6800:9;;;6821:10;;;6818:36;;;6834:18;;:::i;7215:177::-;236:1207:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_690": {
									"entryPoint": 1105,
									"id": 690,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_750": {
									"entryPoint": 1720,
									"id": 750,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_burn_672": {
									"entryPoint": 1666,
									"id": 672,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 1344,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_mint_639": {
									"entryPoint": 1471,
									"id": 639,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_949": {
									"entryPoint": null,
									"id": 949,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_1067": {
									"entryPoint": 1605,
									"id": 1067,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_1038": {
									"entryPoint": 1979,
									"id": 1038,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_1051": {
									"entryPoint": 1944,
									"id": 1051,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_spendAllowance_798": {
									"entryPoint": 1123,
									"id": 798,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 1525,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_529": {
									"entryPoint": 1249,
									"id": 529,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_unpause_1083": {
									"entryPoint": 1389,
									"id": 1083,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_update_1176": {
									"entryPoint": 2015,
									"id": 1176,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_1307": {
									"entryPoint": 1933,
									"id": 1307,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_606": {
									"entryPoint": null,
									"id": 606,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_910": {
									"entryPoint": 2149,
									"id": 910,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_426": {
									"entryPoint": null,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_450": {
									"entryPoint": 855,
									"id": 450,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_385": {
									"entryPoint": null,
									"id": 385,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burn_1268": {
									"entryPoint": 1006,
									"id": 1268,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@cap_1124": {
									"entryPoint": null,
									"id": 1124,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decimals_1238": {
									"entryPoint": null,
									"id": 1238,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getDecimals_1315": {
									"entryPoint": null,
									"id": 1315,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@mint_1253": {
									"entryPoint": 935,
									"id": 1253,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_345": {
									"entryPoint": 709,
									"id": 345,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_1277": {
									"entryPoint": 975,
									"id": 1277,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_1026": {
									"entryPoint": null,
									"id": 1026,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 957,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_354": {
									"entryPoint": 991,
									"id": 354,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_372": {
									"entryPoint": null,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_482": {
									"entryPoint": 881,
									"id": 482,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 1038,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_409": {
									"entryPoint": 1024,
									"id": 409,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@unpause_1286": {
									"entryPoint": 917,
									"id": 1286,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 2540,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2670,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2704,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2610,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2568,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2461,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2813,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2755,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:3776:10",
										"nodeType": "YulBlock",
										"src": "0:3776:10",
										"statements": [
											{
												"nativeSrc": "6:3:10",
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "135:427:10",
													"nodeType": "YulBlock",
													"src": "135:427:10",
													"statements": [
														{
															"nativeSrc": "145:12:10",
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:10",
															"value": {
																"kind": "number",
																"nativeSrc": "155:2:10",
																"nodeType": "YulLiteral",
																"src": "155:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "149:2:10",
																	"nodeType": "YulTypedName",
																	"src": "149:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "173:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "184:2:10",
																		"nodeType": "YulLiteral",
																		"src": "184:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "166:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:10"
																},
																"nativeSrc": "166:21:10",
																"nodeType": "YulFunctionCall",
																"src": "166:21:10"
															},
															"nativeSrc": "166:21:10",
															"nodeType": "YulExpressionStatement",
															"src": "166:21:10"
														},
														{
															"nativeSrc": "196:27:10",
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "216:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "210:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:10"
																},
																"nativeSrc": "210:13:10",
																"nodeType": "YulFunctionCall",
																"src": "210:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "200:6:10",
																	"nodeType": "YulTypedName",
																	"src": "200:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "243:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "254:2:10",
																				"nodeType": "YulLiteral",
																				"src": "254:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "239:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:10"
																		},
																		"nativeSrc": "239:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "259:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "232:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:10"
																},
																"nativeSrc": "232:34:10",
																"nodeType": "YulFunctionCall",
																"src": "232:34:10"
															},
															"nativeSrc": "232:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "232:34:10"
														},
														{
															"nativeSrc": "275:10:10",
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:10",
															"value": {
																"kind": "number",
																"nativeSrc": "284:1:10",
																"nodeType": "YulLiteral",
																"src": "284:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "279:1:10",
																	"nodeType": "YulTypedName",
																	"src": "279:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "344:90:10",
																"nodeType": "YulBlock",
																"src": "344:90:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nativeSrc": "373:9:10",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:10"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "384:1:10",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "369:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:10"
																							},
																							"nativeSrc": "369:17:10",
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:10"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "388:2:10",
																							"nodeType": "YulLiteral",
																							"src": "388:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "365:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:10"
																					},
																					"nativeSrc": "365:26:10",
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nativeSrc": "407:6:10",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:10"
																										},
																										{
																											"name": "i",
																											"nativeSrc": "415:1:10",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nativeSrc": "403:3:10",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:10"
																									},
																									"nativeSrc": "403:14:10",
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:10"
																								},
																								{
																									"name": "_1",
																									"nativeSrc": "419:2:10",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "399:3:10",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:10"
																							},
																							"nativeSrc": "399:23:10",
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "393:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:10"
																					},
																					"nativeSrc": "393:30:10",
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "358:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:10"
																			},
																			"nativeSrc": "358:66:10",
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:10"
																		},
																		"nativeSrc": "358:66:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "305:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "308:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "302:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:10"
																},
																"nativeSrc": "302:13:10",
																"nodeType": "YulFunctionCall",
																"src": "302:13:10"
															},
															"nativeSrc": "294:140:10",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "316:19:10",
																"nodeType": "YulBlock",
																"src": "316:19:10",
																"statements": [
																	{
																		"nativeSrc": "318:15:10",
																		"nodeType": "YulAssignment",
																		"src": "318:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "327:1:10",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:10"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "330:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "323:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:10"
																			},
																			"nativeSrc": "323:10:10",
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "318:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "298:3:10",
																"nodeType": "YulBlock",
																"src": "298:3:10",
																"statements": []
															},
															"src": "294:140:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "458:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "458:9:10"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "469:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "469:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "454:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "454:3:10"
																				},
																				"nativeSrc": "454:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "454:22:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "478:2:10",
																				"nodeType": "YulLiteral",
																				"src": "478:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "450:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "450:3:10"
																		},
																		"nativeSrc": "450:31:10",
																		"nodeType": "YulFunctionCall",
																		"src": "450:31:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "483:1:10",
																		"nodeType": "YulLiteral",
																		"src": "483:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "443:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "443:6:10"
																},
																"nativeSrc": "443:42:10",
																"nodeType": "YulFunctionCall",
																"src": "443:42:10"
															},
															"nativeSrc": "443:42:10",
															"nodeType": "YulExpressionStatement",
															"src": "443:42:10"
														},
														{
															"nativeSrc": "494:62:10",
															"nodeType": "YulAssignment",
															"src": "494:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "510:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "529:6:10",
																								"nodeType": "YulIdentifier",
																								"src": "529:6:10"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "537:2:10",
																								"nodeType": "YulLiteral",
																								"src": "537:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "525:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "525:3:10"
																						},
																						"nativeSrc": "525:15:10",
																						"nodeType": "YulFunctionCall",
																						"src": "525:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "546:2:10",
																								"nodeType": "YulLiteral",
																								"src": "546:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "542:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "542:3:10"
																						},
																						"nativeSrc": "542:7:10",
																						"nodeType": "YulFunctionCall",
																						"src": "542:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "521:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "521:3:10"
																				},
																				"nativeSrc": "521:29:10",
																				"nodeType": "YulFunctionCall",
																				"src": "521:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "506:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "506:3:10"
																		},
																		"nativeSrc": "506:45:10",
																		"nodeType": "YulFunctionCall",
																		"src": "506:45:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "553:2:10",
																		"nodeType": "YulLiteral",
																		"src": "553:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "502:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:10"
																},
																"nativeSrc": "502:54:10",
																"nodeType": "YulFunctionCall",
																"src": "502:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "494:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "14:548:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "104:9:10",
														"nodeType": "YulTypedName",
														"src": "104:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "115:6:10",
														"nodeType": "YulTypedName",
														"src": "115:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "126:4:10",
														"nodeType": "YulTypedName",
														"src": "126:4:10",
														"type": ""
													}
												],
												"src": "14:548:10"
											},
											{
												"body": {
													"nativeSrc": "616:124:10",
													"nodeType": "YulBlock",
													"src": "616:124:10",
													"statements": [
														{
															"nativeSrc": "626:29:10",
															"nodeType": "YulAssignment",
															"src": "626:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "648:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "648:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "635:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "635:12:10"
																},
																"nativeSrc": "635:20:10",
																"nodeType": "YulFunctionCall",
																"src": "635:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "626:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "626:5:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "718:16:10",
																"nodeType": "YulBlock",
																"src": "718:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "727:1:10",
																					"nodeType": "YulLiteral",
																					"src": "727:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "730:1:10",
																					"nodeType": "YulLiteral",
																					"src": "730:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "720:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "720:6:10"
																			},
																			"nativeSrc": "720:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "720:12:10"
																		},
																		"nativeSrc": "720:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "720:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "677:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "677:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "688:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "688:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "703:3:10",
																										"nodeType": "YulLiteral",
																										"src": "703:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "708:1:10",
																										"nodeType": "YulLiteral",
																										"src": "708:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "699:3:10",
																									"nodeType": "YulIdentifier",
																									"src": "699:3:10"
																								},
																								"nativeSrc": "699:11:10",
																								"nodeType": "YulFunctionCall",
																								"src": "699:11:10"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "712:1:10",
																								"nodeType": "YulLiteral",
																								"src": "712:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "695:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "695:3:10"
																						},
																						"nativeSrc": "695:19:10",
																						"nodeType": "YulFunctionCall",
																						"src": "695:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "684:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "684:3:10"
																				},
																				"nativeSrc": "684:31:10",
																				"nodeType": "YulFunctionCall",
																				"src": "684:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "674:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "674:2:10"
																		},
																		"nativeSrc": "674:42:10",
																		"nodeType": "YulFunctionCall",
																		"src": "674:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "667:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "667:6:10"
																},
																"nativeSrc": "667:50:10",
																"nodeType": "YulFunctionCall",
																"src": "667:50:10"
															},
															"nativeSrc": "664:70:10",
															"nodeType": "YulIf",
															"src": "664:70:10"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "567:173:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "595:6:10",
														"nodeType": "YulTypedName",
														"src": "595:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "606:5:10",
														"nodeType": "YulTypedName",
														"src": "606:5:10",
														"type": ""
													}
												],
												"src": "567:173:10"
											},
											{
												"body": {
													"nativeSrc": "832:167:10",
													"nodeType": "YulBlock",
													"src": "832:167:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "878:16:10",
																"nodeType": "YulBlock",
																"src": "878:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "887:1:10",
																					"nodeType": "YulLiteral",
																					"src": "887:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "890:1:10",
																					"nodeType": "YulLiteral",
																					"src": "890:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "880:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "880:6:10"
																			},
																			"nativeSrc": "880:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "880:12:10"
																		},
																		"nativeSrc": "880:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "880:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "853:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "853:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "862:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "862:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "849:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "849:3:10"
																		},
																		"nativeSrc": "849:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "849:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "874:2:10",
																		"nodeType": "YulLiteral",
																		"src": "874:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "845:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "845:3:10"
																},
																"nativeSrc": "845:32:10",
																"nodeType": "YulFunctionCall",
																"src": "845:32:10"
															},
															"nativeSrc": "842:52:10",
															"nodeType": "YulIf",
															"src": "842:52:10"
														},
														{
															"nativeSrc": "903:39:10",
															"nodeType": "YulAssignment",
															"src": "903:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "932:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "932:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "913:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "913:18:10"
																},
																"nativeSrc": "913:29:10",
																"nodeType": "YulFunctionCall",
																"src": "913:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "903:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "903:6:10"
																}
															]
														},
														{
															"nativeSrc": "951:42:10",
															"nodeType": "YulAssignment",
															"src": "951:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "978:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "978:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "989:2:10",
																				"nodeType": "YulLiteral",
																				"src": "989:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "974:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "974:3:10"
																		},
																		"nativeSrc": "974:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "974:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "961:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "961:12:10"
																},
																"nativeSrc": "961:32:10",
																"nodeType": "YulFunctionCall",
																"src": "961:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "951:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "951:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "745:254:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "790:9:10",
														"nodeType": "YulTypedName",
														"src": "790:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "801:7:10",
														"nodeType": "YulTypedName",
														"src": "801:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "813:6:10",
														"nodeType": "YulTypedName",
														"src": "813:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "821:6:10",
														"nodeType": "YulTypedName",
														"src": "821:6:10",
														"type": ""
													}
												],
												"src": "745:254:10"
											},
											{
												"body": {
													"nativeSrc": "1099:92:10",
													"nodeType": "YulBlock",
													"src": "1099:92:10",
													"statements": [
														{
															"nativeSrc": "1109:26:10",
															"nodeType": "YulAssignment",
															"src": "1109:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1121:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1121:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1132:2:10",
																		"nodeType": "YulLiteral",
																		"src": "1132:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1117:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1117:3:10"
																},
																"nativeSrc": "1117:18:10",
																"nodeType": "YulFunctionCall",
																"src": "1117:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1109:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "1109:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1151:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1151:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1176:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "1176:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1169:6:10",
																					"nodeType": "YulIdentifier",
																					"src": "1169:6:10"
																				},
																				"nativeSrc": "1169:14:10",
																				"nodeType": "YulFunctionCall",
																				"src": "1169:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1162:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "1162:6:10"
																		},
																		"nativeSrc": "1162:22:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1162:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1144:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1144:6:10"
																},
																"nativeSrc": "1144:41:10",
																"nodeType": "YulFunctionCall",
																"src": "1144:41:10"
															},
															"nativeSrc": "1144:41:10",
															"nodeType": "YulExpressionStatement",
															"src": "1144:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1004:187:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1068:9:10",
														"nodeType": "YulTypedName",
														"src": "1068:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1079:6:10",
														"nodeType": "YulTypedName",
														"src": "1079:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1090:4:10",
														"nodeType": "YulTypedName",
														"src": "1090:4:10",
														"type": ""
													}
												],
												"src": "1004:187:10"
											},
											{
												"body": {
													"nativeSrc": "1297:76:10",
													"nodeType": "YulBlock",
													"src": "1297:76:10",
													"statements": [
														{
															"nativeSrc": "1307:26:10",
															"nodeType": "YulAssignment",
															"src": "1307:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1319:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1319:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1330:2:10",
																		"nodeType": "YulLiteral",
																		"src": "1330:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1315:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1315:3:10"
																},
																"nativeSrc": "1315:18:10",
																"nodeType": "YulFunctionCall",
																"src": "1315:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1307:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "1307:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1349:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1349:9:10"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1360:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "1360:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1342:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1342:6:10"
																},
																"nativeSrc": "1342:25:10",
																"nodeType": "YulFunctionCall",
																"src": "1342:25:10"
															},
															"nativeSrc": "1342:25:10",
															"nodeType": "YulExpressionStatement",
															"src": "1342:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1196:177:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1266:9:10",
														"nodeType": "YulTypedName",
														"src": "1266:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1277:6:10",
														"nodeType": "YulTypedName",
														"src": "1277:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1288:4:10",
														"nodeType": "YulTypedName",
														"src": "1288:4:10",
														"type": ""
													}
												],
												"src": "1196:177:10"
											},
											{
												"body": {
													"nativeSrc": "1482:224:10",
													"nodeType": "YulBlock",
													"src": "1482:224:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "1528:16:10",
																"nodeType": "YulBlock",
																"src": "1528:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1537:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1537:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1540:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1540:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1530:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1530:6:10"
																			},
																			"nativeSrc": "1530:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1530:12:10"
																		},
																		"nativeSrc": "1530:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1530:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1503:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "1503:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1512:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1512:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1499:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1499:3:10"
																		},
																		"nativeSrc": "1499:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1499:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1524:2:10",
																		"nodeType": "YulLiteral",
																		"src": "1524:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1495:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1495:3:10"
																},
																"nativeSrc": "1495:32:10",
																"nodeType": "YulFunctionCall",
																"src": "1495:32:10"
															},
															"nativeSrc": "1492:52:10",
															"nodeType": "YulIf",
															"src": "1492:52:10"
														},
														{
															"nativeSrc": "1553:39:10",
															"nodeType": "YulAssignment",
															"src": "1553:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1582:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1582:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1563:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "1563:18:10"
																},
																"nativeSrc": "1563:29:10",
																"nodeType": "YulFunctionCall",
																"src": "1563:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1553:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1553:6:10"
																}
															]
														},
														{
															"nativeSrc": "1601:48:10",
															"nodeType": "YulAssignment",
															"src": "1601:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1634:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1634:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1645:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1645:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1630:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1630:3:10"
																		},
																		"nativeSrc": "1630:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1630:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1611:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "1611:18:10"
																},
																"nativeSrc": "1611:38:10",
																"nodeType": "YulFunctionCall",
																"src": "1611:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1601:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1601:6:10"
																}
															]
														},
														{
															"nativeSrc": "1658:42:10",
															"nodeType": "YulAssignment",
															"src": "1658:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1685:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "1685:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1696:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1696:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1681:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1681:3:10"
																		},
																		"nativeSrc": "1681:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1681:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1668:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "1668:12:10"
																},
																"nativeSrc": "1668:32:10",
																"nodeType": "YulFunctionCall",
																"src": "1668:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1658:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1658:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1378:328:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1432:9:10",
														"nodeType": "YulTypedName",
														"src": "1432:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1443:7:10",
														"nodeType": "YulTypedName",
														"src": "1443:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1455:6:10",
														"nodeType": "YulTypedName",
														"src": "1455:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1463:6:10",
														"nodeType": "YulTypedName",
														"src": "1463:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1471:6:10",
														"nodeType": "YulTypedName",
														"src": "1471:6:10",
														"type": ""
													}
												],
												"src": "1378:328:10"
											},
											{
												"body": {
													"nativeSrc": "1808:87:10",
													"nodeType": "YulBlock",
													"src": "1808:87:10",
													"statements": [
														{
															"nativeSrc": "1818:26:10",
															"nodeType": "YulAssignment",
															"src": "1818:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1830:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1830:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1841:2:10",
																		"nodeType": "YulLiteral",
																		"src": "1841:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1826:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1826:3:10"
																},
																"nativeSrc": "1826:18:10",
																"nodeType": "YulFunctionCall",
																"src": "1826:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1818:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "1818:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1860:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "1860:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1875:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1875:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1883:4:10",
																				"nodeType": "YulLiteral",
																				"src": "1883:4:10",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1871:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1871:3:10"
																		},
																		"nativeSrc": "1871:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1871:17:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1853:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:10"
																},
																"nativeSrc": "1853:36:10",
																"nodeType": "YulFunctionCall",
																"src": "1853:36:10"
															},
															"nativeSrc": "1853:36:10",
															"nodeType": "YulExpressionStatement",
															"src": "1853:36:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1711:184:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1777:9:10",
														"nodeType": "YulTypedName",
														"src": "1777:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1788:6:10",
														"nodeType": "YulTypedName",
														"src": "1788:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1799:4:10",
														"nodeType": "YulTypedName",
														"src": "1799:4:10",
														"type": ""
													}
												],
												"src": "1711:184:10"
											},
											{
												"body": {
													"nativeSrc": "1970:116:10",
													"nodeType": "YulBlock",
													"src": "1970:116:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "2016:16:10",
																"nodeType": "YulBlock",
																"src": "2016:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2025:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2025:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2028:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2028:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2018:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2018:6:10"
																			},
																			"nativeSrc": "2018:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2018:12:10"
																		},
																		"nativeSrc": "2018:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2018:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1991:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "1991:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2000:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "2000:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1987:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1987:3:10"
																		},
																		"nativeSrc": "1987:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1987:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2012:2:10",
																		"nodeType": "YulLiteral",
																		"src": "2012:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1983:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1983:3:10"
																},
																"nativeSrc": "1983:32:10",
																"nodeType": "YulFunctionCall",
																"src": "1983:32:10"
															},
															"nativeSrc": "1980:52:10",
															"nodeType": "YulIf",
															"src": "1980:52:10"
														},
														{
															"nativeSrc": "2041:39:10",
															"nodeType": "YulAssignment",
															"src": "2041:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2070:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "2070:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2051:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "2051:18:10"
																},
																"nativeSrc": "2051:29:10",
																"nodeType": "YulFunctionCall",
																"src": "2051:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2041:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2041:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "1900:186:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1936:9:10",
														"nodeType": "YulTypedName",
														"src": "1936:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1947:7:10",
														"nodeType": "YulTypedName",
														"src": "1947:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1959:6:10",
														"nodeType": "YulTypedName",
														"src": "1959:6:10",
														"type": ""
													}
												],
												"src": "1900:186:10"
											},
											{
												"body": {
													"nativeSrc": "2192:102:10",
													"nodeType": "YulBlock",
													"src": "2192:102:10",
													"statements": [
														{
															"nativeSrc": "2202:26:10",
															"nodeType": "YulAssignment",
															"src": "2202:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2214:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "2214:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2225:2:10",
																		"nodeType": "YulLiteral",
																		"src": "2225:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2210:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "2210:3:10"
																},
																"nativeSrc": "2210:18:10",
																"nodeType": "YulFunctionCall",
																"src": "2210:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2202:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "2202:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2244:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "2244:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2259:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2259:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2275:3:10",
																								"nodeType": "YulLiteral",
																								"src": "2275:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2280:1:10",
																								"nodeType": "YulLiteral",
																								"src": "2280:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2271:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "2271:3:10"
																						},
																						"nativeSrc": "2271:11:10",
																						"nodeType": "YulFunctionCall",
																						"src": "2271:11:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2284:1:10",
																						"nodeType": "YulLiteral",
																						"src": "2284:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2267:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "2267:3:10"
																				},
																				"nativeSrc": "2267:19:10",
																				"nodeType": "YulFunctionCall",
																				"src": "2267:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2255:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2255:3:10"
																		},
																		"nativeSrc": "2255:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2255:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2237:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2237:6:10"
																},
																"nativeSrc": "2237:51:10",
																"nodeType": "YulFunctionCall",
																"src": "2237:51:10"
															},
															"nativeSrc": "2237:51:10",
															"nodeType": "YulExpressionStatement",
															"src": "2237:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2091:203:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2161:9:10",
														"nodeType": "YulTypedName",
														"src": "2161:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2172:6:10",
														"nodeType": "YulTypedName",
														"src": "2172:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2183:4:10",
														"nodeType": "YulTypedName",
														"src": "2183:4:10",
														"type": ""
													}
												],
												"src": "2091:203:10"
											},
											{
												"body": {
													"nativeSrc": "2386:173:10",
													"nodeType": "YulBlock",
													"src": "2386:173:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "2432:16:10",
																"nodeType": "YulBlock",
																"src": "2432:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2441:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2441:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2444:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2444:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2434:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2434:6:10"
																			},
																			"nativeSrc": "2434:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2434:12:10"
																		},
																		"nativeSrc": "2434:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2434:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2407:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "2407:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2416:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "2416:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2403:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2403:3:10"
																		},
																		"nativeSrc": "2403:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2403:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2428:2:10",
																		"nodeType": "YulLiteral",
																		"src": "2428:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2399:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "2399:3:10"
																},
																"nativeSrc": "2399:32:10",
																"nodeType": "YulFunctionCall",
																"src": "2399:32:10"
															},
															"nativeSrc": "2396:52:10",
															"nodeType": "YulIf",
															"src": "2396:52:10"
														},
														{
															"nativeSrc": "2457:39:10",
															"nodeType": "YulAssignment",
															"src": "2457:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2486:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "2486:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2467:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "2467:18:10"
																},
																"nativeSrc": "2467:29:10",
																"nodeType": "YulFunctionCall",
																"src": "2467:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2457:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2457:6:10"
																}
															]
														},
														{
															"nativeSrc": "2505:48:10",
															"nodeType": "YulAssignment",
															"src": "2505:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2538:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "2538:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2549:2:10",
																				"nodeType": "YulLiteral",
																				"src": "2549:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2534:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2534:3:10"
																		},
																		"nativeSrc": "2534:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2534:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2515:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "2515:18:10"
																},
																"nativeSrc": "2515:38:10",
																"nodeType": "YulFunctionCall",
																"src": "2515:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "2505:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2505:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "2299:260:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2344:9:10",
														"nodeType": "YulTypedName",
														"src": "2344:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2355:7:10",
														"nodeType": "YulTypedName",
														"src": "2355:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2367:6:10",
														"nodeType": "YulTypedName",
														"src": "2367:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2375:6:10",
														"nodeType": "YulTypedName",
														"src": "2375:6:10",
														"type": ""
													}
												],
												"src": "2299:260:10"
											},
											{
												"body": {
													"nativeSrc": "2619:325:10",
													"nodeType": "YulBlock",
													"src": "2619:325:10",
													"statements": [
														{
															"nativeSrc": "2629:22:10",
															"nodeType": "YulAssignment",
															"src": "2629:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2643:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2643:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "2646:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "2646:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "2639:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "2639:3:10"
																},
																"nativeSrc": "2639:12:10",
																"nodeType": "YulFunctionCall",
																"src": "2639:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "2629:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2629:6:10"
																}
															]
														},
														{
															"nativeSrc": "2660:38:10",
															"nodeType": "YulVariableDeclaration",
															"src": "2660:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "2690:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "2690:4:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2696:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2696:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2686:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "2686:3:10"
																},
																"nativeSrc": "2686:12:10",
																"nodeType": "YulFunctionCall",
																"src": "2686:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "2664:18:10",
																	"nodeType": "YulTypedName",
																	"src": "2664:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2737:31:10",
																"nodeType": "YulBlock",
																"src": "2737:31:10",
																"statements": [
																	{
																		"nativeSrc": "2739:27:10",
																		"nodeType": "YulAssignment",
																		"src": "2739:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "2753:6:10",
																					"nodeType": "YulIdentifier",
																					"src": "2753:6:10"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2761:4:10",
																					"nodeType": "YulLiteral",
																					"src": "2761:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "2749:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2749:3:10"
																			},
																			"nativeSrc": "2749:17:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2749:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "2739:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2739:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2717:18:10",
																		"nodeType": "YulIdentifier",
																		"src": "2717:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2710:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2710:6:10"
																},
																"nativeSrc": "2710:26:10",
																"nodeType": "YulFunctionCall",
																"src": "2710:26:10"
															},
															"nativeSrc": "2707:61:10",
															"nodeType": "YulIf",
															"src": "2707:61:10"
														},
														{
															"body": {
																"nativeSrc": "2827:111:10",
																"nodeType": "YulBlock",
																"src": "2827:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2848:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2848:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2855:3:10",
																							"nodeType": "YulLiteral",
																							"src": "2855:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2860:10:10",
																							"nodeType": "YulLiteral",
																							"src": "2860:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "2851:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "2851:3:10"
																					},
																					"nativeSrc": "2851:20:10",
																					"nodeType": "YulFunctionCall",
																					"src": "2851:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2841:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2841:6:10"
																			},
																			"nativeSrc": "2841:31:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2841:31:10"
																		},
																		"nativeSrc": "2841:31:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2841:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2892:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2892:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2895:4:10",
																					"nodeType": "YulLiteral",
																					"src": "2895:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2885:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2885:6:10"
																			},
																			"nativeSrc": "2885:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2885:15:10"
																		},
																		"nativeSrc": "2885:15:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2885:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2920:1:10",
																					"nodeType": "YulLiteral",
																					"src": "2920:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2923:4:10",
																					"nodeType": "YulLiteral",
																					"src": "2923:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2913:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2913:6:10"
																			},
																			"nativeSrc": "2913:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2913:15:10"
																		},
																		"nativeSrc": "2913:15:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2913:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2783:18:10",
																		"nodeType": "YulIdentifier",
																		"src": "2783:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2806:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2806:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2814:2:10",
																				"nodeType": "YulLiteral",
																				"src": "2814:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "2803:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "2803:2:10"
																		},
																		"nativeSrc": "2803:14:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2803:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "2780:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "2780:2:10"
																},
																"nativeSrc": "2780:38:10",
																"nodeType": "YulFunctionCall",
																"src": "2780:38:10"
															},
															"nativeSrc": "2777:161:10",
															"nodeType": "YulIf",
															"src": "2777:161:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "2564:380:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "2599:4:10",
														"nodeType": "YulTypedName",
														"src": "2599:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "2608:6:10",
														"nodeType": "YulTypedName",
														"src": "2608:6:10",
														"type": ""
													}
												],
												"src": "2564:380:10"
											},
											{
												"body": {
													"nativeSrc": "3106:188:10",
													"nodeType": "YulBlock",
													"src": "3106:188:10",
													"statements": [
														{
															"nativeSrc": "3116:26:10",
															"nodeType": "YulAssignment",
															"src": "3116:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3128:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "3128:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3139:2:10",
																		"nodeType": "YulLiteral",
																		"src": "3139:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3124:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3124:3:10"
																},
																"nativeSrc": "3124:18:10",
																"nodeType": "YulFunctionCall",
																"src": "3124:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3116:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "3116:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3158:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "3158:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3173:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3173:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3189:3:10",
																								"nodeType": "YulLiteral",
																								"src": "3189:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3194:1:10",
																								"nodeType": "YulLiteral",
																								"src": "3194:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3185:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "3185:3:10"
																						},
																						"nativeSrc": "3185:11:10",
																						"nodeType": "YulFunctionCall",
																						"src": "3185:11:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3198:1:10",
																						"nodeType": "YulLiteral",
																						"src": "3198:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3181:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3181:3:10"
																				},
																				"nativeSrc": "3181:19:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3181:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3169:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3169:3:10"
																		},
																		"nativeSrc": "3169:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3169:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3151:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3151:6:10"
																},
																"nativeSrc": "3151:51:10",
																"nodeType": "YulFunctionCall",
																"src": "3151:51:10"
															},
															"nativeSrc": "3151:51:10",
															"nodeType": "YulExpressionStatement",
															"src": "3151:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3222:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "3222:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3233:2:10",
																				"nodeType": "YulLiteral",
																				"src": "3233:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3218:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3218:3:10"
																		},
																		"nativeSrc": "3218:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3218:18:10"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3238:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3238:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3211:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3211:6:10"
																},
																"nativeSrc": "3211:34:10",
																"nodeType": "YulFunctionCall",
																"src": "3211:34:10"
															},
															"nativeSrc": "3211:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "3211:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3265:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "3265:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3276:2:10",
																				"nodeType": "YulLiteral",
																				"src": "3276:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3261:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3261:3:10"
																		},
																		"nativeSrc": "3261:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3261:18:10"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "3281:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3281:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3254:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3254:6:10"
																},
																"nativeSrc": "3254:34:10",
																"nodeType": "YulFunctionCall",
																"src": "3254:34:10"
															},
															"nativeSrc": "3254:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "3254:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "2949:345:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3059:9:10",
														"nodeType": "YulTypedName",
														"src": "3059:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3070:6:10",
														"nodeType": "YulTypedName",
														"src": "3070:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3078:6:10",
														"nodeType": "YulTypedName",
														"src": "3078:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3086:6:10",
														"nodeType": "YulTypedName",
														"src": "3086:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3097:4:10",
														"nodeType": "YulTypedName",
														"src": "3097:4:10",
														"type": ""
													}
												],
												"src": "2949:345:10"
											},
											{
												"body": {
													"nativeSrc": "3428:119:10",
													"nodeType": "YulBlock",
													"src": "3428:119:10",
													"statements": [
														{
															"nativeSrc": "3438:26:10",
															"nodeType": "YulAssignment",
															"src": "3438:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3450:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "3450:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3461:2:10",
																		"nodeType": "YulLiteral",
																		"src": "3461:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3446:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3446:3:10"
																},
																"nativeSrc": "3446:18:10",
																"nodeType": "YulFunctionCall",
																"src": "3446:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3438:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "3438:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3480:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "3480:9:10"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "3491:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3491:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3473:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3473:6:10"
																},
																"nativeSrc": "3473:25:10",
																"nodeType": "YulFunctionCall",
																"src": "3473:25:10"
															},
															"nativeSrc": "3473:25:10",
															"nodeType": "YulExpressionStatement",
															"src": "3473:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3518:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "3518:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3529:2:10",
																				"nodeType": "YulLiteral",
																				"src": "3529:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3514:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3514:3:10"
																		},
																		"nativeSrc": "3514:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3514:18:10"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3534:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3534:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3507:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3507:6:10"
																},
																"nativeSrc": "3507:34:10",
																"nodeType": "YulFunctionCall",
																"src": "3507:34:10"
															},
															"nativeSrc": "3507:34:10",
															"nodeType": "YulExpressionStatement",
															"src": "3507:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "3299:248:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3389:9:10",
														"nodeType": "YulTypedName",
														"src": "3389:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3400:6:10",
														"nodeType": "YulTypedName",
														"src": "3400:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3408:6:10",
														"nodeType": "YulTypedName",
														"src": "3408:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3419:4:10",
														"nodeType": "YulTypedName",
														"src": "3419:4:10",
														"type": ""
													}
												],
												"src": "3299:248:10"
											},
											{
												"body": {
													"nativeSrc": "3600:174:10",
													"nodeType": "YulBlock",
													"src": "3600:174:10",
													"statements": [
														{
															"nativeSrc": "3610:16:10",
															"nodeType": "YulAssignment",
															"src": "3610:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3621:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "3621:1:10"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3624:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "3624:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3617:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3617:3:10"
																},
																"nativeSrc": "3617:9:10",
																"nodeType": "YulFunctionCall",
																"src": "3617:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "3610:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3610:3:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3657:111:10",
																"nodeType": "YulBlock",
																"src": "3657:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3678:1:10",
																					"nodeType": "YulLiteral",
																					"src": "3678:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "3685:3:10",
																							"nodeType": "YulLiteral",
																							"src": "3685:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3690:10:10",
																							"nodeType": "YulLiteral",
																							"src": "3690:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "3681:3:10",
																						"nodeType": "YulIdentifier",
																						"src": "3681:3:10"
																					},
																					"nativeSrc": "3681:20:10",
																					"nodeType": "YulFunctionCall",
																					"src": "3681:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3671:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3671:6:10"
																			},
																			"nativeSrc": "3671:31:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3671:31:10"
																		},
																		"nativeSrc": "3671:31:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3671:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3722:1:10",
																					"nodeType": "YulLiteral",
																					"src": "3722:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3725:4:10",
																					"nodeType": "YulLiteral",
																					"src": "3725:4:10",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3715:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3715:6:10"
																			},
																			"nativeSrc": "3715:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3715:15:10"
																		},
																		"nativeSrc": "3715:15:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3715:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3750:1:10",
																					"nodeType": "YulLiteral",
																					"src": "3750:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3753:4:10",
																					"nodeType": "YulLiteral",
																					"src": "3753:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3743:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3743:6:10"
																			},
																			"nativeSrc": "3743:15:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3743:15:10"
																		},
																		"nativeSrc": "3743:15:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3743:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3641:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "3641:1:10"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "3644:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "3644:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3638:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "3638:2:10"
																},
																"nativeSrc": "3638:10:10",
																"nodeType": "YulFunctionCall",
																"src": "3638:10:10"
															},
															"nativeSrc": "3635:133:10",
															"nodeType": "YulIf",
															"src": "3635:133:10"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "3552:222:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3583:1:10",
														"nodeType": "YulTypedName",
														"src": "3583:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3586:1:10",
														"nodeType": "YulTypedName",
														"src": "3586:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "3592:3:10",
														"nodeType": "YulTypedName",
														"src": "3592:3:10",
														"type": ""
													}
												],
												"src": "3552:222:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1092": [
									{
										"length": 32,
										"start": 427
									},
									{
										"length": 32,
										"start": 2028
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad5780639dc29fac116100715780639dc29fac14610253578063a9059cbb14610266578063dd62ed3e14610279578063f0141d841461018c578063f2fde38b146102b257600080fd5b806370a08231146101f7578063715018a6146102205780638456cb59146102285780638da5cb5b1461023057806395d89b411461024b57600080fd5b8063313ce567116100f4578063313ce5671461018c578063355274ea146101a95780633f4ba83a146101cf57806340c10f19146101d95780635c975abb146101ec57600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e6102c5565b60405161013b919061099d565b60405180910390f35b610157610152366004610a08565b610357565b604051901515815260200161013b565b6003545b60405190815260200161013b565b610157610187366004610a32565b610371565b600654610100900460ff1660405160ff909116815260200161013b565b7f000000000000000000000000000000000000000000000000000000000000000061016b565b6101d7610395565b005b6101d76101e7366004610a08565b6103a7565b60065460ff16610157565b61016b610205366004610a6e565b6001600160a01b031660009081526001602052604090205490565b6101d76103bd565b6101d76103cf565b6000546040516001600160a01b03909116815260200161013b565b61012e6103df565b6101d7610261366004610a08565b6103ee565b610157610274366004610a08565b610400565b61016b610287366004610a90565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6101d76102c0366004610a6e565b61040e565b6060600480546102d490610ac3565b80601f016020809104026020016040519081016040528092919081815260200182805461030090610ac3565b801561034d5780601f106103225761010080835404028352916020019161034d565b820191906000526020600020905b81548152906001019060200180831161033057829003601f168201915b5050505050905090565b600033610365818585610451565b60019150505b92915050565b60003361037f858285610463565b61038a8585856104e1565b506001949350505050565b61039d610540565b6103a561056d565b565b6103af610540565b6103b982826105bf565b5050565b6103c5610540565b6103a560006105f5565b6103d7610540565b6103a5610645565b6060600580546102d490610ac3565b6103f6610540565b6103b98282610682565b6000336103658185856104e1565b610416610540565b6001600160a01b03811661044557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61044e816105f5565b50565b61045e83838360016106b8565b505050565b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981146104db57818110156104cc57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161043c565b6104db848484840360006106b8565b50505050565b6001600160a01b03831661050b57604051634b637e8f60e11b81526000600482015260240161043c565b6001600160a01b0382166105355760405163ec442f0560e01b81526000600482015260240161043c565b61045e83838361078d565b6000546001600160a01b031633146103a55760405163118cdaa760e01b815233600482015260240161043c565b610575610798565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166105e95760405163ec442f0560e01b81526000600482015260240161043c565b6103b96000838361078d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61064d6107bb565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586105a23390565b6001600160a01b0382166106ac57604051634b637e8f60e11b81526000600482015260240161043c565b6103b98260008361078d565b6001600160a01b0384166106e25760405163e602df0560e01b81526000600482015260240161043c565b6001600160a01b03831661070c57604051634a1406b160e11b81526000600482015260240161043c565b6001600160a01b03808516600090815260026020908152604080832093871683529290522082905580156104db57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161077f91815260200190565b60405180910390a350505050565b61045e8383836107df565b60065460ff166103a557604051638dfc202b60e01b815260040160405180910390fd5b60065460ff16156103a55760405163d93c066560e01b815260040160405180910390fd5b6107ea838383610865565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03841615801561082157508015155b156104db57600061083160035490565b90508181111561085e5760405163279e7e1560e21b8152600481018290526024810183905260440161043c565b5050505050565b61086d6107bb565b61045e8383836001600160a01b03831661089e5780600360008282546108939190610afd565b909155506109109050565b6001600160a01b038316600090815260016020526040902054818110156108f15760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161043c565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b03821661092c5760038054829003905561094b565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161099091815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156109cb578581018301518582016040015282016109af565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a0357600080fd5b919050565b60008060408385031215610a1b57600080fd5b610a24836109ec565b946020939093013593505050565b600080600060608486031215610a4757600080fd5b610a50846109ec565b9250610a5e602085016109ec565b9150604084013590509250925092565b600060208284031215610a8057600080fd5b610a89826109ec565b9392505050565b60008060408385031215610aa357600080fd5b610aac836109ec565b9150610aba602084016109ec565b90509250929050565b600181811c90821680610ad757607f821691505b602082108103610af757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561036b57634e487b7160e01b600052601160045260246000fdfea264697066735822122062a7257fd7784ce74b4c50822593c23e469ecd794ff312e75aa1e7b59b76d28764736f6c63430008180033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0x9DC29FAC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xF0141D84 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x99D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x157 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xA32 JUMP JUMPDEST PUSH2 0x371 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH32 0x0 PUSH2 0x16B JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x395 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D7 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x157 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x3BD JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x12E PUSH2 0x3DF JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x261 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x157 PUSH2 0x274 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6E JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2D4 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x300 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x34D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x322 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x34D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x330 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x365 DUP2 DUP6 DUP6 PUSH2 0x451 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x37F DUP6 DUP3 DUP6 PUSH2 0x463 JUMP JUMPDEST PUSH2 0x38A DUP6 DUP6 DUP6 PUSH2 0x4E1 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x39D PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3A5 PUSH2 0x56D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3AF PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3B9 DUP3 DUP3 PUSH2 0x5BF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3A5 PUSH1 0x0 PUSH2 0x5F5 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3A5 PUSH2 0x645 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x2D4 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x3B9 DUP3 DUP3 PUSH2 0x682 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x365 DUP2 DUP6 DUP6 PUSH2 0x4E1 JUMP JUMPDEST PUSH2 0x416 PUSH2 0x540 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x445 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x44E DUP2 PUSH2 0x5F5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x6B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4DB JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x4DB DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x6B8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x50B JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x575 PUSH2 0x798 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x3B9 PUSH1 0x0 DUP4 DUP4 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x64D PUSH2 0x7BB JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x5A2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH2 0x3B9 DUP3 PUSH1 0x0 DUP4 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x70C JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4DB JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x77F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH2 0x7DF JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7EA DUP4 DUP4 DUP4 PUSH2 0x865 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO PUSH2 0x821 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 PUSH2 0x831 PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x85E JUMPI PUSH1 0x40 MLOAD PUSH4 0x279E7E15 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x43C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x86D PUSH2 0x7BB JUMP JUMPDEST PUSH2 0x45E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x89E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x893 SWAP2 SWAP1 PUSH2 0xAFD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x910 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x92C JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x94B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x990 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9CB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x9AF JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA24 DUP4 PUSH2 0x9EC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA50 DUP5 PUSH2 0x9EC JUMP JUMPDEST SWAP3 POP PUSH2 0xA5E PUSH1 0x20 DUP6 ADD PUSH2 0x9EC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA89 DUP3 PUSH2 0x9EC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAAC DUP4 PUSH2 0x9EC JUMP JUMPDEST SWAP2 POP PUSH2 0xABA PUSH1 0x20 DUP5 ADD PUSH2 0x9EC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xAD7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xAF7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0xA7257F 0xD7 PUSH25 0x4CE74B4C50822593C23E469ECD794FF312E75AA1E7B59B76D2 DUP8 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ",
							"sourceMap": "236:1207:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:10;;1162:22;1144:41;;1132:2;1117:18;4293:186:2;1004:187:10;3144:97:2;3222:12;;3144:97;;;1342:25:10;;;1330:2;1315:18;3144:97:2;1196:177:10;5039:244:2;;;;;;:::i;:::-;;:::i;707:88:9:-;782:5;;;;;;;707:88;;1883:4:10;1871:17;;;1853:36;;1841:2;1826:18;707:88:9;1711:184:10;903:83:8;974:4;903:83;;1088:65:9;;;:::i;:::-;;803:95;;;;;;:::i;:::-;;:::i;1850:84:7:-;1920:7;;;;1850:84;;3299:116:2;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:2;3364:7;3390:18;;;:9;:18;;;;;;;3299:116;2293:101:0;;;:::i;1019:61:9:-;;;:::i;1638:85:0:-;1684:7;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:0;;;2237:51:10;;2225:2;2210:18;1638:85:0;2091:203:10;2276:93:2;;;:::i;906:105:9:-;;;;;;:::i;:::-;;:::i;3610:178:2:-;;;;;;:::i;:::-;;:::i;3846:140::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:2;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2543:215:0;;;;;;:::i;:::-;;:::i;2074:89:2:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:6;4420:31:2;735:10:6;4436:7:2;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:6;5182:37:2;5198:4;735:10:6;5213:5:2;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:2;;5039:244;-1:-1:-1;;;;5039:244:2:o;1088:65:9:-;1531:13:0;:11;:13::i;:::-;1135:10:9::1;:8;:10::i;:::-;1088:65::o:0;803:95::-;1531:13:0;:11;:13::i;:::-;873:17:9::1;879:2;883:6;873:5;:17::i;:::-;803:95:::0;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;1019:61:9:-:0;1531:13:0;:11;:13::i;:::-;1064:8:9::1;:6;:8::i;2276:93:2:-:0;2323:13;2355:7;2348:14;;;;;:::i;906:105:9:-;1531:13:0;:11;:13::i;:::-;981:22:9::1;987:7;996:6;981:5;:22::i;3610:178:2:-:0;3679:4;735:10:6;3733:27:2;735:10:6;3750:2:2;3754:5;3733:9;:27::i;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;2237:51:10::0;2210:18;;2672:31:0::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;8989:128:2:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:2;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:2;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:2;;-1:-1:-1;;;;;3169:32:10;;10936:60:2;;;3151:51:10;3218:18;;;3211:34;;;3261:18;;;3254:34;;;3124:18;;10936:60:2;2949:345:10;10881:130:2;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:2;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:2;;5807:1;5780:30;;;2237:51:10;2210:18;;5780:30:2;2091:203:10;5735:86:2;-1:-1:-1;;;;;5834:16:2;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:2;;5902:1;5873:32;;;2237:51:10;2210:18;;5873:32:2;2091:203:10;5830:86:2;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:6;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:6;1901:40:0;;;2237:51:10;2210:18;;1901:40:0;2091:203:10;2710:117:7;1721:16;:14;:16::i;:::-;2768:7:::1;:15:::0;;-1:-1:-1;;2768:15:7::1;::::0;;2798:22:::1;735:10:6::0;2807:12:7::1;2798:22;::::0;-1:-1:-1;;;;;2255:32:10;;;2237:51;;2225:2;2210:18;2798:22:7::1;;;;;;;2710:117::o:0;7721:208:2:-;-1:-1:-1;;;;;7791:21:2;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:2;;7864:1;7835:32;;;2237:51:10;2210:18;;7835:32:2;2091:203:10;7787:91:2;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;2912:187:0:-;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;2463:115:7:-;1474:19;:17;:19::i;:::-;2522:7:::1;:14:::0;;-1:-1:-1;;2522:14:7::1;2532:4;2522:14;::::0;;2551:20:::1;2558:12;735:10:6::0;;656:96;8247:206:2;-1:-1:-1;;;;;8317:21:2;;8313:89;;8361:30;;-1:-1:-1;;;8361:30:2;;8388:1;8361:30;;;2237:51:10;2210:18;;8361:30:2;2091:203:10;8313:89:2;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;9949:432::-;-1:-1:-1;;;;;10061:19:2;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:2;;10132:1;10103:32;;;2237:51:10;2210:18;;10103:32:2;2091:203:10;10057:89:2;-1:-1:-1;;;;;10159:21:2;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:2;;10231:1;10203:31;;;2237:51:10;2210:18;;10203:31:2;2091:203:10;10155:90:2;-1:-1:-1;;;;;10254:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:2;10342:5;-1:-1:-1;;;;;10333:31:2;;10358:5;10333:31;;;;1342:25:10;;1330:2;1315:18;;1196:177;10333:31:2;;;;;;;;9949:432;;;;:::o;1161:187:9:-;1310:30;1324:4;1330:2;1334:5;1310:13;:30::i;2202:126:7:-;1920:7;;;;2260:62;;2296:15;;-1:-1:-1;;;2296:15:7;;;;;;;;;;;2002:128;1920:7;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:7;;;;;;;;;;;1046:407:8;1141:30;1155:4;1161:2;1165:5;1141:13;:30::i;:::-;974:4;-1:-1:-1;;;;;1222:18:8;;;:36;;;;-1:-1:-1;1244:14:8;;;1222:36;1218:228;;;1289:14;1306:13;3222:12:2;;;3144:97;1306:13:8;1289:30;;1347:9;1338:6;:18;1334:101;;;1384:35;;-1:-1:-1;;;1384:35:8;;;;;3473:25:10;;;3514:18;;;3507:34;;;3446:18;;1384:35:8;3299:248:10;1334:101:8;1260:186;1130:323;1046:407;;;:::o;1112:145:4:-;1474:19:7;:17;:19::i;:::-;1220:30:4::1;1234:4;1240:2;1244:5;-1:-1:-1::0;;;;;6360:18:2;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:2;;-1:-1:-1;6356:540:2;;-1:-1:-1;;;;;6570:15:2;;6548:19;6570:15;;;:9;:15;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:2;;-1:-1:-1;;;;;3169:32:10;;6649:50:2;;;3151:51:10;3218:18;;;3211:34;;;3261:18;;;3254:34;;;3124:18;;6649:50:2;2949:345:10;6599:115:2;-1:-1:-1;;;;;6834:15:2;;;;;;:9;:15;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:2;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:2;;;;;;:9;:13;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:2;7355:4;-1:-1:-1;;;;;7346:25:2;;7365:5;7346:25;;;;1342::10;;1330:2;1315:18;;1196:177;7346:25:2;;;;;;;;6271:1107;;;:::o;14:548:10:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:10;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:10:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:10:o;2299:260::-;2367:6;2375;2428:2;2416:9;2407:7;2403:23;2399:32;2396:52;;;2444:1;2441;2434:12;2396:52;2467:29;2486:9;2467:29;:::i;:::-;2457:39;;2515:38;2549:2;2538:9;2534:18;2515:38;:::i;:::-;2505:48;;2299:260;;;;;:::o;2564:380::-;2643:1;2639:12;;;;2686;;;2707:61;;2761:4;2753:6;2749:17;2739:27;;2707:61;2814:2;2806:6;2803:14;2783:18;2780:38;2777:161;;2860:10;2855:3;2851:20;2848:1;2841:31;2895:4;2892:1;2885:15;2923:4;2920:1;2913:15;2777:161;;2564:380;;;:::o;3552:222::-;3617:9;;;3638:10;;;3635:133;;;3690:10;3685:3;3681:20;3678:1;3671:31;3725:4;3722:1;3715:15;3753:4;3750:1;3743:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "580000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24762",
								"balanceOf(address)": "2560",
								"burn(address,uint256)": "infinite",
								"cap()": "infinite",
								"decimals()": "2329",
								"getDecimals()": "2394",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "2390",
								"pause()": "infinite",
								"paused()": "2415",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2349",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28443",
								"unpause()": "infinite"
							},
							"internal": {
								"_update(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH",
									"source": 9,
									"value": "A0"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 328,
									"end": 699,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 328,
									"end": 699,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 606,
									"end": 616,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 612,
									"end": 616,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 606,
									"end": 608,
									"name": "PUSH",
									"source": 9,
									"value": "A"
								},
								{
									"begin": 606,
									"end": 616,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 606,
									"end": 616,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 606,
									"end": 616,
									"name": "tag",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 606,
									"end": 616,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 597,
									"end": 616,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 597,
									"end": 616,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 597,
									"end": 603,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 597,
									"end": 616,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 597,
									"end": 616,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 597,
									"end": 616,
									"name": "tag",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 597,
									"end": 616,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 535,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 537,
									"end": 543,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 562,
									"end": 574,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3840,
									"end": 3891,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3813,
									"end": 3831,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 3813,
									"end": 3831,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1231,
									"end": 1238,
									"name": "PUSH",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 800,
									"end": 811,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 800,
									"end": 811,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 800,
									"end": 811,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 800,
									"end": 811,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 800,
									"end": 811,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FFFF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 634,
									"end": 646,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "PUSH",
									"source": 7,
									"value": "100"
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "PUSH",
									"source": 7,
									"value": "FF"
								},
								{
									"begin": 634,
									"end": 646,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"modifierDepth": 3,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"modifierDepth": 3,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"modifierDepth": 3,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 634,
									"end": 646,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 657,
									"end": 691,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 663,
									"end": 675,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 677,
									"end": 690,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 657,
									"end": 662,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 657,
									"end": 691,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 657,
									"end": 691,
									"modifierDepth": 3,
									"name": "tag",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 657,
									"end": 691,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 328,
									"end": 699,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "tag",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7791,
									"end": 7812,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7791,
									"end": 7812,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EC442F05"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7864,
									"end": 7865,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 3840,
									"end": 3891,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3813,
									"end": 3831,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 3813,
									"end": 3831,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 3694,
									"end": 3897,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "tag",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7887,
									"end": 7922,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "33"
								},
								{
									"begin": 7903,
									"end": 7904,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7907,
									"end": 7914,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7916,
									"end": 7921,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7887,
									"end": 7894,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "34"
								},
								{
									"begin": 7887,
									"end": 7922,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 7887,
									"end": 7922,
									"name": "tag",
									"source": 2,
									"value": "33"
								},
								{
									"begin": 7887,
									"end": 7922,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7721,
									"end": 7929,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1161,
									"end": 1348,
									"name": "tag",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 1161,
									"end": 1348,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1310,
									"end": 1340,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "36"
								},
								{
									"begin": 1324,
									"end": 1328,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1330,
									"end": 1332,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1334,
									"end": 1339,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1310,
									"end": 1323,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 1310,
									"end": 1340,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1310,
									"end": 1340,
									"name": "tag",
									"source": 9,
									"value": "36"
								},
								{
									"begin": 1310,
									"end": 1340,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1161,
									"end": 1348,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1161,
									"end": 1348,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1161,
									"end": 1348,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1161,
									"end": 1348,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1046,
									"end": 1453,
									"name": "tag",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1046,
									"end": 1453,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1141,
									"end": 1171,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1155,
									"end": 1159,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1161,
									"end": 1163,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1165,
									"end": 1170,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1141,
									"end": 1154,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1141,
									"end": 1171,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1141,
									"end": 1171,
									"name": "tag",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1141,
									"end": 1171,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1182,
									"end": 1199,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1202,
									"end": 1207,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 974,
									"end": 978,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 974,
									"end": 978,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 974,
									"end": 978,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 903,
									"end": 986,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1202,
									"end": 1207,
									"name": "tag",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1202,
									"end": 1207,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1182,
									"end": 1207,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1222,
									"end": 1240,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1240,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1240,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1258,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1258,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1258,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1222,
									"end": 1258,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1244,
									"end": 1258,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1244,
									"end": 1258,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1244,
									"end": 1258,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1258,
									"name": "tag",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1222,
									"end": 1258,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1218,
									"end": 1446,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1218,
									"end": 1446,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "44"
								},
								{
									"begin": 1218,
									"end": 1446,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1289,
									"end": 1303,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1306,
									"end": 1319,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "45"
								},
								{
									"begin": 3222,
									"end": 3234,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 3222,
									"end": 3234,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 3222,
									"end": 3234,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3144,
									"end": 3241,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1306,
									"end": 1319,
									"name": "tag",
									"source": 8,
									"value": "45"
								},
								{
									"begin": 1306,
									"end": 1319,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1289,
									"end": 1319,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1289,
									"end": 1319,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1347,
									"end": 1356,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1338,
									"end": 1344,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1338,
									"end": 1356,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1334,
									"end": 1435,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1334,
									"end": 1435,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "47"
								},
								{
									"begin": 1334,
									"end": 1435,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "279E7E15"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 6656,
									"end": 6681,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 6656,
									"end": 6681,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 6656,
									"end": 6681,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 6697,
									"end": 6715,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 6697,
									"end": 6715,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 6697,
									"end": 6715,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 6690,
									"end": 6724,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 6690,
									"end": 6724,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 6690,
									"end": 6724,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 6629,
									"end": 6647,
									"name": "PUSH",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 6629,
									"end": 6647,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1384,
									"end": 1419,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 6482,
									"end": 6730,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1334,
									"end": 1435,
									"name": "tag",
									"source": 8,
									"value": "47"
								},
								{
									"begin": 1334,
									"end": 1435,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1260,
									"end": 1446,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1218,
									"end": 1446,
									"name": "tag",
									"source": 8,
									"value": "44"
								},
								{
									"begin": 1218,
									"end": 1446,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1130,
									"end": 1453,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1046,
									"end": 1453,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1046,
									"end": 1453,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1046,
									"end": 1453,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1046,
									"end": 1453,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1112,
									"end": 1257,
									"name": "tag",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1112,
									"end": 1257,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1474,
									"end": 1493,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "51"
								},
								{
									"begin": 1474,
									"end": 1491,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "52"
								},
								{
									"begin": 1474,
									"end": 1493,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1474,
									"end": 1493,
									"name": "tag",
									"source": 7,
									"value": "51"
								},
								{
									"begin": 1474,
									"end": 1493,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1220,
									"end": 1250,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "36"
								},
								{
									"begin": 1234,
									"end": 1238,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 1240,
									"end": 1242,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 1244,
									"end": 1249,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 1220,
									"end": 1233,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "55"
								},
								{
									"begin": 1220,
									"end": 1250,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 2002,
									"end": 2130,
									"name": "tag",
									"source": 7,
									"value": "52"
								},
								{
									"begin": 2002,
									"end": 2130,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1920,
									"end": 1927,
									"name": "PUSH",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 1920,
									"end": 1927,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 1920,
									"end": 1927,
									"name": "PUSH",
									"source": 7,
									"value": "FF"
								},
								{
									"begin": 1920,
									"end": 1927,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 2063,
									"end": 2124,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 2063,
									"end": 2124,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "61"
								},
								{
									"begin": 2063,
									"end": 2124,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "D93C0665"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 2098,
									"end": 2113,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 2063,
									"end": 2124,
									"name": "tag",
									"source": 7,
									"value": "61"
								},
								{
									"begin": 2063,
									"end": 2124,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 2002,
									"end": 2130,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "tag",
									"source": 2,
									"value": "55"
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6360,
									"end": 6378,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 6360,
									"end": 6378,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "63"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6512,
									"end": 6517,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6508,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 6496,
									"end": 6508,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "65"
								},
								{
									"begin": 6496,
									"end": 6517,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "tag",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "66"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "tag",
									"source": 2,
									"value": "63"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6548,
									"end": 6567,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6579,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6603,
									"end": 6622,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6603,
									"end": 6622,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6603,
									"end": 6622,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "67"
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "391434E3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7085,
									"end": 7117,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 7085,
									"end": 7117,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 7067,
									"end": 7118,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 7134,
									"end": 7152,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 7134,
									"end": 7152,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 7134,
									"end": 7152,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 7127,
									"end": 7161,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 7127,
									"end": 7161,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 7127,
									"end": 7161,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 7177,
									"end": 7195,
									"name": "PUSH",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 7177,
									"end": 7195,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 7177,
									"end": 7195,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 7170,
									"end": 7204,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 7170,
									"end": 7204,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 7170,
									"end": 7204,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 7040,
									"end": 7058,
									"name": "PUSH",
									"source": 10,
									"value": "64"
								},
								{
									"begin": 7040,
									"end": 7058,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 6865,
									"end": 7210,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "tag",
									"source": 2,
									"value": "67"
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6843,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6871,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6834,
									"end": 6871,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "tag",
									"source": 2,
									"value": "66"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6910,
									"end": 6926,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6910,
									"end": 6926,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "70"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7085,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "71"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "tag",
									"source": 2,
									"value": "70"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7293,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "tag",
									"source": 2,
									"value": "71"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7361,
									"end": 7363,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7355,
									"end": 7359,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH",
									"source": 2,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 7365,
									"end": 7370,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "72"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 7361,
									"end": 7386,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 7361,
									"end": 7386,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 7349,
									"end": 7351,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 7334,
									"end": 7352,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 7334,
									"end": 7352,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 7215,
									"end": 7392,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "tag",
									"source": 2,
									"value": "72"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "LOG3",
									"source": 2
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 6271,
									"end": 7378,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 146,
									"end": 990,
									"name": "tag",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 146,
									"end": 990,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "87"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 10,
									"value": "87"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "89"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "89"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 369,
									"end": 387,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 10,
									"value": "89"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 10,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "91"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "91"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 588,
									"end": 606,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 10,
									"value": "91"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 732,
									"end": 735,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 725,
									"end": 729,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 704,
									"end": 730,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 701,
									"end": 736,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 698,
									"end": 753,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 698,
									"end": 753,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "92"
								},
								{
									"begin": 698,
									"end": 753,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 749,
									"end": 750,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 746,
									"end": 747,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 739,
									"end": 751,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 698,
									"end": 753,
									"name": "tag",
									"source": 10,
									"value": "92"
								},
								{
									"begin": 698,
									"end": 753,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 771,
									"end": 772,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 762,
									"end": 772,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 762,
									"end": 772,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 781,
									"end": 914,
									"name": "tag",
									"source": 10,
									"value": "93"
								},
								{
									"begin": 781,
									"end": 914,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 795,
									"end": 797,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 792,
									"end": 793,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 789,
									"end": 798,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 781,
									"end": 914,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 781,
									"end": 914,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "95"
								},
								{
									"begin": 781,
									"end": 914,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 883,
									"end": 897,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 883,
									"end": 897,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 883,
									"end": 897,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 879,
									"end": 902,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 879,
									"end": 902,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 873,
									"end": 903,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 852,
									"end": 866,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 852,
									"end": 866,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 852,
									"end": 866,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 848,
									"end": 871,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 848,
									"end": 871,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 841,
									"end": 904,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 806,
									"end": 816,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 806,
									"end": 816,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 806,
									"end": 816,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 806,
									"end": 816,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 781,
									"end": 914,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "93"
								},
								{
									"begin": 781,
									"end": 914,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 781,
									"end": 914,
									"name": "tag",
									"source": 10,
									"value": "95"
								},
								{
									"begin": 781,
									"end": 914,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 958,
									"end": 959,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 951,
									"end": 955,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 946,
									"end": 948,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 938,
									"end": 944,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 934,
									"end": 949,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 930,
									"end": 956,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 923,
									"end": 960,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 978,
									"end": 984,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 969,
									"end": 984,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 969,
									"end": 984,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 969,
									"end": 984,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 969,
									"end": 984,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 969,
									"end": 984,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 969,
									"end": 984,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 146,
									"end": 990,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 146,
									"end": 990,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 146,
									"end": 990,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 146,
									"end": 990,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 146,
									"end": 990,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1128,
									"end": 1134,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1136,
									"end": 1142,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1144,
									"end": 1150,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1152,
									"end": 1158,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1160,
									"end": 1166,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1168,
									"end": 1174,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1221,
									"end": 1224,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 1209,
									"end": 1218,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1200,
									"end": 1207,
									"name": "DUP10",
									"source": 10
								},
								{
									"begin": 1196,
									"end": 1219,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1192,
									"end": 1225,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 1189,
									"end": 1242,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1189,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "97"
								},
								{
									"begin": 1189,
									"end": 1242,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1238,
									"end": 1239,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1235,
									"end": 1236,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1228,
									"end": 1240,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1189,
									"end": 1242,
									"name": "tag",
									"source": 10,
									"value": "97"
								},
								{
									"begin": 1189,
									"end": 1242,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1264,
									"end": 1280,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1264,
									"end": 1280,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1309,
									"end": 1340,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1309,
									"end": 1340,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1299,
									"end": 1341,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1299,
									"end": 1341,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1289,
									"end": 1359,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "98"
								},
								{
									"begin": 1289,
									"end": 1359,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1355,
									"end": 1356,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1352,
									"end": 1353,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1345,
									"end": 1357,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1289,
									"end": 1359,
									"name": "tag",
									"source": 10,
									"value": "98"
								},
								{
									"begin": 1289,
									"end": 1359,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1423,
									"end": 1425,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1408,
									"end": 1426,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 1408,
									"end": 1426,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1402,
									"end": 1427,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1471,
									"end": 1473,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1456,
									"end": 1474,
									"name": "DUP10",
									"source": 10
								},
								{
									"begin": 1456,
									"end": 1474,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1450,
									"end": 1475,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1378,
									"end": 1383,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1378,
									"end": 1383,
									"name": "SWAP8",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1402,
									"end": 1427,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1524,
									"end": 1538,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1524,
									"end": 1538,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1524,
									"end": 1538,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1521,
									"end": 1555,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1521,
									"end": 1555,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "99"
								},
								{
									"begin": 1521,
									"end": 1555,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1551,
									"end": 1552,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1548,
									"end": 1549,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1541,
									"end": 1553,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1521,
									"end": 1555,
									"name": "tag",
									"source": 10,
									"value": "99"
								},
								{
									"begin": 1521,
									"end": 1555,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1574,
									"end": 1635,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 1627,
									"end": 1634,
									"name": "DUP11",
									"source": 10
								},
								{
									"begin": 1618,
									"end": 1624,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1607,
									"end": 1616,
									"name": "DUP12",
									"source": 10
								},
								{
									"begin": 1603,
									"end": 1625,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1574,
									"end": 1635,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 1574,
									"end": 1635,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1574,
									"end": 1635,
									"name": "tag",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 1574,
									"end": 1635,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1564,
									"end": 1635,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 1564,
									"end": 1635,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1681,
									"end": 1683,
									"name": "PUSH",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 1670,
									"end": 1679,
									"name": "DUP10",
									"source": 10
								},
								{
									"begin": 1666,
									"end": 1684,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1660,
									"end": 1685,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1644,
									"end": 1685,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1644,
									"end": 1685,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1710,
									"end": 1712,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1700,
									"end": 1708,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1697,
									"end": 1713,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1694,
									"end": 1730,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1694,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "101"
								},
								{
									"begin": 1694,
									"end": 1730,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1726,
									"end": 1727,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1723,
									"end": 1724,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1716,
									"end": 1728,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1694,
									"end": 1730,
									"name": "tag",
									"source": 10,
									"value": "101"
								},
								{
									"begin": 1694,
									"end": 1730,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1694,
									"end": 1730,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1749,
									"end": 1812,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "102"
								},
								{
									"begin": 1804,
									"end": 1811,
									"name": "DUP10",
									"source": 10
								},
								{
									"begin": 1793,
									"end": 1801,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1782,
									"end": 1791,
									"name": "DUP11",
									"source": 10
								},
								{
									"begin": 1778,
									"end": 1802,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1749,
									"end": 1812,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 1749,
									"end": 1812,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1749,
									"end": 1812,
									"name": "tag",
									"source": 10,
									"value": "102"
								},
								{
									"begin": 1749,
									"end": 1812,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1739,
									"end": 1812,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1739,
									"end": 1812,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1739,
									"end": 1812,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1857,
									"end": 1860,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 1846,
									"end": 1855,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1842,
									"end": 1861,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1836,
									"end": 1862,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1906,
									"end": 1910,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 1897,
									"end": 1904,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1893,
									"end": 1911,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 1891,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1881,
									"end": 1912,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1871,
									"end": 1930,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "103"
								},
								{
									"begin": 1871,
									"end": 1930,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1926,
									"end": 1927,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1923,
									"end": 1924,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1916,
									"end": 1928,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1871,
									"end": 1930,
									"name": "tag",
									"source": 10,
									"value": "103"
								},
								{
									"begin": 1871,
									"end": 1930,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1949,
									"end": 1956,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1939,
									"end": 1956,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1939,
									"end": 1956,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1939,
									"end": 1956,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1996,
									"end": 1999,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 1985,
									"end": 1994,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1981,
									"end": 2000,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1975,
									"end": 2001,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1965,
									"end": 2001,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1965,
									"end": 2001,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 995,
									"end": 2007,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2012,
									"end": 2139,
									"name": "tag",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 2012,
									"end": 2139,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2073,
									"end": 2083,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 2068,
									"end": 2071,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 2064,
									"end": 2084,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 2061,
									"end": 2062,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2054,
									"end": 2085,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2104,
									"end": 2108,
									"name": "PUSH",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 2101,
									"end": 2102,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 2094,
									"end": 2109,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2128,
									"end": 2132,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2125,
									"end": 2126,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2118,
									"end": 2133,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "tag",
									"source": 10,
									"value": "78"
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2233,
									"end": 2234,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 2270,
									"end": 2275,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2233,
									"end": 2234,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "tag",
									"source": 10,
									"value": "106"
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2305,
									"end": 2312,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2295,
									"end": 2303,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 2292,
									"end": 2313,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "108"
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2364,
									"end": 2368,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2360,
									"end": 2361,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2356,
									"end": 2362,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 2352,
									"end": 2369,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 2346,
									"end": 2350,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2343,
									"end": 2370,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2340,
									"end": 2393,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2340,
									"end": 2393,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "110"
								},
								{
									"begin": 2340,
									"end": 2393,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2373,
									"end": 2391,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "110"
								},
								{
									"begin": 2373,
									"end": 2391,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 2373,
									"end": 2391,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2373,
									"end": 2391,
									"name": "tag",
									"source": 10,
									"value": "110"
								},
								{
									"begin": 2373,
									"end": 2391,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2423,
									"end": 2430,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2413,
									"end": 2421,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 2409,
									"end": 2431,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 2406,
									"end": 2461,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2406,
									"end": 2461,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "111"
								},
								{
									"begin": 2406,
									"end": 2461,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2443,
									"end": 2459,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2443,
									"end": 2459,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2443,
									"end": 2459,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 2443,
									"end": 2459,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2406,
									"end": 2461,
									"name": "tag",
									"source": 10,
									"value": "111"
								},
								{
									"begin": 2406,
									"end": 2461,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2522,
									"end": 2544,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 2522,
									"end": 2544,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2522,
									"end": 2544,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 2522,
									"end": 2544,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 2482,
									"end": 2497,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2482,
									"end": 2497,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2482,
									"end": 2497,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 2482,
									"end": 2497,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "106"
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "tag",
									"source": 10,
									"value": "108"
								},
								{
									"begin": 2284,
									"end": 2554,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2288,
									"end": 2291,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2144,
									"end": 2560,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "tag",
									"source": 10,
									"value": "79"
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2614,
									"end": 2619,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2644,
									"end": 2652,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2634,
									"end": 2714,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "113"
								},
								{
									"begin": 2634,
									"end": 2714,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2685,
									"end": 2686,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 2699,
									"end": 2704,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 2699,
									"end": 2704,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2634,
									"end": 2714,
									"name": "tag",
									"source": 10,
									"value": "113"
								},
								{
									"begin": 2634,
									"end": 2714,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2733,
									"end": 2737,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2723,
									"end": 2799,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "114"
								},
								{
									"begin": 2723,
									"end": 2799,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2770,
									"end": 2771,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2784,
									"end": 2789,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 2784,
									"end": 2789,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2723,
									"end": 2799,
									"name": "tag",
									"source": 10,
									"value": "114"
								},
								{
									"begin": 2723,
									"end": 2799,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2815,
									"end": 2819,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2833,
									"end": 2834,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 2828,
									"end": 2887,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2828,
									"end": 2887,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 2828,
									"end": 2887,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "116"
								},
								{
									"begin": 2828,
									"end": 2887,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2901,
									"end": 2902,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 2896,
									"end": 3026,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2896,
									"end": 3026,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 2896,
									"end": 3026,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "117"
								},
								{
									"begin": 2896,
									"end": 3026,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2808,
									"end": 3026,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "115"
								},
								{
									"begin": 2808,
									"end": 3026,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2828,
									"end": 2887,
									"name": "tag",
									"source": 10,
									"value": "116"
								},
								{
									"begin": 2828,
									"end": 2887,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2858,
									"end": 2859,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 2849,
									"end": 2859,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2849,
									"end": 2859,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2872,
									"end": 2877,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2872,
									"end": 2877,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 2872,
									"end": 2877,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2896,
									"end": 3026,
									"name": "tag",
									"source": 10,
									"value": "117"
								},
								{
									"begin": 2896,
									"end": 3026,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2933,
									"end": 2936,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 2923,
									"end": 2931,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2920,
									"end": 2937,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2917,
									"end": 2960,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2917,
									"end": 2960,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "119"
								},
								{
									"begin": 2917,
									"end": 2960,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2940,
									"end": 2958,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "119"
								},
								{
									"begin": 2940,
									"end": 2958,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 2940,
									"end": 2958,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2940,
									"end": 2958,
									"name": "tag",
									"source": 10,
									"value": "119"
								},
								{
									"begin": 2940,
									"end": 2958,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2996,
									"end": 2997,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 2982,
									"end": 2998,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2982,
									"end": 2998,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 3011,
									"end": 3016,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 3011,
									"end": 3016,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2808,
									"end": 3026,
									"name": "tag",
									"source": 10,
									"value": "115"
								},
								{
									"begin": 2808,
									"end": 3026,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2808,
									"end": 3026,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3110,
									"end": 3112,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 3100,
									"end": 3108,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3097,
									"end": 3113,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3091,
									"end": 3094,
									"name": "PUSH",
									"source": 10,
									"value": "133"
								},
								{
									"begin": 3085,
									"end": 3089,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3082,
									"end": 3095,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3078,
									"end": 3114,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 3072,
									"end": 3074,
									"name": "PUSH",
									"source": 10,
									"value": "4E"
								},
								{
									"begin": 3062,
									"end": 3070,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3059,
									"end": 3075,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3054,
									"end": 3056,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 3048,
									"end": 3052,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3045,
									"end": 3057,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3041,
									"end": 3076,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 3038,
									"end": 3115,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 3035,
									"end": 3194,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3035,
									"end": 3194,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "120"
								},
								{
									"begin": 3035,
									"end": 3194,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3147,
									"end": 3166,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3147,
									"end": 3166,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3147,
									"end": 3166,
									"name": "EXP",
									"source": 10
								},
								{
									"begin": 3179,
									"end": 3184,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 3179,
									"end": 3184,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3035,
									"end": 3194,
									"name": "tag",
									"source": 10,
									"value": "120"
								},
								{
									"begin": 3035,
									"end": 3194,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3226,
									"end": 3260,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "121"
								},
								{
									"begin": 3251,
									"end": 3259,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3245,
									"end": 3249,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3226,
									"end": 3260,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "78"
								},
								{
									"begin": 3226,
									"end": 3260,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3226,
									"end": 3260,
									"name": "tag",
									"source": 10,
									"value": "121"
								},
								{
									"begin": 3226,
									"end": 3260,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3296,
									"end": 3302,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3292,
									"end": 3293,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3288,
									"end": 3294,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 3284,
									"end": 3303,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 3275,
									"end": 3282,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3272,
									"end": 3304,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 3269,
									"end": 3327,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3269,
									"end": 3327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "123"
								},
								{
									"begin": 3269,
									"end": 3327,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3307,
									"end": 3325,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "123"
								},
								{
									"begin": 3307,
									"end": 3325,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 3307,
									"end": 3325,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3307,
									"end": 3325,
									"name": "tag",
									"source": 10,
									"value": "123"
								},
								{
									"begin": 3307,
									"end": 3325,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3345,
									"end": 3365,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 3345,
									"end": 3365,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "tag",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2565,
									"end": 3371,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2565,
									"end": 3371,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3376,
									"end": 3516,
									"name": "tag",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 3376,
									"end": 3516,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3434,
									"end": 3439,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3463,
									"end": 3510,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "125"
								},
								{
									"begin": 3504,
									"end": 3508,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 3494,
									"end": 3502,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3490,
									"end": 3509,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 3484,
									"end": 3488,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3463,
									"end": 3510,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "79"
								},
								{
									"begin": 3463,
									"end": 3510,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3463,
									"end": 3510,
									"name": "tag",
									"source": 10,
									"value": "125"
								},
								{
									"begin": 3463,
									"end": 3510,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3454,
									"end": 3510,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 3376,
									"end": 3516,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3376,
									"end": 3516,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3521,
									"end": 3689,
									"name": "tag",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 3521,
									"end": 3689,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3594,
									"end": 3603,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3594,
									"end": 3603,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3594,
									"end": 3603,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 3625,
									"end": 3634,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3625,
									"end": 3634,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3642,
									"end": 3657,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3642,
									"end": 3657,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3642,
									"end": 3657,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 3636,
									"end": 3658,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3636,
									"end": 3658,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 3622,
									"end": 3659,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 3612,
									"end": 3683,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 3612,
									"end": 3683,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3663,
									"end": 3681,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 3663,
									"end": 3681,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 3663,
									"end": 3681,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3902,
									"end": 4282,
									"name": "tag",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 3902,
									"end": 4282,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3981,
									"end": 3982,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 3977,
									"end": 3989,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3977,
									"end": 3989,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3977,
									"end": 3989,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 3977,
									"end": 3989,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 4024,
									"end": 4036,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4024,
									"end": 4036,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 4024,
									"end": 4036,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 4045,
									"end": 4106,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "131"
								},
								{
									"begin": 4045,
									"end": 4106,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 4099,
									"end": 4103,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 4091,
									"end": 4097,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4087,
									"end": 4104,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 4077,
									"end": 4104,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 4077,
									"end": 4104,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4045,
									"end": 4106,
									"name": "tag",
									"source": 10,
									"value": "131"
								},
								{
									"begin": 4045,
									"end": 4106,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4152,
									"end": 4154,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 4144,
									"end": 4150,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4141,
									"end": 4155,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 4121,
									"end": 4139,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 4115,
									"end": 4276,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "132"
								},
								{
									"begin": 4115,
									"end": 4276,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 4198,
									"end": 4208,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 4193,
									"end": 4196,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 4189,
									"end": 4209,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 4186,
									"end": 4187,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4179,
									"end": 4210,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4233,
									"end": 4237,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 4230,
									"end": 4231,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 4223,
									"end": 4238,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4261,
									"end": 4265,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 4258,
									"end": 4259,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4251,
									"end": 4266,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 4115,
									"end": 4276,
									"name": "tag",
									"source": 10,
									"value": "132"
								},
								{
									"begin": 4115,
									"end": 4276,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4115,
									"end": 4276,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3902,
									"end": 4282,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 3902,
									"end": 4282,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3902,
									"end": 4282,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3902,
									"end": 4282,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 4413,
									"end": 4956,
									"name": "tag",
									"source": 10,
									"value": "82"
								},
								{
									"begin": 4413,
									"end": 4956,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4515,
									"end": 4517,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 4510,
									"end": 4513,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4507,
									"end": 4518,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 4504,
									"end": 4950,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 4504,
									"end": 4950,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 4504,
									"end": 4950,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 4551,
									"end": 4552,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4575,
									"end": 4580,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4572,
									"end": 4573,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4565,
									"end": 4581,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4619,
									"end": 4623,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 4616,
									"end": 4617,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4606,
									"end": 4624,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 4689,
									"end": 4691,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 4677,
									"end": 4687,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 4673,
									"end": 4692,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 4670,
									"end": 4671,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 4666,
									"end": 4693,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 4660,
									"end": 4664,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4656,
									"end": 4694,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 4725,
									"end": 4729,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 4713,
									"end": 4723,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 4710,
									"end": 4730,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 4707,
									"end": 4754,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 4707,
									"end": 4754,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "136"
								},
								{
									"begin": 4707,
									"end": 4754,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4748,
									"end": 4752,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 4707,
									"end": 4754,
									"name": "tag",
									"source": 10,
									"value": "136"
								},
								{
									"begin": 4707,
									"end": 4754,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4803,
									"end": 4805,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 4798,
									"end": 4801,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 4794,
									"end": 4806,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 4791,
									"end": 4792,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 4787,
									"end": 4807,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 4781,
									"end": 4785,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4777,
									"end": 4808,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 4767,
									"end": 4808,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 4767,
									"end": 4808,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "tag",
									"source": 10,
									"value": "137"
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4876,
									"end": 4878,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4869,
									"end": 4874,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4866,
									"end": 4879,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "139"
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 4921,
									"end": 4938,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4921,
									"end": 4938,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4921,
									"end": 4938,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 4902,
									"end": 4903,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 4891,
									"end": 4904,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "137"
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "tag",
									"source": 10,
									"value": "139"
								},
								{
									"begin": 4858,
									"end": 4940,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4862,
									"end": 4865,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4862,
									"end": 4865,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4862,
									"end": 4865,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4413,
									"end": 4956,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4413,
									"end": 4956,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4413,
									"end": 4956,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 4413,
									"end": 4956,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 5132,
									"end": 6477,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 5132,
									"end": 6477,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 5252,
									"end": 5262,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 5252,
									"end": 5262,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 5274,
									"end": 5304,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 5274,
									"end": 5304,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 5271,
									"end": 5327,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 5271,
									"end": 5327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "143"
								},
								{
									"begin": 5271,
									"end": 5327,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 5307,
									"end": 5325,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "143"
								},
								{
									"begin": 5307,
									"end": 5325,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 5307,
									"end": 5325,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 5307,
									"end": 5325,
									"name": "tag",
									"source": 10,
									"value": "143"
								},
								{
									"begin": 5307,
									"end": 5325,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 5336,
									"end": 5433,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "144"
								},
								{
									"begin": 5426,
									"end": 5432,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 5386,
									"end": 5424,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "145"
								},
								{
									"begin": 5418,
									"end": 5422,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 5412,
									"end": 5423,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 5386,
									"end": 5424,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 5386,
									"end": 5424,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 5386,
									"end": 5424,
									"name": "tag",
									"source": 10,
									"value": "145"
								},
								{
									"begin": 5386,
									"end": 5424,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 5380,
									"end": 5384,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 5336,
									"end": 5433,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "82"
								},
								{
									"begin": 5336,
									"end": 5433,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 5336,
									"end": 5433,
									"name": "tag",
									"source": 10,
									"value": "144"
								},
								{
									"begin": 5336,
									"end": 5433,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 5488,
									"end": 5492,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 5488,
									"end": 5492,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 5545,
									"end": 5547,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 5534,
									"end": 5548,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 5534,
									"end": 5548,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 5562,
									"end": 5563,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 5557,
									"end": 6220,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 5557,
									"end": 6220,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 5557,
									"end": 6220,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "147"
								},
								{
									"begin": 5557,
									"end": 6220,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 6264,
									"end": 6265,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 6281,
									"end": 6287,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 6278,
									"end": 6367,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 6278,
									"end": 6367,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "148"
								},
								{
									"begin": 6278,
									"end": 6367,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6333,
									"end": 6352,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 6333,
									"end": 6352,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 6333,
									"end": 6352,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 6327,
									"end": 6353,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 6278,
									"end": 6367,
									"name": "tag",
									"source": 10,
									"value": "148"
								},
								{
									"begin": 6278,
									"end": 6367,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 5089,
									"end": 5090,
									"name": "PUSH",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 5085,
									"end": 5096,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 5085,
									"end": 5096,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 5085,
									"end": 5096,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 5081,
									"end": 5105,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 5077,
									"end": 5106,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 5067,
									"end": 5107,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 5113,
									"end": 5114,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 5109,
									"end": 5120,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 5109,
									"end": 5120,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 5109,
									"end": 5120,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 5064,
									"end": 5121,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 6380,
									"end": 6461,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 6380,
									"end": 6461,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 5527,
									"end": 6471,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "139"
								},
								{
									"begin": 5527,
									"end": 6471,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 5557,
									"end": 6220,
									"name": "tag",
									"source": 10,
									"value": "147"
								},
								{
									"begin": 5557,
									"end": 6220,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4360,
									"end": 4361,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4353,
									"end": 4367,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 4353,
									"end": 4367,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4353,
									"end": 4367,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4397,
									"end": 4401,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 4384,
									"end": 4402,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4384,
									"end": 4402,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 5593,
									"end": 5613,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 5593,
									"end": 5613,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 5593,
									"end": 5613,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "tag",
									"source": 10,
									"value": "151"
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 5725,
									"end": 5732,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 5722,
									"end": 5723,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 5719,
									"end": 5733,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "153"
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 5814,
									"end": 5833,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 5814,
									"end": 5833,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 5814,
									"end": 5833,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 5808,
									"end": 5834,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 5793,
									"end": 5835,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 5793,
									"end": 5835,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 5906,
									"end": 5933,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 5906,
									"end": 5933,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 5906,
									"end": 5933,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 5906,
									"end": 5933,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 5874,
									"end": 5875,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 5862,
									"end": 5876,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 5862,
									"end": 5876,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 5862,
									"end": 5876,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 5862,
									"end": 5876,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 5741,
									"end": 5760,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 5741,
									"end": 5760,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "151"
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "tag",
									"source": 10,
									"value": "153"
								},
								{
									"begin": 5711,
									"end": 5947,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 5715,
									"end": 5718,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 5975,
									"end": 5981,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 5966,
									"end": 5973,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 5963,
									"end": 5982,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 5960,
									"end": 6161,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 5960,
									"end": 6161,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "154"
								},
								{
									"begin": 5960,
									"end": 6161,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 6036,
									"end": 6055,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 6036,
									"end": 6055,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 6036,
									"end": 6055,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 6030,
									"end": 6056,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 6119,
									"end": 6120,
									"name": "PUSH",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 6115,
									"end": 6129,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 6115,
									"end": 6129,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 6115,
									"end": 6129,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 6131,
									"end": 6134,
									"name": "PUSH",
									"source": 10,
									"value": "F8"
								},
								{
									"begin": 6111,
									"end": 6135,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 6107,
									"end": 6144,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 6103,
									"end": 6145,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 6088,
									"end": 6146,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 6073,
									"end": 6147,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 6073,
									"end": 6147,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 5960,
									"end": 6161,
									"name": "tag",
									"source": 10,
									"value": "154"
								},
								{
									"begin": 5960,
									"end": 6161,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6207,
									"end": 6208,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 6191,
									"end": 6205,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 6191,
									"end": 6205,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 6191,
									"end": 6205,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 6187,
									"end": 6209,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 6174,
									"end": 6210,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 6174,
									"end": 6210,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5132,
									"end": 6477,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 6735,
									"end": 6860,
									"name": "tag",
									"source": 10,
									"value": "65"
								},
								{
									"begin": 6735,
									"end": 6860,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 6800,
									"end": 6809,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 6800,
									"end": 6809,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 6800,
									"end": 6809,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 6821,
									"end": 6831,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 6821,
									"end": 6831,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 6821,
									"end": 6831,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 6818,
									"end": 6854,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 6818,
									"end": 6854,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 6818,
									"end": 6854,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 6834,
									"end": 6852,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "112"
								},
								{
									"begin": 6834,
									"end": 6852,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 6834,
									"end": 6852,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 7215,
									"end": 7392,
									"name": "tag",
									"source": 10,
									"value": "84"
								},
								{
									"begin": 7215,
									"end": 7392,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "1092"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 236,
									"end": 1443,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122062a7257fd7784ce74b4c50822593c23e469ecd794ff312e75aa1e7b59b76d28764736f6c63430008180033",
									".code": [
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "70A08231"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "9DC29FAC"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "9DC29FAC"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "DD62ED3E"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "F0141D84"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "70A08231"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "8456CB59"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "95D89B41"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "313CE567"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "313CE567"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "355274EA"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "3F4BA83A"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "40C10F19"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "5C975ABB"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "6FDDE03"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "95EA7B3"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "18160DDD"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 236,
											"end": 1443,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1162,
											"end": 1184,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1132,
											"end": 1134,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1117,
											"end": 1135,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1004,
											"end": 1191,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 707,
											"end": 795,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 707,
											"end": 795,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 782,
											"end": 787,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 782,
											"end": 787,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 782,
											"end": 787,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 782,
											"end": 787,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 782,
											"end": 787,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 782,
											"end": 787,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 782,
											"end": 787,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 707,
											"end": 795,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 795,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1883,
											"end": 1887,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 1871,
											"end": 1888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1871,
											"end": 1888,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1871,
											"end": 1888,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1841,
											"end": 1843,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 707,
											"end": 795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 1711,
											"end": 1895,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 903,
											"end": 986,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 903,
											"end": 986,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 974,
											"end": 978,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1092"
										},
										{
											"begin": 903,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 903,
											"end": 986,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1088,
											"end": 1153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 803,
											"end": 898,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 803,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 803,
											"end": 898,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 803,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 803,
											"end": 898,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 803,
											"end": 898,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 803,
											"end": 898,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1019,
											"end": 1080,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 1019,
											"end": 1080,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1019,
											"end": 1080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1019,
											"end": 1080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1019,
											"end": 1080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2225,
											"end": 2227,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 906,
											"end": 1011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 906,
											"end": 1011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1088,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1135,
											"end": 1145,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1135,
											"end": 1143,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 1135,
											"end": 1145,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1145,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1135,
											"end": 1145,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1088,
											"end": 1153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 803,
											"end": 898,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 873,
											"end": 890,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 879,
											"end": 881,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 883,
											"end": 889,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 873,
											"end": 878,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 873,
											"end": 890,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 873,
											"end": 890,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 873,
											"end": 890,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 803,
											"end": 898,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1019,
											"end": 1080,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1019,
											"end": 1080,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1072,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1064,
											"end": 1070,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 1064,
											"end": 1072,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 906,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 981,
											"end": 1003,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 987,
											"end": 994,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 996,
											"end": 1002,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 981,
											"end": 986,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 981,
											"end": 1003,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3169,
											"end": 3201,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3169,
											"end": 3201,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3151,
											"end": 3202,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3218,
											"end": 3236,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3218,
											"end": 3236,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3218,
											"end": 3236,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3211,
											"end": 3245,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3211,
											"end": 3245,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3211,
											"end": 3245,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3261,
											"end": 3279,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3261,
											"end": 3279,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3261,
											"end": 3279,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3254,
											"end": 3288,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3254,
											"end": 3288,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3254,
											"end": 3288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2949,
											"end": 3294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2827,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 2710,
											"end": 2827,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1721,
											"end": 1737,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 1721,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 1721,
											"end": 1737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1721,
											"end": 1737,
											"name": "tag",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 1721,
											"end": 1737,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2768,
											"end": 2775,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2768,
											"end": 2783,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2768,
											"end": 2783,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2768,
											"end": 2783,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2768,
											"end": 2783,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2807,
											"end": 2819,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 2807,
											"end": 2819,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2798,
											"end": 2820,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2225,
											"end": 2227,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 2710,
											"end": 2827,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2578,
											"name": "tag",
											"source": 7,
											"value": "136"
										},
										{
											"begin": 2463,
											"end": 2578,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 1474,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 1474,
											"end": 1493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "tag",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2522,
											"end": 2529,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2522,
											"end": 2536,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2522,
											"end": 2536,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2532,
											"end": 2536,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2522,
											"end": 2536,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2522,
											"end": 2536,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2558,
											"end": 2570,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2210,
											"end": 2228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2091,
											"end": 2294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1348,
											"name": "tag",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 1161,
											"end": 1348,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1310,
											"end": 1340,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 1324,
											"end": 1328,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1334,
											"end": 1339,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1310,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 1310,
											"end": 1340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2202,
											"end": 2328,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 2202,
											"end": 2328,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2260,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 2260,
											"end": 2322,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8DFC202B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2002,
											"end": 2130,
											"name": "tag",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 2002,
											"end": 2130,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D93C0665"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1046,
											"end": 1453,
											"name": "tag",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 1046,
											"end": 1453,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1141,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 1155,
											"end": 1159,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1161,
											"end": 1163,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1165,
											"end": 1170,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1141,
											"end": 1154,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 1141,
											"end": 1171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1141,
											"end": 1171,
											"name": "tag",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 1141,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 974,
											"end": 978,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1092"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1222,
											"end": 1240,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1222,
											"end": 1240,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1222,
											"end": 1240,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1222,
											"end": 1258,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1222,
											"end": 1258,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1222,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 1222,
											"end": 1258,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1244,
											"end": 1258,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1244,
											"end": 1258,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1244,
											"end": 1258,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1222,
											"end": 1258,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 1222,
											"end": 1258,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1218,
											"end": 1446,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1218,
											"end": 1446,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 1218,
											"end": 1446,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1289,
											"end": 1303,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1306,
											"end": 1319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1306,
											"end": 1319,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 1306,
											"end": 1319,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1289,
											"end": 1319,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1289,
											"end": 1319,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1347,
											"end": 1356,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1338,
											"end": 1344,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1338,
											"end": 1356,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1334,
											"end": 1435,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1334,
											"end": 1435,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 1334,
											"end": 1435,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "279E7E15"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3473,
											"end": 3498,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3473,
											"end": 3498,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3473,
											"end": 3498,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3514,
											"end": 3532,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3514,
											"end": 3532,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3514,
											"end": 3532,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3507,
											"end": 3541,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3507,
											"end": 3541,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3507,
											"end": 3541,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3446,
											"end": 3464,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3446,
											"end": 3464,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1419,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 3299,
											"end": 3547,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1334,
											"end": 1435,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 1334,
											"end": 1435,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1260,
											"end": 1446,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1130,
											"end": 1453,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1046,
											"end": 1453,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1046,
											"end": 1453,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1046,
											"end": 1453,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1046,
											"end": 1453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "tag",
											"source": 4,
											"value": "223"
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 1474,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 1474,
											"end": 1493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "tag",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1220,
											"end": 1250,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "162"
										},
										{
											"begin": 1234,
											"end": 1238,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1242,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1244,
											"end": 1249,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3169,
											"end": 3201,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3169,
											"end": 3201,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3151,
											"end": 3202,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3218,
											"end": 3236,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3218,
											"end": 3236,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3218,
											"end": 3236,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3211,
											"end": 3245,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3211,
											"end": 3245,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3211,
											"end": 3245,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3261,
											"end": 3279,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3261,
											"end": 3279,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3261,
											"end": 3279,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3254,
											"end": 3288,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3254,
											"end": 3288,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3254,
											"end": 3288,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3124,
											"end": 3142,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2949,
											"end": 3294,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 14,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 254,
											"end": 256,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 298,
											"end": 301,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 483,
											"end": 484,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 478,
											"end": 480,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 458,
											"end": 467,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 454,
											"end": 476,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 450,
											"end": 481,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 443,
											"end": 485,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 553,
											"end": 555,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 546,
											"end": 548,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 542,
											"end": 549,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 537,
											"end": 539,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 529,
											"end": 535,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 525,
											"end": 540,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 521,
											"end": 550,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 506,
											"end": 551,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 502,
											"end": 556,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 494,
											"end": 556,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 567,
											"end": 740,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 567,
											"end": 740,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 635,
											"end": 655,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 635,
											"end": 655,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 684,
											"end": 715,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 684,
											"end": 715,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 674,
											"end": 716,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 674,
											"end": 716,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 664,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 730,
											"end": 731,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 728,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 720,
											"end": 732,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 664,
											"end": 734,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 567,
											"end": 740,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 567,
											"end": 740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 745,
											"end": 999,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 745,
											"end": 999,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 813,
											"end": 819,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 821,
											"end": 827,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 874,
											"end": 876,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 862,
											"end": 871,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 853,
											"end": 860,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 849,
											"end": 872,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 845,
											"end": 877,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 842,
											"end": 894,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 842,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 890,
											"end": 891,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 880,
											"end": 892,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 842,
											"end": 894,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 932,
											"end": 941,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 913,
											"end": 942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 913,
											"end": 942,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 913,
											"end": 942,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 903,
											"end": 942,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 989,
											"end": 991,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 974,
											"end": 992,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 961,
											"end": 993,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 961,
											"end": 993,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 745,
											"end": 999,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "tag",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1455,
											"end": 1461,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1471,
											"end": 1477,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1524,
											"end": 1526,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1512,
											"end": 1521,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1510,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1495,
											"end": 1527,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1540,
											"end": 1541,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1538,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1530,
											"end": 1542,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 1563,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 1645,
											"end": 1647,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1634,
											"end": 1643,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1630,
											"end": 1648,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 1611,
											"end": 1649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1696,
											"end": 1698,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1685,
											"end": 1694,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1681,
											"end": 1699,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1668,
											"end": 1700,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1378,
											"end": 1706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1959,
											"end": 1965,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2012,
											"end": 2014,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2000,
											"end": 2009,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1991,
											"end": 1998,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1987,
											"end": 2010,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1983,
											"end": 2015,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2028,
											"end": 2029,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2018,
											"end": 2030,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 2070,
											"end": 2079,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 2051,
											"end": 2080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2041,
											"end": 2080,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1900,
											"end": 2086,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2373,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2375,
											"end": 2381,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2428,
											"end": 2430,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2416,
											"end": 2425,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2407,
											"end": 2414,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2403,
											"end": 2426,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2399,
											"end": 2431,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2448,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 2396,
											"end": 2448,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2444,
											"end": 2445,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2441,
											"end": 2442,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2434,
											"end": 2446,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2448,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 2396,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2467,
											"end": 2496,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 2486,
											"end": 2495,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2467,
											"end": 2496,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 2467,
											"end": 2496,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2467,
											"end": 2496,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 2467,
											"end": 2496,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2457,
											"end": 2496,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2457,
											"end": 2496,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2515,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 2549,
											"end": 2551,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2538,
											"end": 2547,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2534,
											"end": 2552,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2515,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 2515,
											"end": 2553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2515,
											"end": 2553,
											"name": "tag",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 2515,
											"end": 2553,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2505,
											"end": 2553,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2505,
											"end": 2553,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2559,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2564,
											"end": 2944,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 2564,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2643,
											"end": 2644,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2639,
											"end": 2651,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2639,
											"end": 2651,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2639,
											"end": 2651,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 2639,
											"end": 2651,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2686,
											"end": 2698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2686,
											"end": 2698,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2686,
											"end": 2698,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2707,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 2707,
											"end": 2768,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2761,
											"end": 2765,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 2753,
											"end": 2759,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2749,
											"end": 2766,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2739,
											"end": 2766,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2739,
											"end": 2766,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2707,
											"end": 2768,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 2707,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2814,
											"end": 2816,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2806,
											"end": 2812,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2803,
											"end": 2817,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 2783,
											"end": 2801,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2780,
											"end": 2818,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2777,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 2777,
											"end": 2938,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2860,
											"end": 2870,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 2855,
											"end": 2858,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 2851,
											"end": 2871,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2848,
											"end": 2849,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2841,
											"end": 2872,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2895,
											"end": 2899,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 2892,
											"end": 2893,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2885,
											"end": 2900,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2927,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2920,
											"end": 2921,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2913,
											"end": 2928,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2777,
											"end": 2938,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 2777,
											"end": 2938,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2777,
											"end": 2938,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2564,
											"end": 2944,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2564,
											"end": 2944,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2564,
											"end": 2944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2564,
											"end": 2944,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3552,
											"end": 3774,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 3552,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3617,
											"end": 3626,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3617,
											"end": 3626,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3617,
											"end": 3626,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3638,
											"end": 3648,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3638,
											"end": 3648,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3638,
											"end": 3648,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3635,
											"end": 3768,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3635,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3635,
											"end": 3768,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3690,
											"end": 3700,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 3685,
											"end": 3688,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3681,
											"end": 3701,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 3678,
											"end": 3679,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3671,
											"end": 3702,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3725,
											"end": 3729,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 3722,
											"end": 3723,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3715,
											"end": 3730,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3753,
											"end": 3757,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3750,
											"end": 3751,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3758,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"contracts/NewSC/ERC20Capped.sol",
								"contracts/masverse/MasToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(address,uint256)": "9dc29fac",
							"cap()": "355274ea",
							"decimals()": "313ce567",
							"getDecimals()": "f0141d84",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxcap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"deci\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20InvalidCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20ExceededCap(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidCap(uint256)\":[{\"details\":\"The supplied cap is not a valid cap.\"}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/masverse/MasToken.sol\":\"MasToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a8e54b0924a1acd92806a843998568d6bec01798c550bc440a85cfcd9cfba99\",\"dweb:/ipfs/QmZ26Y3ibYPbCRVB65NAQrGBF1UKDEu2fB8CHHMhYbBqmV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]},\"contracts/NewSC/ERC20Capped.sol\":{\"keccak256\":\"0xb099574e7f897c5e4168e9c1edac142593c0b6fd1fec58b8e25603366a8e9769\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e2fa56b73fd5c96be375ff6f6cfb82ece7413c75d03079d5418859c626027bf\",\"dweb:/ipfs/QmVCbzbhi7eZks46vDaTiGq6x7TvrfbS2j5Nq5eZSRP841\"]},\"contracts/masverse/MasToken.sol\":{\"keccak256\":\"0x7da641e232ef275e618057ef1cac26ac1129c27e709a2981de0768a433ad33ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://219750a2b511221c0ce76bf06a078db6069c5fd3ddc6a5f7c907c65de52c2bbe\",\"dweb:/ipfs/QmejFj9BEdGhqjxFfZPNTeKoJRF8J3a4vRmZYXcSDbivRk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 307,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_balances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_name",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 976,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_paused",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 1190,
								"contract": "contracts/masverse/MasToken.sol:MasToken",
								"label": "_deci",
								"offset": 1,
								"slot": "6",
								"type": "t_uint8"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							967
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 968,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 967,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 967,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								967
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 949,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							284
						],
						"IERC20Errors": [
							189
						],
						"IERC721Errors": [
							237
						]
					},
					"id": 285,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 150,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:1",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 189,
							"linearizedBaseContracts": [
								189
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 159,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "652:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "668:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "685:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:1"
									},
									"src": "621:80:1"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 164,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "889:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:1"
									},
									"src": "864:41:1"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 169,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "1102:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:1"
									},
									"src": "1075:45:1"
								},
								{
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 178,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1509:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1526:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1545:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:1"
									},
									"src": "1476:85:1"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 183,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "1773:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:1"
									},
									"src": "1746:45:1"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 188,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:1"
									},
									"src": "1997:43:1"
								}
							],
							"scope": 285,
							"src": "278:1764:1",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 190,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:1",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 237,
							"linearizedBaseContracts": [
								237
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 195,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "2465:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:1"
									},
									"src": "2440:40:1"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 200,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2652:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:1"
									},
									"src": "2623:46:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 209,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2996:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3012:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3029:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:1"
									},
									"src": "2969:75:1"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 214,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "3233:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:1"
									},
									"src": "3207:42:1"
								},
								{
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 219,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3447:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:1"
									},
									"src": "3419:46:1"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 226,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3756:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3774:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:1"
									},
									"src": "3723:68:1"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 231,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "4004:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:1"
									},
									"src": "3976:46:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 236,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "4258:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:1"
									},
									"src": "4230:46:1"
								}
							],
							"scope": 285,
							"src": "2186:2092:1",
							"usedErrors": [
								195,
								200,
								209,
								214,
								219,
								226,
								231,
								236
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 238,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:1",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 284,
							"linearizedBaseContracts": [
								284
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 249,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4854:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4870:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4887:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4903:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:1"
									},
									"src": "4821:99:1"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 254,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "5110:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:1"
									},
									"src": "5083:43:1"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 259,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "5325:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:1"
									},
									"src": "5296:47:1"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 266,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5645:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5663:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:1"
									},
									"src": "5610:68:1"
								},
								{
									"documentation": {
										"id": 267,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 271,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "5892:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:1"
									},
									"src": "5863:47:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 276,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6147:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:1"
									},
									"src": "6118:47:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 283,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6488:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6507:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:1"
									},
									"src": "6456:73:1"
								}
							],
							"scope": 285,
							"src": "4424:2107:1",
							"usedErrors": [
								249,
								254,
								259,
								266,
								271,
								276,
								283
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							967
						],
						"ERC20": [
							799
						],
						"IERC20": [
							877
						],
						"IERC20Errors": [
							189
						],
						"IERC20Metadata": [
							937
						]
					},
					"id": 800,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 286,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 288,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 878,
							"src": "131:36:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 287,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 290,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 938,
							"src": "168:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 289,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 937,
										"src": "176:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 292,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 968,
							"src": "232:48:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 291,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 967,
										"src": "240:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 294,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 285,
							"src": "281:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 293,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 189,
										"src": "289:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 296,
										"name": "Context",
										"nameLocations": [
											"1428:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 967,
										"src": "1428:7:2"
									},
									"id": 297,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:2"
								},
								{
									"baseName": {
										"id": 298,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "1437:6:2"
									},
									"id": 299,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:2"
								},
								{
									"baseName": {
										"id": 300,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 937,
										"src": "1445:14:2"
									},
									"id": 301,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:2"
								},
								{
									"baseName": {
										"id": 302,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 189,
										"src": "1461:12:2"
									},
									"id": 303,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 295,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 799,
							"linearizedBaseContracts": [
								799,
								189,
								937,
								877,
								967
							],
							"name": "ERC20",
							"nameLocation": "1419:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 307,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1480:53:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 306,
										"keyName": "account",
										"keyNameLocation": "1496:7:2",
										"keyType": {
											"id": 304,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 305,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 313,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1540:83:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 312,
										"keyName": "account",
										"keyNameLocation": "1556:7:2",
										"keyType": {
											"id": 308,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 311,
											"keyName": "spender",
											"keyNameLocation": "1583:7:2",
											"keyType": {
												"id": 309,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 310,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 315,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1630:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 314,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 317,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1665:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 316,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 319,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1691:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 318,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "1952:57:2",
										"statements": [
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 327,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "1962:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "1970:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:2"
											},
											{
												"expression": {
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 331,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "1985:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 332,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 324,
														"src": "1995:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:2"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 336,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1908:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 321,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1929:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:2"
									},
									"scope": 799,
									"src": "1896:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										924
									],
									"body": {
										"id": 344,
										"nodeType": "Block",
										"src": "2134:29:2",
										"statements": [
											{
												"expression": {
													"id": 342,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 317,
													"src": "2151:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 341,
												"id": 343,
												"nodeType": "Return",
												"src": "2144:12:2"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:2"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2119:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 339,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:2"
									},
									"scope": 799,
									"src": "2074:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										930
									],
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2338:31:2",
										"statements": [
											{
												"expression": {
													"id": 351,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 319,
													"src": "2355:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 350,
												"id": 352,
												"nodeType": "Return",
												"src": "2348:14:2"
											}
										]
									},
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:2"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "2323:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:2"
									},
									"scope": 799,
									"src": "2276:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										936
									],
									"body": {
										"id": 362,
										"nodeType": "Block",
										"src": "3058:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 360,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 359,
												"id": 361,
												"nodeType": "Return",
												"src": "3068:9:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:2"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "3051:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 357,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:2"
									},
									"scope": 799,
									"src": "3002:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										826
									],
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "3205:36:2",
										"statements": [
											{
												"expression": {
													"id": 369,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 315,
													"src": "3222:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 368,
												"id": 370,
												"nodeType": "Return",
												"src": "3215:19:2"
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:2"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "3196:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:2"
									},
									"scope": 799,
									"src": "3144:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										834
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "3373:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 380,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "3390:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 382,
													"indexExpression": {
														"id": 381,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 375,
														"src": "3400:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 379,
												"id": 383,
												"nodeType": "Return",
												"src": "3383:25:2"
											}
										]
									},
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3318:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:2"
									},
									"returnParameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3364:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:2"
									},
									"scope": 799,
									"src": "3299:116:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										844
									],
									"body": {
										"id": 408,
										"nodeType": "Block",
										"src": "3685:103:2",
										"statements": [
											{
												"assignments": [
													396
												],
												"declarations": [
													{
														"constant": false,
														"id": 396,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 408,
														"src": "3695:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 395,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 399,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 397,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "3711:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 401,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "3743:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 402,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "3750:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 403,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "3754:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 400,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "3733:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 394,
												"id": 407,
												"nodeType": "Return",
												"src": "3770:11:2"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3628:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3640:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:2"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3679:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 392,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:2"
									},
									"scope": 799,
									"src": "3610:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										854
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "3935:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 419,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "3952:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 421,
														"indexExpression": {
															"id": 420,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "3964:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 423,
													"indexExpression": {
														"id": 422,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "3971:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 418,
												"id": 424,
												"nodeType": "Return",
												"src": "3945:34:2"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3865:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3880:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:2"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3926:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:2"
									},
									"scope": 799,
									"src": "3846:140:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										864
									],
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "4372:107:2",
										"statements": [
											{
												"assignments": [
													437
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 449,
														"src": "4382:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 436,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 440,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 438,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "4398:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "4429:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4436:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "4445:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 441,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 690,
														"src": "4420:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 435,
												"id": 448,
												"nodeType": "Return",
												"src": "4461:11:2"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4310:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4327:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:2"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4366:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:2"
									},
									"scope": 799,
									"src": "4293:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										876
									],
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "5132:151:2",
										"statements": [
											{
												"assignments": [
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 481,
														"src": "5142:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 462,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 466,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 464,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "5160:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 468,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "5198:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "5204:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "5213:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 467,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "5182:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 474,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "5239:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 475,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 455,
															"src": "5245:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 476,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "5249:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 473,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "5229:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 478,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 461,
												"id": 480,
												"nodeType": "Return",
												"src": "5265:11:2"
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5061:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5075:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5087:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:2"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5126:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 459,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:2"
									},
									"scope": 799,
									"src": "5039:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "5725:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 492,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "5739:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 493,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 506,
												"nodeType": "IfStatement",
												"src": "5735:86:2",
												"trueBody": {
													"id": 505,
													"nodeType": "Block",
													"src": "5759:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 501,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 499,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 498,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "5780:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 504,
															"nodeType": "RevertStatement",
															"src": "5773:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 507,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "5834:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 508,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 511,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 521,
												"nodeType": "IfStatement",
												"src": "5830:86:2",
												"trueBody": {
													"id": 520,
													"nodeType": "Block",
													"src": "5852:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 516,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 514,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 513,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "5873:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 519,
															"nodeType": "RevertStatement",
															"src": "5866:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 523,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "5933:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "5939:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 525,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "5943:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "5925:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:2"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5675:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5689:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5701:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:2"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:2"
									},
									"scope": 799,
									"src": "5656:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "6346:1032:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 539,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "6360:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 540,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 576,
													"nodeType": "Block",
													"src": "6534:362:2",
													"statements": [
														{
															"assignments": [
																551
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 551,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 576,
																	"src": "6548:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 550,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 555,
															"initialValue": {
																"baseExpression": {
																	"id": 552,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 307,
																	"src": "6570:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 554,
																"indexExpression": {
																	"id": 553,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 532,
																	"src": "6580:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 556,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 551,
																	"src": "6603:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 557,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6617:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 566,
															"nodeType": "IfStatement",
															"src": "6599:115:2",
															"trueBody": {
																"id": 565,
																"nodeType": "Block",
																"src": "6624:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 560,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 532,
																					"src": "6674:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 561,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 551,
																					"src": "6680:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 562,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 536,
																					"src": "6693:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 559,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6649:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 564,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:2"
																	}
																]
															}
														},
														{
															"id": 575,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:2",
															"statements": [
																{
																	"expression": {
																		"id": 573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 567,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "6834:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 569,
																			"indexExpression": {
																				"id": 568,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "6844:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 570,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 551,
																				"src": "6852:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 571,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 536,
																				"src": "6866:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 574,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:2"
																}
															]
														}
													]
												},
												"id": 577,
												"nodeType": "IfStatement",
												"src": "6356:540:2",
												"trueBody": {
													"id": 549,
													"nodeType": "Block",
													"src": "6380:148:2",
													"statements": [
														{
															"expression": {
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 545,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 315,
																	"src": "6496:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 546,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6512:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 548,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 578,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "6910:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 579,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 597,
													"nodeType": "Block",
													"src": "7125:206:2",
													"statements": [
														{
															"id": 596,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:2",
															"statements": [
																{
																	"expression": {
																		"id": 594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 590,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "7284:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 592,
																			"indexExpression": {
																				"id": 591,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 534,
																				"src": "7294:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 593,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "7301:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 595,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:2"
																}
															]
														}
													]
												},
												"id": 598,
												"nodeType": "IfStatement",
												"src": "6906:425:2",
												"trueBody": {
													"id": 589,
													"nodeType": "Block",
													"src": "6928:191:2",
													"statements": [
														{
															"id": 588,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:2",
															"statements": [
																{
																	"expression": {
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 584,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "7073:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 585,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "7089:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 587,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 600,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "7355:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 601,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "7361:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 602,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "7365:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 599,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "7346:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "EmitStatement",
												"src": "7341:30:2"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6288:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6302:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6314:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:2"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:2"
									},
									"scope": 799,
									"src": "6271:1107:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 638,
										"nodeType": "Block",
										"src": "7777:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 614,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 609,
														"src": "7791:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 617,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 615,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 628,
												"nodeType": "IfStatement",
												"src": "7787:91:2",
												"trueBody": {
													"id": 627,
													"nodeType": "Block",
													"src": "7814:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 623,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 621,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 620,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "7835:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 626,
															"nodeType": "RevertStatement",
															"src": "7828:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 630,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 634,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "7907:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 635,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "7916:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 629,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "7887:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 637,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:2"
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7736:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7753:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:2"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:2"
									},
									"scope": 799,
									"src": "7721:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "8303:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 647,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 642,
														"src": "8317:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 648,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 661,
												"nodeType": "IfStatement",
												"src": "8313:89:2",
												"trueBody": {
													"id": 660,
													"nodeType": "Block",
													"src": "8340:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 656,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 654,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 653,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "8361:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 659,
															"nodeType": "RevertStatement",
															"src": "8354:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 663,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "8419:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 664,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "8440:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 662,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "8411:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:2"
											}
										]
									},
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "8262:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "8279:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:2"
									},
									"returnParameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:2"
									},
									"scope": 799,
									"src": "8247:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "9063:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 683,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "9082:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 684,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "9089:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "9098:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 686,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 682,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 750,
														"src": "9073:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:2"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "9007:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "9022:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "9039:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:2"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:2"
									},
									"scope": 799,
									"src": "8989:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 749,
										"nodeType": "Block",
										"src": "10047:334:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 702,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "10061:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 703,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 716,
												"nodeType": "IfStatement",
												"src": "10057:89:2",
												"trueBody": {
													"id": 715,
													"nodeType": "Block",
													"src": "10082:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 711,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 709,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 708,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "10103:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 714,
															"nodeType": "RevertStatement",
															"src": "10096:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 717,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 695,
														"src": "10159:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 720,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 718,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 731,
												"nodeType": "IfStatement",
												"src": "10155:90:2",
												"trueBody": {
													"id": 730,
													"nodeType": "Block",
													"src": "10182:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 724,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 723,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 188,
																	"src": "10203:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 729,
															"nodeType": "RevertStatement",
															"src": "10196:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 732,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "10254:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 735,
															"indexExpression": {
																"id": 733,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "10266:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 736,
														"indexExpression": {
															"id": 734,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "10273:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 737,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "10284:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 739,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:2"
											},
											{
												"condition": {
													"id": 740,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 699,
													"src": "10303:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 748,
												"nodeType": "IfStatement",
												"src": "10299:76:2",
												"trueBody": {
													"id": 747,
													"nodeType": "Block",
													"src": "10314:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 742,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 693,
																		"src": "10342:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 743,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 695,
																		"src": "10349:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 744,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "10358:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 741,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 820,
																	"src": "10333:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 746,
															"nodeType": "EmitStatement",
															"src": "10328:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9967:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9999:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "10014:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:2"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:2"
									},
									"scope": 799,
									"src": "9949:432:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 797,
										"nodeType": "Block",
										"src": "10752:388:2",
										"statements": [
											{
												"assignments": [
													761
												],
												"declarations": [
													{
														"constant": false,
														"id": 761,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 797,
														"src": "10762:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 760,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 766,
												"initialValue": {
													"arguments": [
														{
															"id": 763,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "10799:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 764,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "10806:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 762,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 426,
														"src": "10789:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 767,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "10828:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 769,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 768,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 796,
												"nodeType": "IfStatement",
												"src": "10824:310:2",
												"trueBody": {
													"id": 795,
													"nodeType": "Block",
													"src": "10867:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 774,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 761,
																	"src": "10885:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 775,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "10904:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 784,
															"nodeType": "IfStatement",
															"src": "10881:130:2",
															"trueBody": {
																"id": 783,
																"nodeType": "Block",
																"src": "10911:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 778,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 755,
																					"src": "10963:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 779,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "10972:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 780,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "10990:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 777,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 178,
																				"src": "10936:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 782,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:2"
																	}
																]
															}
														},
														{
															"id": 794,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 786,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 753,
																				"src": "11061:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 787,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 755,
																				"src": "11068:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 790,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 788,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "11077:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 789,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "11096:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 791,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 785,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				690,
																				750
																			],
																			"referencedDeclaration": 750,
																			"src": "11052:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 793,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10688:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10720:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:2"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:2"
									},
									"scope": 799,
									"src": "10663:477:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 800,
							"src": "1401:9741:2",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "105:11038:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						]
					},
					"id": 878,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 801,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 802,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 877,
							"linearizedBaseContracts": [
								877
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 811,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 820,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 877,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 834,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 877,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 841,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 877,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 877,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 864,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 861,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 877,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 877,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 878,
							"src": "203:2575:3",
							"usedErrors": [],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
					"exportedSymbols": {
						"ERC20": [
							799
						],
						"ERC20Pausable": [
							911
						],
						"Pausable": [
							1084
						]
					},
					"id": 912,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 879,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 881,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 912,
							"sourceUnit": 800,
							"src": "150:35:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 880,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 799,
										"src": "158:5:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
							"file": "../../../utils/Pausable.sol",
							"id": 883,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 912,
							"sourceUnit": 1085,
							"src": "186:53:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 882,
										"name": "Pausable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1084,
										"src": "194:8:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 885,
										"name": "ERC20",
										"nameLocations": [
											"964:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 799,
										"src": "964:5:4"
									},
									"id": 886,
									"nodeType": "InheritanceSpecifier",
									"src": "964:5:4"
								},
								{
									"baseName": {
										"id": 887,
										"name": "Pausable",
										"nameLocations": [
											"971:8:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1084,
										"src": "971:8:4"
									},
									"id": 888,
									"nodeType": "InheritanceSpecifier",
									"src": "971:8:4"
								}
							],
							"canonicalName": "ERC20Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 884,
								"nodeType": "StructuredDocumentation",
								"src": "241:687:4",
								"text": " @dev ERC20 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug.\n IMPORTANT: This contract does not include public pause and unpause functions. In\n addition to inheriting this contract, you must define both functions, invoking the\n {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n make the contract pause mechanism of the contract unreachable, and thus unusable."
							},
							"fullyImplemented": true,
							"id": 911,
							"linearizedBaseContracts": [
								911,
								1084,
								799,
								189,
								937,
								877,
								967
							],
							"name": "ERC20Pausable",
							"nameLocation": "947:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										606
									],
									"body": {
										"id": 909,
										"nodeType": "Block",
										"src": "1210:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 904,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 891,
															"src": "1234:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 905,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 893,
															"src": "1240:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 906,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "1244:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 901,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1220:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Pausable_$911_$",
																"typeString": "type(contract super ERC20Pausable)"
															}
														},
														"id": 903,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1226:7:4",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 606,
														"src": "1220:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1220:30:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 908,
												"nodeType": "ExpressionStatement",
												"src": "1220:30:4"
											}
										]
									},
									"documentation": {
										"id": 889,
										"nodeType": "StructuredDocumentation",
										"src": "986:121:4",
										"text": " @dev See {ERC20-_update}.\n Requirements:\n - the contract must not be paused."
									},
									"id": 910,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 899,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 898,
												"name": "whenNotPaused",
												"nameLocations": [
													"1196:13:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1009,
												"src": "1196:13:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1196:13:4"
										}
									],
									"name": "_update",
									"nameLocation": "1121:7:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 897,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1187:8:4"
									},
									"parameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1137:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1129:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 890,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1129:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1151:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1143:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 892,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1143:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1163:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1155:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1155:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1128:41:4"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1210:0:4"
									},
									"scope": 911,
									"src": "1112:145:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 912,
							"src": "929:330:4",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188,
								989,
								992
							],
							"usedEvents": [
								811,
								820,
								981,
								986
							]
						}
					],
					"src": "124:1136:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						],
						"IERC20Metadata": [
							937
						]
					},
					"id": 938,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 913,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 915,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 938,
							"sourceUnit": 878,
							"src": "151:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 914,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "159:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 917,
										"name": "IERC20",
										"nameLocations": [
											"305:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "305:6:5"
									},
									"id": 918,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:5"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 916,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:5",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 937,
							"linearizedBaseContracts": [
								937,
								877
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 919,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 924,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:5"
									},
									"returnParameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "416:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 921,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:5"
									},
									"scope": 937,
									"src": "377:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 930,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:5"
									},
									"returnParameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "539:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 927,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:5"
									},
									"scope": 937,
									"src": "498:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 936,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:5"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "673:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 933,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:5"
									},
									"scope": 937,
									"src": "630:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 938,
							"src": "277:405:5",
							"usedErrors": [],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "125:558:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							967
						]
					},
					"id": 968,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 939,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 940,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 967,
							"linearizedBaseContracts": [
								967
							],
							"name": "Context",
							"nameLocation": "642:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 948,
										"nodeType": "Block",
										"src": "718:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 945,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 944,
												"id": 947,
												"nodeType": "Return",
												"src": "728:17:6"
											}
										]
									},
									"id": 949,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:6"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "709:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 942,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:6"
									},
									"scope": 967,
									"src": "656:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "825:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 954,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 955,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 953,
												"id": 956,
												"nodeType": "Return",
												"src": "835:15:6"
											}
										]
									},
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:6"
									},
									"returnParameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "809:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 951,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:6"
									},
									"scope": 967,
									"src": "758:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 965,
										"nodeType": "Block",
										"src": "935:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 963,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 962,
												"id": 964,
												"nodeType": "Return",
												"src": "945:8:6"
											}
										]
									},
									"id": 966,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:6"
									},
									"returnParameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "926:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:6"
									},
									"scope": 967,
									"src": "863:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 968,
							"src": "624:338:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							967
						],
						"Pausable": [
							1084
						]
					},
					"id": 1085,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 969,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 971,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1085,
							"sourceUnit": 968,
							"src": "128:45:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 970,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 967,
										"src": "136:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 973,
										"name": "Context",
										"nameLocations": [
											"645:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 967,
										"src": "645:7:7"
									},
									"id": 974,
									"nodeType": "InheritanceSpecifier",
									"src": "645:7:7"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 972,
								"nodeType": "StructuredDocumentation",
								"src": "175:439:7",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 1084,
							"linearizedBaseContracts": [
								1084,
								967
							],
							"name": "Pausable",
							"nameLocation": "633:8:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 976,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "672:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1084,
									"src": "659:20:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 975,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "659:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 977,
										"nodeType": "StructuredDocumentation",
										"src": "686:73:7",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 981,
									"name": "Paused",
									"nameLocation": "770:6:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 979,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "785:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "777:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 978,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "777:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:17:7"
									},
									"src": "764:30:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "800:70:7",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 986,
									"name": "Unpaused",
									"nameLocation": "881:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "898:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "890:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:17:7"
									},
									"src": "875:32:7"
								},
								{
									"documentation": {
										"id": 987,
										"nodeType": "StructuredDocumentation",
										"src": "913:76:7",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 989,
									"name": "EnforcedPause",
									"nameLocation": "1000:13:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:2:7"
									},
									"src": "994:22:7"
								},
								{
									"documentation": {
										"id": 990,
										"nodeType": "StructuredDocumentation",
										"src": "1022:80:7",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 992,
									"name": "ExpectedPause",
									"nameLocation": "1113:13:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:2:7"
									},
									"src": "1107:22:7"
								},
								{
									"body": {
										"id": 1000,
										"nodeType": "Block",
										"src": "1221:32:7",
										"statements": [
											{
												"expression": {
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 996,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "1231:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1241:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1231:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 999,
												"nodeType": "ExpressionStatement",
												"src": "1231:15:7"
											}
										]
									},
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "1135:67:7",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 1001,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1218:2:7"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1221:0:7"
									},
									"scope": 1084,
									"src": "1207:46:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1008,
										"nodeType": "Block",
										"src": "1464:47:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1004,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1038,
														"src": "1474:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1474:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1006,
												"nodeType": "ExpressionStatement",
												"src": "1474:19:7"
											},
											{
												"id": 1007,
												"nodeType": "PlaceholderStatement",
												"src": "1503:1:7"
											}
										]
									},
									"documentation": {
										"id": 1002,
										"nodeType": "StructuredDocumentation",
										"src": "1259:175:7",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1009,
									"name": "whenNotPaused",
									"nameLocation": "1448:13:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:7"
									},
									"src": "1439:72:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1016,
										"nodeType": "Block",
										"src": "1711:44:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1012,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1051,
														"src": "1721:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1721:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1014,
												"nodeType": "ExpressionStatement",
												"src": "1721:16:7"
											},
											{
												"id": 1015,
												"nodeType": "PlaceholderStatement",
												"src": "1747:1:7"
											}
										]
									},
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "1517:167:7",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 1017,
									"name": "whenPaused",
									"nameLocation": "1698:10:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:2:7"
									},
									"src": "1689:66:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1025,
										"nodeType": "Block",
										"src": "1903:31:7",
										"statements": [
											{
												"expression": {
													"id": 1023,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 976,
													"src": "1920:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1022,
												"id": 1024,
												"nodeType": "Return",
												"src": "1913:14:7"
											}
										]
									},
									"documentation": {
										"id": 1018,
										"nodeType": "StructuredDocumentation",
										"src": "1761:84:7",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 1026,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1859:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1865:2:7"
									},
									"returnParameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "1897:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1020,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1897:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1896:6:7"
									},
									"scope": 1084,
									"src": "1850:84:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1037,
										"nodeType": "Block",
										"src": "2053:77:7",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1030,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1026,
														"src": "2067:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2067:8:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1036,
												"nodeType": "IfStatement",
												"src": "2063:61:7",
												"trueBody": {
													"id": 1035,
													"nodeType": "Block",
													"src": "2077:47:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1032,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 989,
																	"src": "2098:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1033,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2098:15:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1034,
															"nodeType": "RevertStatement",
															"src": "2091:22:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1027,
										"nodeType": "StructuredDocumentation",
										"src": "1940:57:7",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 1038,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2011:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:7"
									},
									"returnParameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2053:0:7"
									},
									"scope": 1084,
									"src": "2002:128:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1050,
										"nodeType": "Block",
										"src": "2250:78:7",
										"statements": [
											{
												"condition": {
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2264:9:7",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1042,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "2265:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1043,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2265:8:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1049,
												"nodeType": "IfStatement",
												"src": "2260:62:7",
												"trueBody": {
													"id": 1048,
													"nodeType": "Block",
													"src": "2275:47:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1045,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 992,
																	"src": "2296:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2296:15:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1047,
															"nodeType": "RevertStatement",
															"src": "2289:22:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1039,
										"nodeType": "StructuredDocumentation",
										"src": "2136:61:7",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 1051,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2211:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2225:2:7"
									},
									"returnParameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2250:0:7"
									},
									"scope": 1084,
									"src": "2202:126:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "2512:66:7",
										"statements": [
											{
												"expression": {
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1057,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "2522:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1058,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2532:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2522:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1060,
												"nodeType": "ExpressionStatement",
												"src": "2522:14:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1062,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 949,
																"src": "2558:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2558:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1061,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 981,
														"src": "2551:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2551:20:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1065,
												"nodeType": "EmitStatement",
												"src": "2546:25:7"
											}
										]
									},
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "2334:124:7",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1055,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1054,
												"name": "whenNotPaused",
												"nameLocations": [
													"2498:13:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1009,
												"src": "2498:13:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2498:13:7"
										}
									],
									"name": "_pause",
									"nameLocation": "2472:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2478:2:7"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2512:0:7"
									},
									"scope": 1084,
									"src": "2463:115:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "2758:69:7",
										"statements": [
											{
												"expression": {
													"id": 1075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1073,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "2768:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1074,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2778:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2768:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1076,
												"nodeType": "ExpressionStatement",
												"src": "2768:15:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1078,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 949,
																"src": "2807:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2807:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1077,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "2798:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2798:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1081,
												"nodeType": "EmitStatement",
												"src": "2793:27:7"
											}
										]
									},
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "2584:121:7",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1071,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1070,
												"name": "whenPaused",
												"nameLocations": [
													"2747:10:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1017,
												"src": "2747:10:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2747:10:7"
										}
									],
									"name": "_unpause",
									"nameLocation": "2719:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2727:2:7"
									},
									"returnParameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2758:0:7"
									},
									"scope": 1084,
									"src": "2710:117:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1085,
							"src": "615:2214:7",
							"usedErrors": [
								989,
								992
							],
							"usedEvents": [
								981,
								986
							]
						}
					],
					"src": "102:2728:7"
				},
				"id": 7
			},
			"contracts/NewSC/ERC20Capped.sol": {
				"ast": {
					"absolutePath": "contracts/NewSC/ERC20Capped.sol",
					"exportedSymbols": {
						"Context": [
							967
						],
						"ERC20": [
							799
						],
						"ERC20Capped": [
							1177
						],
						"IERC20": [
							877
						],
						"IERC20Errors": [
							189
						],
						"IERC20Metadata": [
							937
						]
					},
					"id": 1178,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1086,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1087,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1178,
							"sourceUnit": 800,
							"src": "153:55:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1089,
										"name": "ERC20",
										"nameLocations": [
											"326:5:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 799,
										"src": "326:5:8"
									},
									"id": 1090,
									"nodeType": "InheritanceSpecifier",
									"src": "326:5:8"
								}
							],
							"canonicalName": "ERC20Capped",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1088,
								"nodeType": "StructuredDocumentation",
								"src": "212:79:8",
								"text": " @dev Extension of {ERC20} that adds a cap to the supply of tokens."
							},
							"fullyImplemented": true,
							"id": 1177,
							"linearizedBaseContracts": [
								1177,
								799,
								189,
								937,
								877,
								967
							],
							"name": "ERC20Capped",
							"nameLocation": "311:11:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1092,
									"mutability": "immutable",
									"name": "_cap",
									"nameLocation": "365:4:8",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "339:30:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1091,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "339:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "378:61:8",
										"text": " @dev Total supply cap has been exceeded."
									},
									"errorSelector": "9e79f854",
									"id": 1099,
									"name": "ERC20ExceededCap",
									"nameLocation": "451:16:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "increasedSupply",
												"nameLocation": "476:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "468:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "468:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "cap",
												"nameLocation": "501:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "493:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "467:38:8"
									},
									"src": "445:61:8"
								},
								{
									"documentation": {
										"id": 1100,
										"nodeType": "StructuredDocumentation",
										"src": "514:62:8",
										"text": " @dev The supplied cap is not a valid cap."
									},
									"errorSelector": "392e1e27",
									"id": 1104,
									"name": "ERC20InvalidCap",
									"nameLocation": "588:15:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "cap",
												"nameLocation": "612:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "604:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "603:13:8"
									},
									"src": "582:35:8"
								},
								{
									"body": {
										"id": 1114,
										"nodeType": "Block",
										"src": "789:30:8",
										"statements": [
											{
												"expression": {
													"id": 1112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1110,
														"name": "_cap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1092,
														"src": "800:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1111,
														"name": "cap_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "807:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "800:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1113,
												"nodeType": "ExpressionStatement",
												"src": "800:11:8"
											}
										]
									},
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "625:132:8",
										"text": " @dev Sets the value of the `cap`. This value is immutable, it can only be\n set once during construction."
									},
									"id": 1115,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "cap_",
												"nameLocation": "783:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "775:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "775:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "774:14:8"
									},
									"returnParameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "789:0:8"
									},
									"scope": 1177,
									"src": "763:56:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1123,
										"nodeType": "Block",
										"src": "956:30:8",
										"statements": [
											{
												"expression": {
													"id": 1121,
													"name": "_cap",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1092,
													"src": "974:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1120,
												"id": 1122,
												"nodeType": "Return",
												"src": "967:11:8"
											}
										]
									},
									"documentation": {
										"id": 1116,
										"nodeType": "StructuredDocumentation",
										"src": "827:70:8",
										"text": " @dev Returns the cap on the token's total supply."
									},
									"functionSelector": "355274ea",
									"id": 1124,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cap",
									"nameLocation": "912:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:8"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1124,
												"src": "947:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "947:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "946:9:8"
									},
									"scope": 1177,
									"src": "903:83:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										606
									],
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "1130:323:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1138,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1127,
															"src": "1155:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1139,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1129,
															"src": "1161:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1140,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "1165:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1135,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1141:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Capped_$1177_$",
																"typeString": "type(contract super ERC20Capped)"
															}
														},
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1147:7:8",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 606,
														"src": "1141:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1141:30:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1142,
												"nodeType": "ExpressionStatement",
												"src": "1141:30:8"
											},
											{
												"assignments": [
													1144
												],
												"declarations": [
													{
														"constant": false,
														"id": 1144,
														"mutability": "mutable",
														"name": "maxSupply",
														"nameLocation": "1190:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1175,
														"src": "1182:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1143,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1182:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1147,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1145,
														"name": "cap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1124,
														"src": "1202:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1202:5:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1182:25:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1148,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1127,
															"src": "1222:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1238:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1150,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1230:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1149,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1230:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1230:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1222:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1156,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1154,
															"name": "maxSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1144,
															"src": "1244:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1155,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1257:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1244:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1222:36:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1174,
												"nodeType": "IfStatement",
												"src": "1218:228:8",
												"trueBody": {
													"id": 1173,
													"nodeType": "Block",
													"src": "1260:186:8",
													"statements": [
														{
															"assignments": [
																1159
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1159,
																	"mutability": "mutable",
																	"name": "supply",
																	"nameLocation": "1297:6:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1173,
																	"src": "1289:14:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1158,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1289:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1162,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1160,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 372,
																	"src": "1306:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1306:13:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1289:30:8"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1163,
																	"name": "supply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1159,
																	"src": "1338:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 1164,
																	"name": "maxSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "1347:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1338:18:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1172,
															"nodeType": "IfStatement",
															"src": "1334:101:8",
															"trueBody": {
																"id": 1171,
																"nodeType": "Block",
																"src": "1358:77:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1167,
																					"name": "supply",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1159,
																					"src": "1401:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1168,
																					"name": "maxSupply",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1144,
																					"src": "1409:9:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1166,
																				"name": "ERC20ExceededCap",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1099,
																				"src": "1384:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (uint256,uint256) pure"
																				}
																			},
																			"id": 1169,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1384:35:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1170,
																		"nodeType": "RevertStatement",
																		"src": "1377:42:8"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1125,
										"nodeType": "StructuredDocumentation",
										"src": "994:46:8",
										"text": " @dev See {ERC20-_update}."
									},
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "1055:7:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1133,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1121:8:8"
									},
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1071:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1063:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1085:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1077:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1077:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1097:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1089:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1089:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:41:8"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1130:0:8"
									},
									"scope": 1177,
									"src": "1046:407:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1178,
							"src": "293:1163:8",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188,
								1099,
								1104
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "125:1331:8"
				},
				"id": 8
			},
			"contracts/masverse/MasToken.sol": {
				"ast": {
					"absolutePath": "contracts/masverse/MasToken.sol",
					"exportedSymbols": {
						"Context": [
							967
						],
						"ERC20": [
							799
						],
						"ERC20Capped": [
							1177
						],
						"ERC20Pausable": [
							911
						],
						"IERC20": [
							877
						],
						"IERC20Errors": [
							189
						],
						"IERC20Metadata": [
							937
						],
						"MasToken": [
							1316
						],
						"Ownable": [
							147
						],
						"Pausable": [
							1084
						]
					},
					"id": 1317,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1179,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1180,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 148,
							"src": "61:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
							"id": 1181,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 912,
							"src": "115:74:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/NewSC/ERC20Capped.sol",
							"file": "contracts/NewSC/ERC20Capped.sol",
							"id": 1182,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 1178,
							"src": "191:41:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1183,
										"name": "Ownable",
										"nameLocations": [
											"257:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "257:7:9"
									},
									"id": 1184,
									"nodeType": "InheritanceSpecifier",
									"src": "257:7:9"
								},
								{
									"baseName": {
										"id": 1185,
										"name": "ERC20Pausable",
										"nameLocations": [
											"266:13:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 911,
										"src": "266:13:9"
									},
									"id": 1186,
									"nodeType": "InheritanceSpecifier",
									"src": "266:13:9"
								},
								{
									"baseName": {
										"id": 1187,
										"name": "ERC20Capped",
										"nameLocations": [
											"281:11:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1177,
										"src": "281:11:9"
									},
									"id": 1188,
									"nodeType": "InheritanceSpecifier",
									"src": "281:11:9"
								}
							],
							"canonicalName": "MasToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1316,
							"linearizedBaseContracts": [
								1316,
								1177,
								911,
								1084,
								799,
								189,
								937,
								877,
								147,
								967
							],
							"name": "MasToken",
							"nameLocation": "245:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1190,
									"mutability": "mutable",
									"name": "_deci",
									"nameLocation": "314:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "300:19:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1189,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "300:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1228,
										"nodeType": "Block",
										"src": "623:76:9",
										"statements": [
											{
												"expression": {
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1219,
														"name": "_deci",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1190,
														"src": "634:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1220,
														"name": "deci",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1200,
														"src": "642:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "634:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1222,
												"nodeType": "ExpressionStatement",
												"src": "634:12:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1224,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "663:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1225,
															"name": "initialSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "677:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1223,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "657:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "657:34:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1227,
												"nodeType": "ExpressionStatement",
												"src": "657:34:9"
											}
										]
									},
									"id": 1229,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1205,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1196,
													"src": "531:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 1206,
													"name": "symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1198,
													"src": "537:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 1207,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1204,
												"name": "ERC20",
												"nameLocations": [
													"525:5:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 799,
												"src": "525:5:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "525:19:9"
										},
										{
											"arguments": [
												{
													"id": 1209,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1192,
													"src": "562:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1210,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1208,
												"name": "Ownable",
												"nameLocations": [
													"554:7:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "554:7:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "554:21:9"
										},
										{
											"arguments": [
												{
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1212,
														"name": "maxcap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "597:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1215,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "3130",
															"id": 1213,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "606:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														},
														"nodeType": "BinaryOperation",
														"operator": "**",
														"rightExpression": {
															"id": 1214,
															"name": "deci",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1200,
															"src": "612:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"src": "606:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "597:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1217,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1211,
												"name": "ERC20Capped",
												"nameLocations": [
													"585:11:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1177,
												"src": "585:11:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "585:32:9"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "358:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "350:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1194,
												"mutability": "mutable",
												"name": "maxcap",
												"nameLocation": "389:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "381:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1193,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "381:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "420:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "406:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1195,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "406:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "449:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "435:20:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1197,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "435:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "deci",
												"nameLocation": "472:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "466:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1199,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "466:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "initialSupply",
												"nameLocation": "495:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "487:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "339:176:9"
									},
									"returnParameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "623:0:9"
									},
									"scope": 1316,
									"src": "328:371:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										363
									],
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "764:31:9",
										"statements": [
											{
												"expression": {
													"id": 1235,
													"name": "_deci",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1190,
													"src": "782:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1234,
												"id": 1236,
												"nodeType": "Return",
												"src": "775:12:9"
											}
										]
									},
									"functionSelector": "313ce567",
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "716:8:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1231,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "739:8:9"
									},
									"parameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "724:2:9"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "757:5:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1232,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "757:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:7:9"
									},
									"scope": 1316,
									"src": "707:88:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1252,
										"nodeType": "Block",
										"src": "862:36:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1248,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "879:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1249,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1242,
															"src": "883:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1247,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "873:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "873:17:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1251,
												"nodeType": "ExpressionStatement",
												"src": "873:17:9"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 1253,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1245,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1244,
												"name": "onlyOwner",
												"nameLocations": [
													"852:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "852:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "852:9:9"
										}
									],
									"name": "mint",
									"nameLocation": "812:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "825:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "817:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "817:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "837:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "829:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:28:9"
									},
									"returnParameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "862:0:9"
									},
									"scope": 1316,
									"src": "803:95:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1267,
										"nodeType": "Block",
										"src": "970:41:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1263,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1255,
															"src": "987:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1264,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1257,
															"src": "996:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1262,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "981:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "981:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1266,
												"nodeType": "ExpressionStatement",
												"src": "981:22:9"
											}
										]
									},
									"functionSelector": "9dc29fac",
									"id": 1268,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1260,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1259,
												"name": "onlyOwner",
												"nameLocations": [
													"960:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "960:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "960:9:9"
										}
									],
									"name": "burn",
									"nameLocation": "915:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "928:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "920:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "920:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "945:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "937:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "937:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "919:33:9"
									},
									"returnParameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "970:0:9"
									},
									"scope": 1316,
									"src": "906:105:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1276,
										"nodeType": "Block",
										"src": "1053:27:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1273,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1067,
														"src": "1064:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1064:8:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1275,
												"nodeType": "ExpressionStatement",
												"src": "1064:8:9"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 1277,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1271,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1270,
												"name": "onlyOwner",
												"nameLocations": [
													"1043:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1043:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1043:9:9"
										}
									],
									"name": "pause",
									"nameLocation": "1028:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1033:2:9"
									},
									"returnParameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1053:0:9"
									},
									"scope": 1316,
									"src": "1019:61:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1285,
										"nodeType": "Block",
										"src": "1124:29:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1282,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1083,
														"src": "1135:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1135:10:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1284,
												"nodeType": "ExpressionStatement",
												"src": "1135:10:9"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 1286,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1280,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1279,
												"name": "onlyOwner",
												"nameLocations": [
													"1114:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1114:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1114:9:9"
										}
									],
									"name": "unpause",
									"nameLocation": "1097:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1104:2:9"
									},
									"returnParameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1124:0:9"
									},
									"scope": 1316,
									"src": "1088:65:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										910,
										1176
									],
									"body": {
										"id": 1306,
										"nodeType": "Block",
										"src": "1299:49:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1301,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "1324:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1302,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "1330:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1303,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1292,
															"src": "1334:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1298,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1310:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_MasToken_$1316_$",
																"typeString": "type(contract super MasToken)"
															}
														},
														"id": 1300,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1316:7:9",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1176,
														"src": "1310:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1310:30:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1305,
												"nodeType": "ExpressionStatement",
												"src": "1310:30:9"
											}
										]
									},
									"id": 1307,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "1170:7:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1296,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1294,
												"name": "ERC20Pausable",
												"nameLocations": [
													"1271:13:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 911,
												"src": "1271:13:9"
											},
											{
												"id": 1295,
												"name": "ERC20Capped",
												"nameLocations": [
													"1286:11:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1177,
												"src": "1286:11:9"
											}
										],
										"src": "1262:36:9"
									},
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1196:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1188:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1188:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1211:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1240:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1232:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1232:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1177:75:9"
									},
									"returnParameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1299:0:9"
									},
									"scope": 1316,
									"src": "1161:187:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1314,
										"nodeType": "Block",
										"src": "1407:31:9",
										"statements": [
											{
												"expression": {
													"id": 1312,
													"name": "_deci",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1190,
													"src": "1425:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1311,
												"id": 1313,
												"nodeType": "Return",
												"src": "1418:12:9"
											}
										]
									},
									"functionSelector": "f0141d84",
									"id": 1315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getDecimals",
									"nameLocation": "1365:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1376:2:9"
									},
									"returnParameters": {
										"id": 1311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "1400:5:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1309,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1400:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:7:9"
									},
									"scope": 1316,
									"src": "1356:82:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1317,
							"src": "236:1207:9",
							"usedErrors": [
								13,
								18,
								159,
								164,
								169,
								178,
								183,
								188,
								989,
								992,
								1099,
								1104
							],
							"usedEvents": [
								24,
								811,
								820,
								981,
								986
							]
						}
					],
					"src": "33:1410:9"
				},
				"id": 9
			}
		}
	}
}